
../bytestring-0.9.2.1/Data/ByteString/Unsafe.hs:1:16: Warning:
    -fglasgow-exts is deprecated: Use individual extensions instead

../bytestring-0.9.2.1/Data/ByteString.hs:2:16: Warning:
    -fglasgow-exts is deprecated: Use individual extensions instead

../bytestring-0.9.2.1/Data/ByteString/Fusion.hs:2:16: Warning:
    -fglasgow-exts is deprecated: Use individual extensions instead

../bytestring-0.9.2.1/Data/ByteString/Lazy/Internal.hs:2:16: Warning:
    -fglasgow-exts is deprecated: Use individual extensions instead

../bytestring-0.9.2.1/Data/ByteString.hs:265:1: Warning:
    Module `GHC.Handle' is deprecated: use GHC.IO.Handle instead

../bytestring-0.9.2.1/Data/ByteString.hs:271:1: Warning:
    Module `GHC.IOBase' is deprecated: use GHC.IO instead
LiquidHaskell Â© Copyright 2009-13 Regents of the University of California. All Rights Reserved.

liquid FlagArgs

parseSpec: Data/Text/Encoding.hs
paths = ["../../include/","../bytestring-0.9.2.1/","/home/gridaphobe/src/liquid/.hsenv/cabal/share/liquidhaskell-0.1/include/","Data/Text/"]
getSpecs: [("Control.Exception","../../include/Control/Exception.spec"),("Control.Monad","../../include/Control/Monad.spec"),("Data.Bits","../../include/Data/Bits.spec"),("Data.ByteString","../bytestring-0.9.2.1/Data/ByteString.hs"),("Data.ByteString.Fusion","../bytestring-0.9.2.1/Data/ByteString/Fusion.hs"),("Data.ByteString.Internal","../bytestring-0.9.2.1/Data/ByteString/Internal.hs"),("Data.ByteString.Lazy.Internal","../bytestring-0.9.2.1/Data/ByteString/Lazy/Internal.hs"),("Data.ByteString.Unsafe","../bytestring-0.9.2.1/Data/ByteString/Unsafe.hs"),("Data.Int","../../include/Data/Int.spec"),("Data.List","../../include/Data/List.spec"),("Data.Maybe","../../include/Data/Maybe.spec"),("Data.Text.Array","Data/Text/Array.hs"),("Data.Text.Axioms","Data/Text/Axioms.hs"),("Data.Text.Encoding.Error","Data/Text/Encoding/Error.hs"),("Data.Text.Encoding.Fusion","Data/Text/Encoding/Fusion.hs"),("Data.Text.Encoding.Fusion.Common","Data/Text/Encoding/Fusion/Common.hs"),("Data.Text.Encoding.Utf16","Data/Text/Encoding/Utf16.hs"),("Data.Text.Encoding.Utf32","Data/Text/Encoding/Utf32.hs"),("Data.Text.Encoding.Utf8","Data/Text/Encoding/Utf8.hs"),("Data.Text.Fusion","../../include/Data/Text/Fusion.spec"),("Data.Text.Fusion","Data/Text/Fusion.hs"),("Data.Text.Fusion.CaseMapping","Data/Text/Fusion/CaseMapping.hs"),("Data.Text.Fusion.Common","../../include/Data/Text/Fusion/Common.spec"),("Data.Text.Fusion.Common","Data/Text/Fusion/Common.hs"),("Data.Text.Fusion.Internal","Data/Text/Fusion/Internal.hs"),("Data.Text.Fusion.Size","Data/Text/Fusion/Size.hs"),("Data.Text.Internal","Data/Text/Internal.hs"),("Data.Text.Private","Data/Text/Private.hs"),("Data.Text.Unsafe","Data/Text/Unsafe.hs"),("Data.Text.Unsafe.Base","Data/Text/Unsafe/Base.hs"),("Data.Text.UnsafeChar","Data/Text/UnsafeChar.hs"),("Data.Text.UnsafeShift","Data/Text/UnsafeShift.hs"),("Data.Word","../../include/Data/Word.spec"),("Foreign.C.String","../../include/Foreign/C/String.spec"),("Foreign.C.Types","../../include/Foreign/C/Types.spec"),("Foreign.ForeignPtr","../../include/Foreign/ForeignPtr.spec"),("Foreign.Marshal.Alloc","../../include/Foreign/Marshal/Alloc.spec"),("Foreign.Marshal.Array","../../include/Foreign/Marshal/Array.spec"),("Foreign.Ptr","../../include/Foreign/Ptr.spec"),("Foreign.Storable","../../include/Foreign/Storable.spec"),("GHC.Base","../../include/GHC/Base.spec"),("GHC.ForeignPtr","../../include/GHC/ForeignPtr.spec"),("GHC.Ptr","../../include/GHC/Ptr.spec"),("GHC.Types","../../include/GHC/Types.spec"),("GHC.Word","../../include/GHC/Word.spec"),("Language.Haskell.Liquid.Foreign","../../include/Language/Haskell/Liquid/Foreign.hs"),("Language.Haskell.Liquid.Prelude","../../include/Language/Haskell/Liquid/Prelude.hs"),("Prelude","../../include/Prelude.spec"),("System.IO","../../include/System/IO.spec")]
parseSpec: ../../include/Control/Exception.spec
parseSpec: ../../include/Control/Monad.spec
parseSpec: ../../include/Data/Bits.spec
parseSpec: ../bytestring-0.9.2.1/Data/ByteString.hs
parseSpec: ../bytestring-0.9.2.1/Data/ByteString/Fusion.hs
parseSpec: ../bytestring-0.9.2.1/Data/ByteString/Internal.hs
parseSpec: ../bytestring-0.9.2.1/Data/ByteString/Lazy/Internal.hs
parseSpec: ../bytestring-0.9.2.1/Data/ByteString/Unsafe.hs
parseSpec: ../../include/Data/Int.spec
parseSpec: ../../include/Data/List.spec
parseSpec: ../../include/Data/Maybe.spec
parseSpec: Data/Text/Array.hs
parseSpec: Data/Text/Axioms.hs
parseSpec: Data/Text/Encoding/Error.hs
parseSpec: Data/Text/Encoding/Fusion.hs
parseSpec: Data/Text/Encoding/Fusion/Common.hs
parseSpec: Data/Text/Encoding/Utf16.hs
parseSpec: Data/Text/Encoding/Utf32.hs
parseSpec: Data/Text/Encoding/Utf8.hs
parseSpec: ../../include/Data/Text/Fusion.spec
parseSpec: Data/Text/Fusion.hs
parseSpec: Data/Text/Fusion/CaseMapping.hs
parseSpec: ../../include/Data/Text/Fusion/Common.spec
parseSpec: Data/Text/Fusion/Common.hs
parseSpec: Data/Text/Fusion/Internal.hs
parseSpec: Data/Text/Fusion/Size.hs
parseSpec: Data/Text/Internal.hs
parseSpec: Data/Text/Private.hs
parseSpec: Data/Text/Unsafe.hs
parseSpec: Data/Text/Unsafe/Base.hs
parseSpec: Data/Text/UnsafeChar.hs
parseSpec: Data/Text/UnsafeShift.hs
parseSpec: ../../include/Data/Word.spec
parseSpec: ../../include/Foreign/C/String.spec
parseSpec: ../../include/Foreign/C/Types.spec
parseSpec: ../../include/Foreign/ForeignPtr.spec
parseSpec: ../../include/Foreign/Marshal/Alloc.spec
parseSpec: ../../include/Foreign/Marshal/Array.spec
parseSpec: ../../include/Foreign/Ptr.spec
parseSpec: ../../include/Foreign/Storable.spec
parseSpec: ../../include/GHC/Base.spec
parseSpec: ../../include/GHC/ForeignPtr.spec
parseSpec: ../../include/GHC/Ptr.spec
parseSpec: ../../include/GHC/Types.spec
parseSpec: ../../include/GHC/Word.spec
parseSpec: ../../include/Language/Haskell/Liquid/Foreign.hs
parseSpec: ../../include/Language/Haskell/Liquid/Prelude.hs
parseSpec: ../../include/Prelude.spec
parseSpec: ../../include/System/IO.spec
parseSpec: ../../include/GHC/List.lhs
parseSpec: ../../include/GHC/Prim.spec
parseSpec: ../../include/GHC/Classes.spec
parseSpec: ../../include/GHC/Int.spec
parseSpec: ../../include/GHC/Num.spec
parseSpec: ../../include/GHC/Real.spec
parseSpec: ../../include/GHC/IO/Handle.spec
Module Imports: ["Control.Exception","Control.Monad","Data.Bits","Data.ByteString","Data.ByteString.Fusion","Data.ByteString.Internal","Data.ByteString.Lazy.Internal","Data.ByteString.Unsafe","Data.Int","Data.List","Data.Maybe","Data.Text.Array","Data.Text.Axioms","Data.Text.Encoding.Error","Data.Text.Encoding.Fusion","Data.Text.Encoding.Fusion.Common","Data.Text.Encoding.Utf16","Data.Text.Encoding.Utf32","Data.Text.Encoding.Utf8","Data.Text.Fusion","Data.Text.Fusion.CaseMapping","Data.Text.Fusion.Common","Data.Text.Fusion.Internal","Data.Text.Fusion.Size","Data.Text.Internal","Data.Text.Private","Data.Text.Unsafe","Data.Text.Unsafe.Base","Data.Text.UnsafeChar","Data.Text.UnsafeShift","Data.Word","Foreign.C.String","Foreign.C.Types","Foreign.ForeignPtr","Foreign.Marshal.Alloc","Foreign.Marshal.Array","Foreign.Ptr","Foreign.Storable","GHC.Base","GHC.Classes","GHC.ForeignPtr","GHC.IO.Handle","GHC.Int","GHC.List","GHC.Num","GHC.Prim","GHC.Ptr","GHC.Real","GHC.Types","GHC.Word","Language.Haskell.Liquid.Foreign","Language.Haskell.Liquid.Prelude","Prelude","System.IO"]
Reading Qualifiers From: ["../../include/GHC/Base.hquals","../../include/Prelude.hquals"]
[1;94m
**** DONE:  Extracted Core From GHC ********************************************
[0m[1;90m 
[0m*************** Imports *********************
Control.Exception, Control.Monad, Data.Bits, Data.ByteString, Data.ByteString.Fusion, Data.ByteString.Internal, Data.ByteString.Lazy.Internal, Data.ByteString.Unsafe, Data.Int, Data.List, Data.Maybe, Data.Text.Array, Data.Text.Axioms, Data.Text.Encoding.Error, Data.Text.Encoding.Fusion, Data.Text.Encoding.Fusion.Common, Data.Text.Encoding.Utf16, Data.Text.Encoding.Utf32, Data.Text.Encoding.Utf8, Data.Text.Fusion, Data.Text.Fusion.CaseMapping, Data.Text.Fusion.Common, Data.Text.Fusion.Internal, Data.Text.Fusion.Size, Data.Text.Internal, Data.Text.Private, Data.Text.Unsafe, Data.Text.Unsafe.Base, Data.Text.UnsafeChar, Data.Text.UnsafeShift, Data.Word, Foreign.C.String, Foreign.C.Types, Foreign.ForeignPtr, Foreign.Marshal.Alloc, Foreign.Marshal.Array, Foreign.Ptr, Foreign.Storable, GHC.Base, GHC.Classes, GHC.ForeignPtr, GHC.IO.Handle, GHC.Int, GHC.List, GHC.Num, GHC.Prim, GHC.Ptr, GHC.Real, GHC.Types, GHC.Word, Language.Haskell.Liquid.Foreign, Language.Haskell.Liquid.Prelude, Prelude, System.IO
*************** Includes ********************
*************** Imported Variables **********
[GHC.CString.unpackCString#, GHC.Base.$, GHC.Num.fromInteger,
 GHC.Num.-, GHC.Classes.==, GHC.Classes.>=, GHC.Base.>>=,
 GHC.Base.>>, GHC.Base.return, GHC.Real.fromIntegral,
 GHC.Types.False, GHC.Types.I#, GHC.Types.True, GHC.Classes.max,
 GHC.Classes.<=, GHC.Num.+, GHC.Num.*, GHC.Classes.||,
 GHC.Classes.&&, GHC.Err.undefined, GHC.Base.., Control.Monad.=<<,
 GHC.ST.$fMonadST, GHC.IO.unsafeSTToIO, GHC.IO.unsafePerformIO,
 GHC.IO.unsafeIOToST, GHC.IO.evaluate, GHC.Base.$fMonadIO,
 GHC.Real.$fIntegralInt, Data.Maybe.Nothing, GHC.Classes.$fOrdInt,
 GHC.Num.$fNumInt, GHC.Classes.$fEqInt, Data.Maybe.Just,
 GHC.Word.$fIntegralWord16, GHC.Word.$fOrdWord16,
 GHC.Word.$fNumWord8, GHC.Word.$fNumWord16, GHC.Word.$fBitsWord16,
 Data.Bits.$fBitsInt, Data.Bits..&.,
 Foreign.C.Types.$fStorableCSize, Foreign.C.Types.$fIntegralCSize,
 Foreign.C.Types.$fNumCSize, GHC.Ptr.Ptr, GHC.Ptr.plusPtr,
 GHC.Ptr.minusPtr, Foreign.ForeignPtr.Imp.withForeignPtr,
 Language.Haskell.Liquid.Foreign.eqPtr,
 Data.Text.Encoding.Utf16.chr2, Data.Text.UnsafeShift.shiftR,
 Data.Text.UnsafeShift.$fUnsafeShiftInt,
 Data.Text.UnsafeShift.$fUnsafeShiftWord16, GHC.Exception.throw,
 Control.Exception.Base.try, Data.Text.Array.new,
 Data.Text.Array.unsafeIndex, Data.Text.Array.unsafeIndexF,
 Data.Text.UnsafeChar.ord, Data.Text.UnsafeChar.unsafeWrite,
 Data.Text.Internal.$WText, Data.Text.Internal.Text,
 Data.Text.Private.runText, Data.Text.Fusion.stream,
 Data.Text.Fusion.unstream,
 Data.Text.Encoding.Fusion.Common.restreamUtf16BE,
 Data.Text.Encoding.Fusion.Common.restreamUtf16LE,
 Data.Text.Encoding.Fusion.Common.restreamUtf32BE,
 Data.Text.Encoding.Fusion.Common.restreamUtf32LE,
 Data.Text.Encoding.Error.strictDecode,
 Data.Text.Encoding.Error.DecodeError,
 Data.Text.Encoding.Error.$fExceptionUnicodeException,
 Foreign.Storable.$fStorableWord8, Foreign.Storable.poke,
 Foreign.Storable.peek, Data.ByteString.Internal.mallocByteString,
 Data.ByteString.Internal.memcpy, Data.ByteString.Internal.$WPS,
 Data.ByteString.Internal.PS,
 Data.Text.Encoding.Fusion.streamUtf16LE,
 Data.Text.Encoding.Fusion.streamUtf16BE,
 Data.Text.Encoding.Fusion.streamUtf32BE,
 Data.Text.Encoding.Fusion.streamUtf32LE,
 Data.Text.Encoding.Fusion.unstream]
*************** Defined Variables ***********
[Data.Text.Encoding.c_decode_utf8, s,
 Data.Text.Encoding.encodeUtf32BE, eta_B1, txt, lq_anf__dhhE,
 lq_anf__dhhF, Data.Text.Encoding.encodeUtf32LE, eta_B1, txt,
 lq_anf__dhhG, lq_anf__dhhH, Data.Text.Encoding.decodeUtf32BEWith,
 eta_B2, eta_B1, onErr, bs, lq_anf__dhhI,
 Data.Text.Encoding.decodeUtf32BE,
 Data.Text.Encoding.decodeUtf32LEWith, eta_B2, eta_B1, onErr, bs,
 lq_anf__dhhJ, Data.Text.Encoding.decodeUtf32LE,
 Data.Text.Encoding.encodeUtf16BE, eta_B1, txt, lq_anf__dhhK,
 lq_anf__dhhL, Data.Text.Encoding.encodeUtf16LE, eta_B1, txt,
 lq_anf__dhhM, lq_anf__dhhN, Data.Text.Encoding.decodeUtf16BEWith,
 eta_B2, eta_B1, onErr, bs, lq_anf__dhhO,
 Data.Text.Encoding.decodeUtf16BE,
 Data.Text.Encoding.decodeUtf16LEWith, eta_B2, eta_B1, onErr, bs,
 lq_anf__dhhP, Data.Text.Encoding.decodeUtf16LE,
 Data.Text.Encoding.plen, a, Data.Text.Encoding.withLIQUID, s, b,
 Data.Text.Encoding.decodeUtf8With, onErr, ds_dhhi, lq_anf__dhhQ,
 fp, off, len, desc, lq_anf__dhiJ, s, done, go, dest, lq_anf__dhhR,
 lq_anf__dhiE, ptr, lq_anf__dhhS, lq_anf__dhhT, lq_anf__dhhU,
 lq_anf__dhiD, destOffPtr, lq_anf__dhhV, end, loop, ds_dhhg, curPtr,
 lq_anf__dhhW, lq_anf__dhiy, curPtr', lq_anf__dhhX, lq_anf__dhhY,
 lq_anf__dhhZ, lq_anf__dhit, x, lq_anf__dhi0, lq_anf__dhis, destOff,
 lq_anf__dhi1, lq_anf__dhi2, lq_anf__dhi3, lq_anf__dhi4,
 lq_anf__dhi5, lq_anf__dhi6, lq_anf__dhi7, lq_anf__dhi8,
 lq_anf__dhi9, lq_anf__dhia, lq_anf__dhib, c, lq_anf__dhic,
 lq_anf__dhid, lq_anf__dhie, lq_anf__dhif, lq_anf__dhir, w,
 lq_anf__dhig, lq_anf__dhih, lq_anf__dhii, lq_anf__dhij,
 lq_anf__dhik, lq_anf__dhil, lq_anf__dhim, lq_anf__dhin,
 lq_anf__dhio, lq_anf__dhip, lq_anf__dhiq, lq_anf__dhiu,
 lq_anf__dhix, n, lq_anf__dhiv, lq_anf__dhiw, loop, lq_anf__dhiz,
 lq_anf__dhiA, lq_anf__dhiB, lq_anf__dhiC, lq_anf__dhiF,
 lq_anf__dhiG, lq_anf__dhiH, lq_anf__dhiI,
 Data.Text.Encoding.strictDecode, s, desc, c, ds_dhha, ds_dhhb,
 lq_anf__dhiK, Data.Text.Encoding.decodeUtf8,
 Data.Text.Encoding.decodeASCII, Data.Text.Encoding.decodeUtf8',
 lq_anf__dhiL, lq_anf__dhiM, lq_anf__dhiN, lq_anf__dhiO,
 lq_anf__dhiP, lq_anf__dhiQ, Data.Text.Encoding.encodeUtf8, ds_dhgB,
 lq_anf__dhiR, arr, off, len, offLen, start, size, n0, m0, fp, loop,
 n1, m1, ptr, go, ds_dhh2, n, m, lq_anf__dhiS, lq_anf__dhm2,
 lq_anf__dhiT, lq_anf__dhm1, lq_anf__dhiU, lq_anf__dhiV, ensure, k,
 ds_dhgX, lq_anf__dhiW, lq_anf__dhiX, lq_anf__dhiY, lq_anf__dhiZ,
 newSize, lq_anf__dhj0, lq_anf__dhj6, fp', lq_anf__dhj1,
 lq_anf__dhj3, ptr', lq_anf__dhj2, lq_anf__dhj4, lq_anf__dhj5,
 poke8, a, $dIntegral, k, v, lq_anf__dhj7, lq_anf__dhj8, w,
 lq_anf__dhj9, lq_anf__dhja, lq_anf__dhjb, lq_anf__dhjc,
 lq_anf__dhjd, lq_anf__dhje, lq_anf__dhjf, lq_anf__dhjg,
 lq_anf__dhjh, lq_anf__dhji, lq_anf__dhjj, lq_anf__dhjk,
 lq_anf__dhjl, lq_anf__dhjm, lq_anf__dhjn, lq_anf__dhjo,
 lq_anf__dhjp, lq_anf__dhjq, lq_anf__dhk4, ptr, lq_anf__dhjr,
 lq_anf__dhjs, lq_anf__dhjt, lq_anf__dhju, lq_anf__dhjv,
 lq_anf__dhjw, lq_anf__dhjx, lq_anf__dhjy, lq_anf__dhjz,
 lq_anf__dhjA, lq_anf__dhjB, lq_anf__dhjC, lq_anf__dhjD,
 lq_anf__dhjE, lq_anf__dhjF, lq_anf__dhjG, lq_anf__dhjH,
 lq_anf__dhjI, lq_anf__dhjJ, lq_anf__dhjK, lq_anf__dhjL,
 lq_anf__dhjM, lq_anf__dhjN, lq_anf__dhjO, lq_anf__dhjP,
 lq_anf__dhjQ, lq_anf__dhjR, lq_anf__dhjS, lq_anf__dhjT,
 lq_anf__dhjU, lq_anf__dhjV, lq_anf__dhjW, lq_anf__dhjX,
 lq_anf__dhjY, lq_anf__dhjZ, lq_anf__dhk0, lq_anf__dhk1,
 lq_anf__dhk2, lq_anf__dhk3, lq_anf__dhk5, lq_anf__dhk6,
 lq_anf__dhkU, ptr, lq_anf__dhk7, lq_anf__dhk8, lq_anf__dhk9,
 lq_anf__dhka, c, lq_anf__dhkb, lq_anf__dhkc, lq_anf__dhkd,
 lq_anf__dhke, lq_anf__dhkf, lq_anf__dhkg, lq_anf__dhkh,
 lq_anf__dhki, lq_anf__dhkj, lq_anf__dhkk, lq_anf__dhkl,
 lq_anf__dhkm, lq_anf__dhkn, lq_anf__dhko, lq_anf__dhkp,
 lq_anf__dhkq, lq_anf__dhkr, lq_anf__dhks, lq_anf__dhkt,
 lq_anf__dhku, lq_anf__dhkv, lq_anf__dhkw, lq_anf__dhkx,
 lq_anf__dhky, lq_anf__dhkz, lq_anf__dhkA, lq_anf__dhkB,
 lq_anf__dhkC, lq_anf__dhkD, lq_anf__dhkE, lq_anf__dhkF,
 lq_anf__dhkG, lq_anf__dhkH, lq_anf__dhkI, lq_anf__dhkJ,
 lq_anf__dhkK, lq_anf__dhkL, lq_anf__dhkM, lq_anf__dhkN,
 lq_anf__dhkO, lq_anf__dhkP, lq_anf__dhkQ, lq_anf__dhkR,
 lq_anf__dhkS, lq_anf__dhkT, lq_anf__dhkV, lq_anf__dhkW,
 lq_anf__dhln, ptr, lq_anf__dhkX, lq_anf__dhkY, lq_anf__dhkZ,
 lq_anf__dhl0, lq_anf__dhl1, lq_anf__dhl2, lq_anf__dhl3,
 lq_anf__dhl4, lq_anf__dhl5, lq_anf__dhl6, lq_anf__dhl7,
 lq_anf__dhl8, lq_anf__dhl9, lq_anf__dhla, lq_anf__dhlb,
 lq_anf__dhlc, lq_anf__dhld, lq_anf__dhle, lq_anf__dhlf,
 lq_anf__dhlg, lq_anf__dhlh, lq_anf__dhli, lq_anf__dhlj,
 lq_anf__dhlk, lq_anf__dhll, lq_anf__dhlm, lq_anf__dhlo,
 lq_anf__dhlp, lq_anf__dhlY, ptr, lq_anf__dhlq, lq_anf__dhlr,
 lq_anf__dhls, end, ascii, ds_dhgF, t, u, lq_anf__dhlt,
 lq_anf__dhlP, lq_anf__dhlu, lq_anf__dhlO, lq_anf__dhlv,
 lq_anf__dhlw, lq_anf__dhlx, lq_anf__dhly, v, lq_anf__dhlz,
 lq_anf__dhlA, lq_anf__dhlB, lq_anf__dhlC, lq_anf__dhlD,
 lq_anf__dhlE, lq_anf__dhlF, lq_anf__dhlG, lq_anf__dhlH,
 lq_anf__dhlI, lq_anf__dhlJ, lq_anf__dhlK, lq_anf__dhlL,
 lq_anf__dhlM, lq_anf__dhlN, ascii, lq_anf__dhlQ, lq_anf__dhlR,
 lq_anf__dhlS, lq_anf__dhlT, lq_anf__dhlU, lq_anf__dhlV,
 lq_anf__dhlW, lq_anf__dhlX, lq_anf__dhlZ, lq_anf__dhm0, go,
 lq_anf__dhm3, lq_anf__dhm4, lq_anf__dhm5, start, lq_anf__dhm6,
 lq_anf__dhm7, size0, lq_anf__dhm8, lq_anf__dhm9, lq_anf__dhma,
 lq_anf__dhmb]
*************** Specification ***************
******* Target Variables ********************
[]
******* Type Signatures *********************
[Data.Text.Encoding.withLIQUID : forall s b.
                                 z:(Foreign.C.Types.CSize)
                                 -> a:(Data.Text.Array.MArray s)
                                 -> lq_tmp_db0:(lq_tmp_db1:{VV : (GHC.Ptr.Ptr (Foreign.C.Types.CSize)) | (0 <= (plen VV)) && (z <= (deref VV)) && ((deref VV) < (malen a))}
                                                -> (GHC.Types.IO b))
                                 -> (GHC.Types.IO b)
 Data.Text.Encoding.plen : forall a.
                           p:(GHC.Ptr.Ptr a)
                           -> {VV : (GHC.Types.Int) | (VV >= 0) && (VV == (plen p))}
 Data.Text.Encoding.strictDecode : forall s.
                                   lq_tmp_db2:[(GHC.Types.Char)]
                                   -> lq_tmp_db3:(Data.Maybe.Maybe (GHC.Word.Word8))
                                   -> a:(Data.Text.Array.MArray s)
                                   -> i:{VV : (GHC.Types.Int) | (VV >= 0)}
                                   -> (Data.Maybe.Maybe {VV : (GHC.Types.Char) | (((ord VV) < 65536) => ((0 <= i) && (i <= ((malen a) - 1)))) && (((ord VV) >= 65536) => ((0 <= i) && (i <= ((malen a) - 2))))})
 Data.Text.Encoding.decodeUtf8With : lq_tmp_db4:(forall s.
                                                 lq_tmp_db2:[(GHC.Types.Char)]
                                                 -> lq_tmp_db3:(Data.Maybe.Maybe (GHC.Word.Word8))
                                                 -> a:(Data.Text.Array.MArray s)
                                                 -> i:{VV : (GHC.Types.Int) | (VV >= 0)}
                                                 -> (Data.Maybe.Maybe {VV : (GHC.Types.Char) | (((ord VV) < 65536) => ((0 <= i) && (i <= ((malen a) - 1)))) && (((ord VV) >= 65536) => ((0 <= i) && (i <= ((malen a) - 2))))}))
                                     -> lq_tmp_db5:(Data.ByteString.Internal.ByteString)
                                     -> (Data.Text.Internal.Text)
 Data.Text.Encoding.encodeUtf8 : t:(Data.Text.Internal.Text)
                                 -> {VV : (Data.ByteString.Internal.ByteString) | (((tlen t) > 0) => ((bLength VV) > 0))}
 Data.Text.Encoding.c_decode_utf8 : forall s.
                                    a:(Data.Text.Array.MArray s)
                                    -> d:{VV : (GHC.Ptr.Ptr (Foreign.C.Types.CSize)) | (0 <= (plen VV)) && (0 <= (deref VV)) && ((deref VV) <= (malen a))}
                                    -> c:{VV : (GHC.Ptr.Ptr (GHC.Word.Word8)) | (0 <= (plen VV))}
                                    -> end:{VV : (GHC.Ptr.Ptr (GHC.Word.Word8)) | (0 <= (plen VV)) && ((plen VV) <= (plen c)) && ((pbase VV) == (pbase c))}
                                    -> (GHC.Types.IO {VV : (GHC.Ptr.Ptr (GHC.Word.Word8)) | (0 <= (plen VV)) && ((plen end) <= (plen VV)) && ((plen VV) <= (plen c)) && ((pbase VV) == (pbase end))})
 GHC.Base.assert : forall a.
                   lq_tmp_db0:{VV : (GHC.Types.Bool) | ((Prop VV))}
                   -> lq_tmp_db1:a -> a
 Control.Monad.sequence : forall m a.
                          (GHC.Base.Monad m) =>
                          xs:[m a] -> m {VV : [a] | ((len VV) == (len xs))}
 Foreign.Marshal.Alloc.reallocBytes : forall a.
                                      p:(GHC.Ptr.Ptr a)
                                      -> n:{VV : (GHC.Types.Int) | (VV >= 0)}
                                      -> (GHC.Types.IO {VV : (GHC.Ptr.Ptr a) | (0 <= (plen VV)) && ((plen VV) == n)})
 Data.ByteString.memcpy_ptr_baoff : forall a b.
                                    p:(GHC.Ptr.Ptr a)
                                    -> lq_tmp_db0:(GHC.ForeignPtr.ForeignPtr b)
                                    -> lq_tmp_db1:(GHC.Types.Int)
                                    -> lq_tmp_db2:{VV : (Foreign.C.Types.CSize) | (VV <= (plen p))}
                                    -> (GHC.Types.IO (GHC.Ptr.Ptr ()))
 Data.ByteString.lengths : bs:[(Data.ByteString.Internal.ByteString)]
                           -> {VV : (GHC.Types.Int) | (VV >= 0) && (VV == (bLengths bs))}
 Data.ByteString.dummyForQuals1_elemIndex : forall a b.
                                            p:(GHC.Ptr.Ptr a)
                                            -> n:(GHC.Types.Int)
                                            -> (GHC.Types.IO {VV : (GHC.Ptr.Ptr b) | (((isNullPtr VV)) || (((((plen p) - n) < (plen VV)) && ((plen VV) <= (plen p))) && ((pbase VV) == (pbase p))))})
 Data.ByteString.dummyForQuals2_splitWith : p:(GHC.ForeignPtr.ForeignPtr (GHC.Word.Word8))
                                            -> o:{VV : (GHC.Types.Int) | (VV >= 0) && (VV <= (fplen p))}
                                            -> lq_tmp_db3:{VV : (GHC.Types.Int) | (VV >= 0) && ((o + VV) <= (fplen p))}
                                            -> (Data.ByteString.Internal.ByteString)
 Data.ByteString.eq : lq_tmp_db4:(Data.ByteString.Internal.ByteString)
                      -> lq_tmp_db5:(Data.ByteString.Internal.ByteString)
                      -> (GHC.Types.Bool)
 Data.ByteString.empty : {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == 0)}
 Data.ByteString.singleton : lq_tmp_db6:(GHC.Word.Word8)
                             -> {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == 1)}
 Data.ByteString.pack : cs:[(GHC.Word.Word8)]
                        -> {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == (len cs))}
 Data.ByteString.unpack : b:(Data.ByteString.Internal.ByteString)
                          -> {VV : [(GHC.Word.Word8)] | ((len VV) == (bLength b))}
 Data.ByteString.unpackList : b:(Data.ByteString.Internal.ByteString)
                              -> {VV : [(GHC.Word.Word8)] | ((len VV) == (bLength b))}
 Data.ByteString.null : b:(Data.ByteString.Internal.ByteString)
                        -> {VV : (GHC.Types.Bool) | (((Prop VV)) <=> ((bLength b) == 0))}
 Data.ByteString.length : b:(Data.ByteString.Internal.ByteString)
                          -> {VV : (GHC.Types.Int) | (VV >= 0) && (VV == (bLength b))}
 Data.ByteString.cons : lq_tmp_db7:(GHC.Word.Word8)
                        -> b:(Data.ByteString.Internal.ByteString)
                        -> {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == (1 + (bLength b)))}
 Data.ByteString.snoc : b:(Data.ByteString.Internal.ByteString)
                        -> lq_tmp_db8:(GHC.Word.Word8)
                        -> {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == (1 + (bLength b)))}
 Data.ByteString.head : lq_tmp_db9:{VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) > 0)}
                        -> (GHC.Word.Word8)
 Data.ByteString.tail : b:{VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) > 0)}
                        -> {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == ((bLength b) - 1))}
 Data.ByteString.uncons : b:(Data.ByteString.Internal.ByteString)
                          -> (Data.Maybe.Maybe ((GHC.Word.Word8), {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == ((bLength b) - 1))}))
 Data.ByteString.last : lq_tmp_db10:{VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) > 0)}
                        -> (GHC.Word.Word8)
 Data.ByteString.init : b:{VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) > 0)}
                        -> {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == ((bLength b) - 1))}
 Data.ByteString.append : b1:(Data.ByteString.Internal.ByteString)
                          -> b2:(Data.ByteString.Internal.ByteString)
                          -> {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == ((bLength b1) + (bLength b2)))}
 Data.ByteString.map : lq_tmp_db11:(lq_tmp_db12:(GHC.Word.Word8)
                                    -> (GHC.Word.Word8))
                       -> b:(Data.ByteString.Internal.ByteString)
                       -> {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == (bLength b))}
 Data.ByteString.reverse : b:(Data.ByteString.Internal.ByteString)
                           -> {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == (bLength b))}
 Data.ByteString.intersperse : lq_tmp_db13:(GHC.Word.Word8)
                               -> b:(Data.ByteString.Internal.ByteString)
                               -> {VV : (Data.ByteString.Internal.ByteString) | (((bLength b) > 0) => ((bLength VV) == ((2 * (bLength b)) - 1))) && ((not (((bLength b) > 0))) => ((bLength VV) == 0))}
 Data.ByteString.foldl : forall a.
                         lq_tmp_db14:(lq_tmp_db15:a -> lq_tmp_db16:(GHC.Word.Word8) -> a)
                         -> lq_tmp_db17:a
                         -> lq_tmp_db18:(Data.ByteString.Internal.ByteString)
                         -> a
 Data.ByteString.liquid_thm_ptr_cmp : forall a.
                                      p:{VV : (GHC.Ptr.Ptr a) | (0 <= (plen VV))}
                                      -> q:{VV : (GHC.Ptr.Ptr a) | (0 <= (plen VV)) && ((plen VV) <= (plen p)) && (VV /= p) && ((pbase VV) == (pbase p))}
                                      -> {VV : (GHC.Ptr.Ptr a) | (0 <= (plen VV)) && (VV == p) && ((plen q) < (plen p))}
 Data.ByteString.foldl' : forall a.
                          lq_tmp_db19:(lq_tmp_db20:a -> lq_tmp_db21:(GHC.Word.Word8) -> a)
                          -> lq_tmp_db22:a
                          -> lq_tmp_db23:(Data.ByteString.Internal.ByteString)
                          -> a
 Data.ByteString.liquid_thm_ptr_cmp' : forall a.
                                       p:{VV : (GHC.Ptr.Ptr a) | (0 <= (plen VV))}
                                       -> q:{VV : (GHC.Ptr.Ptr a) | (0 <= (plen VV)) && ((plen VV) >= (plen p)) && (VV /= p) && ((pbase VV) == (pbase p))}
                                       -> {VV : (GHC.Ptr.Ptr a) | (0 <= (plen VV)) && (VV == p) && ((plen VV) > 0) && ((plen q) > (plen p))}
 Data.ByteString.foldl1 : lq_tmp_db24:(lq_tmp_db25:(GHC.Word.Word8)
                                       -> lq_tmp_db26:(GHC.Word.Word8) -> (GHC.Word.Word8))
                          -> lq_tmp_db27:{VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) > 0)}
                          -> (GHC.Word.Word8)
 Data.ByteString.foldl1' : lq_tmp_db28:(lq_tmp_db29:(GHC.Word.Word8)
                                        -> lq_tmp_db30:(GHC.Word.Word8) -> (GHC.Word.Word8))
                           -> lq_tmp_db31:{VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) > 0)}
                           -> (GHC.Word.Word8)
 Data.ByteString.foldr1 : lq_tmp_db32:(lq_tmp_db33:(GHC.Word.Word8)
                                       -> lq_tmp_db34:(GHC.Word.Word8) -> (GHC.Word.Word8))
                          -> lq_tmp_db35:{VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) > 0)}
                          -> (GHC.Word.Word8)
 Data.ByteString.foldr1' : lq_tmp_db36:(lq_tmp_db37:(GHC.Word.Word8)
                                        -> lq_tmp_db38:(GHC.Word.Word8) -> (GHC.Word.Word8))
                           -> lq_tmp_db39:{VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) > 0)}
                           -> (GHC.Word.Word8)
 Data.ByteString.concat : bs:[(Data.ByteString.Internal.ByteString)]
                          -> {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == (bLengths bs))}
 Data.ByteString.maximum : lq_tmp_db40:{VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) > 0)}
                           -> (GHC.Word.Word8)
 Data.ByteString.minimum : lq_tmp_db41:{VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) > 0)}
                           -> (GHC.Word.Word8)
 Data.ByteString.mapAccumL : forall acc.
                             lq_tmp_db42:(lq_tmp_db43:acc
                                          -> lq_tmp_db44:(GHC.Word.Word8)
                                          -> (acc, (GHC.Word.Word8)))
                             -> lq_tmp_db45:acc
                             -> b:(Data.ByteString.Internal.ByteString)
                             -> (acc, {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == (bLength b))})
 Data.ByteString.mapAccumR : forall acc.
                             lq_tmp_db46:(lq_tmp_db47:acc
                                          -> lq_tmp_db48:(GHC.Word.Word8)
                                          -> (acc, (GHC.Word.Word8)))
                             -> lq_tmp_db49:acc
                             -> b:(Data.ByteString.Internal.ByteString)
                             -> (acc, {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == (bLength b))})
 Data.ByteString.mapIndexed : lq_tmp_db50:(lq_tmp_db51:(GHC.Types.Int)
                                           -> lq_tmp_db52:(GHC.Word.Word8) -> (GHC.Word.Word8))
                              -> b:(Data.ByteString.Internal.ByteString)
                              -> {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == (bLength b))}
 Data.ByteString.scanl : lq_tmp_db53:(lq_tmp_db54:(GHC.Word.Word8)
                                      -> lq_tmp_db55:(GHC.Word.Word8) -> (GHC.Word.Word8))
                         -> lq_tmp_db56:(GHC.Word.Word8)
                         -> b:(Data.ByteString.Internal.ByteString)
                         -> {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == (1 + (bLength b)))}
 Data.ByteString.scanl1 : lq_tmp_db57:(lq_tmp_db58:(GHC.Word.Word8)
                                       -> lq_tmp_db59:(GHC.Word.Word8) -> (GHC.Word.Word8))
                          -> b:{VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) > 0)}
                          -> {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == (bLength b))}
 Data.ByteString.scanr : lq_tmp_db60:(lq_tmp_db61:(GHC.Word.Word8)
                                      -> lq_tmp_db62:(GHC.Word.Word8) -> (GHC.Word.Word8))
                         -> lq_tmp_db63:(GHC.Word.Word8)
                         -> b:(Data.ByteString.Internal.ByteString)
                         -> {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) > 0) && ((bLength VV) == (1 + (bLength b)))}
 Data.ByteString.scanr1 : lq_tmp_db64:(lq_tmp_db65:(GHC.Word.Word8)
                                       -> lq_tmp_db66:(GHC.Word.Word8) -> (GHC.Word.Word8))
                          -> b:{VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) > 0)}
                          -> {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == (bLength b))}
 Data.ByteString.replicate : n:{VV : (GHC.Types.Int) | (VV >= 0)}
                             -> lq_tmp_db67:(GHC.Word.Word8)
                             -> {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == (if (n > 0) then n else 0))}
 Data.ByteString.unfoldr : forall a.
                           lq_tmp_db68:(lq_tmp_db69:a
                                        -> (Data.Maybe.Maybe ((GHC.Word.Word8), a)))
                           -> lq_tmp_db70:a -> (Data.ByteString.Internal.ByteString)
 Data.ByteString.unfoldrN : forall a.
                            i:{VV : (GHC.Types.Int) | (VV >= 0)}
                            -> lq_tmp_db71:(lq_tmp_db72:a
                                            -> (Data.Maybe.Maybe ((GHC.Word.Word8), a)))
                            -> lq_tmp_db73:a
                            -> ({VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) <= i)}, (Data.Maybe.Maybe a))<\b74 VV -> (((isJust VV)) => ((bLength b74) == i))>
 Data.ByteString.unfoldqual : forall a.
                              l:{VV : (GHC.Types.Int) | (VV >= 0)}
                              -> {v : ({VV : (GHC.Types.Int) | (VV >= 0)}, {VV : (GHC.Types.Int) | (VV >= 0)}, (Data.Maybe.Maybe a)) | ((tsnd v) <= (l - (tfst v))) && (((isJust (ttrd v))) => ((tsnd v) == l))}
 Data.ByteString.take : n:{VV : (GHC.Types.Int) | (VV >= 0)}
                        -> b:(Data.ByteString.Internal.ByteString)
                        -> {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == (if (n <= (bLength b)) then n else (bLength b)))}
 Data.ByteString.drop : n:{VV : (GHC.Types.Int) | (VV >= 0)}
                        -> b:(Data.ByteString.Internal.ByteString)
                        -> {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == (if (n <= (bLength b)) then ((bLength b) - n) else 0))}
 Data.ByteString.splitAt : n:(GHC.Types.Int)
                           -> b:(Data.ByteString.Internal.ByteString)
                           -> ({VV : (Data.ByteString.Internal.ByteString) | (((bLength b) < (if (n >= 0) then n else 0)) => ((bLength VV) == (bLength b))) && ((not (((bLength b) < (if (n >= 0) then n else 0)))) => ((bLength VV) == (if (n >= 0) then n else 0)))}, (Data.ByteString.Internal.ByteString))<\x76 VV -> ((bLength VV) == ((bLength b) - (bLength x76)))>
 Data.ByteString.takeWhile : lq_tmp_db78:(lq_tmp_db79:(GHC.Word.Word8)
                                          -> (GHC.Types.Bool))
                             -> b:(Data.ByteString.Internal.ByteString)
                             -> {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) <= (bLength b))}
 Data.ByteString.dropWhile : lq_tmp_db80:(lq_tmp_db81:(GHC.Word.Word8)
                                          -> (GHC.Types.Bool))
                             -> b:(Data.ByteString.Internal.ByteString)
                             -> {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) <= (bLength b))}
 Data.ByteString.break : lq_tmp_db82:(lq_tmp_db83:(GHC.Word.Word8)
                                      -> (GHC.Types.Bool))
                         -> b:(Data.ByteString.Internal.ByteString)
                         -> ((Data.ByteString.Internal.ByteString), (Data.ByteString.Internal.ByteString))<\x13 VV -> (((bLength x13) + (bLength VV)) == (bLength b))>
 Data.ByteString.breakByte : lq_tmp_db84:(GHC.Word.Word8)
                             -> b:(Data.ByteString.Internal.ByteString)
                             -> ((Data.ByteString.Internal.ByteString), (Data.ByteString.Internal.ByteString))<\x13 VV -> (((bLength x13) + (bLength VV)) == (bLength b))>
 Data.ByteString.breakEnd : lq_tmp_db85:(lq_tmp_db86:(GHC.Word.Word8)
                                         -> (GHC.Types.Bool))
                            -> b:(Data.ByteString.Internal.ByteString)
                            -> ((Data.ByteString.Internal.ByteString), (Data.ByteString.Internal.ByteString))<\x13 VV -> (((bLength x13) + (bLength VV)) == (bLength b))>
 Data.ByteString.span : lq_tmp_db87:(lq_tmp_db88:(GHC.Word.Word8)
                                     -> (GHC.Types.Bool))
                        -> b:(Data.ByteString.Internal.ByteString)
                        -> ((Data.ByteString.Internal.ByteString), (Data.ByteString.Internal.ByteString))<\x13 VV -> (((bLength x13) + (bLength VV)) == (bLength b))>
 Data.ByteString.spanByte : lq_tmp_db89:(GHC.Word.Word8)
                            -> b:(Data.ByteString.Internal.ByteString)
                            -> ((Data.ByteString.Internal.ByteString), (Data.ByteString.Internal.ByteString))<\x13 VV -> (((bLength x13) + (bLength VV)) == (bLength b))>
 Data.ByteString.spanEnd : lq_tmp_db90:(lq_tmp_db91:(GHC.Word.Word8)
                                        -> (GHC.Types.Bool))
                           -> b:(Data.ByteString.Internal.ByteString)
                           -> ((Data.ByteString.Internal.ByteString), (Data.ByteString.Internal.ByteString))<\x13 VV -> (((bLength x13) + (bLength VV)) == (bLength b))>
 Data.ByteString.splitWith : lq_tmp_db92:(lq_tmp_db93:(GHC.Word.Word8)
                                          -> (GHC.Types.Bool))
                             -> b:{VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) > 0)}
                             -> {VV : [(Data.ByteString.Internal.ByteString)] | ((((bLengths VV) + (len VV)) - 1) == (bLength b))}
 Data.ByteString.split : lq_tmp_db94:(GHC.Word.Word8)
                         -> b:{VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) > 0)}
                         -> {VV : [(Data.ByteString.Internal.ByteString)] | ((((bLengths VV) + (len VV)) - 1) == (bLength b))}
 Data.ByteString.splitO : lq_tmp_db95:(GHC.Word.Word8)
                          -> b:{VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) > 0)}
                          -> {VV : [(Data.ByteString.Internal.ByteString)] | ((((bLengths VV) + (len VV)) - 1) == (bLength b))}
 Data.ByteString.splitLoop : fp:(GHC.ForeignPtr.ForeignPtr (GHC.Word.Word8))
                             -> p:(GHC.Ptr.Ptr (GHC.Word.Word8))
                             -> lq_tmp_db96:(GHC.Word.Word8)
                             -> l:{VV : (GHC.Types.Int) | (VV >= 0) && (VV <= (plen p))}
                             -> s:{VV : (GHC.Types.Int) | (VV >= 0) && ((VV + l) <= (fplen fp))}
                             -> n:{VV : (GHC.Types.Int) | (VV >= 0) && (VV <= l)}
                             -> {VV : [(Data.ByteString.Internal.ByteString)] | ((((bLengths VV) + (len VV)) - 1) == (l - n))}
 Data.ByteString.group : b:(Data.ByteString.Internal.ByteString)
                         -> {v : [{VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) > 0)}] | ((bLengths v) == (bLength b))}
 Data.ByteString.groupBy : lq_tmp_db97:(lq_tmp_db98:(GHC.Word.Word8)
                                        -> lq_tmp_db99:(GHC.Word.Word8) -> (GHC.Types.Bool))
                           -> b:(Data.ByteString.Internal.ByteString)
                           -> {v : [{VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) > 0)}] | ((bLengths v) == (bLength b))}
 Data.ByteString.intercalateWithByte : lq_tmp_db100:(GHC.Word.Word8)
                                       -> f:(Data.ByteString.Internal.ByteString)
                                       -> g:(Data.ByteString.Internal.ByteString)
                                       -> {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == (((bLength f) + (bLength g)) + 1))}
 Data.ByteString.index : b:(Data.ByteString.Internal.ByteString)
                         -> lq_tmp_db101:{VV : (GHC.Types.Int) | (VV >= 0) && (VV < (bLength b))}
                         -> (GHC.Word.Word8)
 Data.ByteString.elemIndex : lq_tmp_db102:(GHC.Word.Word8)
                             -> b:(Data.ByteString.Internal.ByteString)
                             -> (Data.Maybe.Maybe {VV : (GHC.Types.Int) | (VV >= 0) && (VV < (bLength b))})
 Data.ByteString.elemIndexEnd : lq_tmp_db103:(GHC.Word.Word8)
                                -> b:(Data.ByteString.Internal.ByteString)
                                -> (Data.Maybe.Maybe {VV : (GHC.Types.Int) | (VV >= 0) && (VV < (bLength b))})
 Data.ByteString.elemIndices : lq_tmp_db104:(GHC.Word.Word8)
                               -> b:(Data.ByteString.Internal.ByteString)
                               -> [{VV : (GHC.Types.Int) | (VV >= 0) && (VV < (bLength b))}]
 Data.ByteString.count : lq_tmp_db105:(GHC.Word.Word8)
                         -> b:(Data.ByteString.Internal.ByteString)
                         -> {VV : (GHC.Types.Int) | (VV >= 0) && (VV <= (bLength b))}
 Data.ByteString.findIndex : lq_tmp_db106:(lq_tmp_db107:(GHC.Word.Word8)
                                           -> (GHC.Types.Bool))
                             -> b:(Data.ByteString.Internal.ByteString)
                             -> (Data.Maybe.Maybe {VV : (GHC.Types.Int) | (VV >= 0) && (VV < (bLength b))})
 Data.ByteString.findIndices : lq_tmp_db108:(lq_tmp_db109:(GHC.Word.Word8)
                                             -> (GHC.Types.Bool))
                               -> b:(Data.ByteString.Internal.ByteString)
                               -> [{VV : (GHC.Types.Int) | (VV >= 0) && (VV < (bLength b))}]
 Data.ByteString.filter : lq_tmp_db110:(lq_tmp_db111:(GHC.Word.Word8)
                                        -> (GHC.Types.Bool))
                          -> b:(Data.ByteString.Internal.ByteString)
                          -> {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) <= (bLength b))}
 Data.ByteString.filterByte : lq_tmp_db112:(GHC.Word.Word8)
                              -> b:(Data.ByteString.Internal.ByteString)
                              -> {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) <= (bLength b))}
 Data.ByteString.partition : lq_tmp_db113:(lq_tmp_db114:(GHC.Word.Word8)
                                           -> (GHC.Types.Bool))
                             -> b:(Data.ByteString.Internal.ByteString)
                             -> ({VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) <= (bLength b))}, {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) <= (bLength b))})
 Data.ByteString.isPrefixOf : lq_tmp_db115:(Data.ByteString.Internal.ByteString)
                              -> lq_tmp_db116:(Data.ByteString.Internal.ByteString)
                              -> (GHC.Types.Bool)
 Data.ByteString.isSuffixOf : lq_tmp_db117:(Data.ByteString.Internal.ByteString)
                              -> lq_tmp_db118:(Data.ByteString.Internal.ByteString)
                              -> (GHC.Types.Bool)
 Data.ByteString.findSubstring : pat:(Data.ByteString.Internal.ByteString)
                                 -> str:(Data.ByteString.Internal.ByteString)
                                 -> (Data.Maybe.Maybe {VV : (GHC.Types.Int) | (VV >= 0) && (VV <= (bLength str))})
 Data.ByteString.findSubstrings : pat:(Data.ByteString.Internal.ByteString)
                                  -> str:(Data.ByteString.Internal.ByteString)
                                  -> [{VV : (GHC.Types.Int) | (VV >= 0) && (VV <= (bLength str))}]
 Data.ByteString.breakSubstring : lq_tmp_db119:(Data.ByteString.Internal.ByteString)
                                  -> b:(Data.ByteString.Internal.ByteString)
                                  -> ((Data.ByteString.Internal.ByteString), (Data.ByteString.Internal.ByteString))<\x13 VV -> (((bLength x13) + (bLength VV)) == (bLength b))>
 Data.ByteString.zip : x:(Data.ByteString.Internal.ByteString)
                       -> y:(Data.ByteString.Internal.ByteString)
                       -> {VV : [((GHC.Word.Word8), (GHC.Word.Word8))] | ((len VV) == (if ((bLength x) <= (bLength y)) then (bLength x) else (bLength y)))}
 Data.ByteString.zipWith : forall a.
                           lq_tmp_db120:(lq_tmp_db121:(GHC.Word.Word8)
                                         -> lq_tmp_db122:(GHC.Word.Word8) -> a)
                           -> x:(Data.ByteString.Internal.ByteString)
                           -> y:(Data.ByteString.Internal.ByteString)
                           -> {VV : [a] | ((len VV) == (if ((bLength x) <= (bLength y)) then (bLength x) else (bLength y)))}
 Data.ByteString.zipWith' : lq_tmp_db123:(lq_tmp_db124:(GHC.Word.Word8)
                                          -> lq_tmp_db125:(GHC.Word.Word8) -> (GHC.Word.Word8))
                            -> x:(Data.ByteString.Internal.ByteString)
                            -> y:(Data.ByteString.Internal.ByteString)
                            -> {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == (if ((bLength x) <= (bLength y)) then (bLength x) else (bLength y)))}
 Data.ByteString.unzip : z:[((GHC.Word.Word8), (GHC.Word.Word8))]
                         -> ({VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == (len z))}, {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == (len z))})
 Data.ByteString.inits : b:(Data.ByteString.Internal.ByteString)
                         -> [{VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) <= (bLength b))}]<\ix126 VV -> ((bLength ix126) < (bLength VV))>
 Data.ByteString.useAsCString : forall a.
                                p:(Data.ByteString.Internal.ByteString)
                                -> lq_tmp_db128:(lq_tmp_db129:{VV : (GHC.Ptr.Ptr (Foreign.C.Types.CChar)) | (((bLength p) + 1) == (plen VV))}
                                                 -> (GHC.Types.IO a))
                                -> (GHC.Types.IO a)
 Data.ByteString.useAsCStringLen : forall a.
                                   b:(Data.ByteString.Internal.ByteString)
                                   -> lq_tmp_db130:(lq_tmp_db131:{VV : ((GHC.Ptr.Ptr (Foreign.C.Types.CChar)), {VV : (GHC.Types.Int) | (VV >= 0)})<\p0 VV -> (VV <= (plen p0))> | ((cStringLen VV) == (bLength b))}
                                                    -> (GHC.Types.IO a))
                                   -> (GHC.Types.IO a)
 Data.ByteString.packCString : c:(GHC.Ptr.Ptr (Foreign.C.Types.CChar))
                               -> (GHC.Types.IO {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == (plen c))})
 Data.ByteString.packCStringLen : c:((GHC.Ptr.Ptr (Foreign.C.Types.CChar)), {VV : (GHC.Types.Int) | (VV >= 0)})<\p0 VV -> (VV <= (plen p0))>
                                  -> (GHC.Types.IO {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == (cStringLen c))})
 Data.ByteString.copy : b:(Data.ByteString.Internal.ByteString)
                        -> {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == (bLength b))}
 Data.ByteString.hGet : lq_tmp_db132:(GHC.IO.Handle.Types.Handle)
                        -> n:{VV : (GHC.Types.Int) | (VV >= 0)}
                        -> (GHC.Types.IO {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) <= n)})
 Data.ByteString.hGetNonBlocking : lq_tmp_db133:(GHC.IO.Handle.Types.Handle)
                                   -> n:{VV : (GHC.Types.Int) | (VV >= 0)}
                                   -> (GHC.Types.IO {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) <= n)})
 Data.ByteString.findIndexOrEnd : lq_tmp_db134:(lq_tmp_db135:(GHC.Word.Word8)
                                                -> (GHC.Types.Bool))
                                  -> b:(Data.ByteString.Internal.ByteString)
                                  -> {VV : (GHC.Types.Int) | (VV >= 0) && (VV <= (bLength b))}
 Data.ByteString.errorEmptyList : forall a.
                                  lq_tmp_db136:{VV : [(GHC.Types.Char)] | false} -> a
 Data.ByteString.findFromEndUntil : lq_tmp_db137:(lq_tmp_db138:(GHC.Word.Word8)
                                                  -> (GHC.Types.Bool))
                                    -> b:(Data.ByteString.Internal.ByteString)
                                    -> {VV : (GHC.Types.Int) | (VV >= 0) && (VV <= (bLength b))}
 Data.ByteString.Fusion.scanEFL : lq_tmp_db7:(lq_tmp_db8:(GHC.Word.Word8)
                                              -> lq_tmp_db9:(GHC.Word.Word8) -> (GHC.Word.Word8))
                                  -> lq_tmp_db4:(GHC.Word.Word8)
                                  -> lq_tmp_db5:(GHC.Word.Word8)
                                  -> (Data.ByteString.Fusion.PairS (GHC.Word.Word8) {VV : (Data.ByteString.Fusion.MaybeS (GHC.Word.Word8)) | ((isJustS VV))})
 Data.ByteString.Fusion.mapAccumEFL : forall acc.
                                      lq_tmp_db10:(lq_tmp_db11:acc
                                                   -> lq_tmp_db12:(GHC.Word.Word8)
                                                   -> (acc, (GHC.Word.Word8)))
                                      -> lq_tmp_db4:acc
                                      -> lq_tmp_db5:(GHC.Word.Word8)
                                      -> (Data.ByteString.Fusion.PairS acc {VV : (Data.ByteString.Fusion.MaybeS (GHC.Word.Word8)) | ((isJustS VV))})
 Data.ByteString.Fusion.mapIndexEFL : lq_tmp_db13:(lq_tmp_db14:(GHC.Types.Int)
                                                   -> lq_tmp_db15:(GHC.Word.Word8)
                                                   -> (GHC.Word.Word8))
                                      -> lq_tmp_db4:(GHC.Types.Int)
                                      -> lq_tmp_db5:(GHC.Word.Word8)
                                      -> (Data.ByteString.Fusion.PairS (GHC.Types.Int) {VV : (Data.ByteString.Fusion.MaybeS (GHC.Word.Word8)) | ((isJustS VV))})
 Data.ByteString.Fusion.loopArr : forall acc arr.
                                  p:(Data.ByteString.Fusion.PairS acc arr)
                                  -> {VV : arr | (VV == (psnd p))}
 Data.ByteString.Fusion.loopAcc : forall acc arr.
                                  p:(Data.ByteString.Fusion.PairS acc arr)
                                  -> {VV : acc | (VV == (pfst p))}
 Data.ByteString.Fusion.unSP : forall acc arr.
                               p:(Data.ByteString.Fusion.PairS acc arr)
                               -> ({VV : acc | (VV == (pfst p))}, {VV : arr | (VV == (psnd p))})
 Data.ByteString.Fusion.loopU : forall acc.
                                lq_tmp_db16:(lq_tmp_db4:acc
                                             -> lq_tmp_db5:(GHC.Word.Word8)
                                             -> (Data.ByteString.Fusion.PairS acc {VV : (Data.ByteString.Fusion.MaybeS (GHC.Word.Word8)) | ((isJustS VV))}))
                                -> lq_tmp_db17:acc
                                -> b:(Data.ByteString.Internal.ByteString)
                                -> (Data.ByteString.Fusion.PairS acc {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == (bLength b))})
 Data.ByteString.Fusion.loopL : forall acc.
                                lq_tmp_db18:(lq_tmp_db4:acc
                                             -> lq_tmp_db5:(GHC.Word.Word8)
                                             -> (Data.ByteString.Fusion.PairS acc {VV : (Data.ByteString.Fusion.MaybeS (GHC.Word.Word8)) | ((isJustS VV))}))
                                -> lq_tmp_db19:acc
                                -> b:(Data.ByteString.Lazy.Internal.ByteString)
                                -> (Data.ByteString.Fusion.PairS acc {VV : (Data.ByteString.Lazy.Internal.ByteString) | ((lbLength VV) == (lbLength b))})
 Data.ByteString.Fusion.loopUp : forall acc.
                                 lq_tmp_db20:(lq_tmp_db4:acc
                                              -> lq_tmp_db5:(GHC.Word.Word8)
                                              -> (Data.ByteString.Fusion.PairS acc {VV : (Data.ByteString.Fusion.MaybeS (GHC.Word.Word8)) | ((isJustS VV))}))
                                 -> lq_tmp_db21:acc
                                 -> b:(Data.ByteString.Internal.ByteString)
                                 -> (Data.ByteString.Fusion.PairS acc {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == (bLength b))})
 Data.ByteString.Fusion.loopDown : forall acc.
                                   lq_tmp_db22:(lq_tmp_db4:acc
                                                -> lq_tmp_db5:(GHC.Word.Word8)
                                                -> (Data.ByteString.Fusion.PairS acc {VV : (Data.ByteString.Fusion.MaybeS (GHC.Word.Word8)) | ((isJustS VV))}))
                                   -> lq_tmp_db23:acc
                                   -> b:(Data.ByteString.Internal.ByteString)
                                   -> (Data.ByteString.Fusion.PairS acc {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == (bLength b))})
 Data.ByteString.Fusion.loopNoAcc : lq_tmp_db24:(lq_tmp_db6:(GHC.Word.Word8)
                                                 -> {VV : (Data.ByteString.Fusion.MaybeS (GHC.Word.Word8)) | ((isJustS VV))})
                                    -> b:(Data.ByteString.Internal.ByteString)
                                    -> (Data.ByteString.Fusion.PairS (Data.ByteString.Fusion.NoAcc) {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == (bLength b))})
 Data.ByteString.Fusion.loopMap : lq_tmp_db25:((GHC.Word.Word8)
                                               -> (GHC.Word.Word8))
                                  -> b:(Data.ByteString.Internal.ByteString)
                                  -> (Data.ByteString.Fusion.PairS (Data.ByteString.Fusion.NoAcc) {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == (bLength b))})
 Data.ByteString.Fusion.loopFilter : lq_tmp_db26:((GHC.Word.Word8)
                                                  -> (GHC.Types.Bool))
                                     -> b:(Data.ByteString.Internal.ByteString)
                                     -> (Data.ByteString.Fusion.PairS (Data.ByteString.Fusion.NoAcc) {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) <= (bLength b))})
 Data.ByteString.Fusion.loopWrapperLE : forall acc.
                                        lq_tmp_db35:(s:{VV : (GHC.Ptr.Ptr (GHC.Word.Word8)) | (0 <= (plen VV))}
                                                     -> d:{VV : (GHC.Ptr.Ptr (GHC.Word.Word8)) | (0 <= (plen VV))}
                                                     -> n:{VV : (GHC.Types.Int) | (VV >= 0) && (VV <= (plen d)) && (VV <= (plen s))}
                                                     -> (GHC.Types.IO (Data.ByteString.Fusion.PairS <\z27 VV -> (VV <= (n - (psnd z27)))> (Data.ByteString.Fusion.PairS acc {VV : (GHC.Types.Int) | (VV >= 0)}) {VV : (GHC.Types.Int) | (VV >= 0) && (VV <= n)})))
                                        -> b:(Data.ByteString.Internal.ByteString)
                                        -> (Data.ByteString.Fusion.PairS acc {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) <= (bLength b))})
 Data.ByteString.Fusion.loopWrapper : forall acc.
                                      lq_tmp_db36:(s:{VV : (GHC.Ptr.Ptr (GHC.Word.Word8)) | (0 <= (plen VV))}
                                                   -> d:{VV : (GHC.Ptr.Ptr (GHC.Word.Word8)) | (0 <= (plen VV))}
                                                   -> n:{VV : (GHC.Types.Int) | (VV >= 0) && (VV <= (plen d)) && (VV <= (plen s))}
                                                   -> (GHC.Types.IO (Data.ByteString.Fusion.PairS <\z31 VV -> (VV <= (n - (psnd z31)))> (Data.ByteString.Fusion.PairS acc {VV : (GHC.Types.Int) | (VV >= 0)}) {VV : (GHC.Types.Int) | (VV >= 0) && (VV == n)})))
                                      -> b:(Data.ByteString.Internal.ByteString)
                                      -> (Data.ByteString.Fusion.PairS acc {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == (bLength b))})
 Data.ByteString.Fusion.sequenceLoops : forall acc1 acc2.
                                        lq_tmp_db37:(s:{VV : (GHC.Ptr.Ptr (GHC.Word.Word8)) | (0 <= (plen VV))}
                                                     -> d:{VV : (GHC.Ptr.Ptr (GHC.Word.Word8)) | (0 <= (plen VV))}
                                                     -> n:{VV : (GHC.Types.Int) | (VV >= 0) && (VV <= (plen d)) && (VV <= (plen s))}
                                                     -> (GHC.Types.IO (Data.ByteString.Fusion.PairS <\z31 VV -> (VV <= (n - (psnd z31)))> (Data.ByteString.Fusion.PairS acc1 {VV : (GHC.Types.Int) | (VV >= 0)}) {VV : (GHC.Types.Int) | (VV >= 0) && (VV == n)})))
                                        -> lq_tmp_db38:(s:{VV : (GHC.Ptr.Ptr (GHC.Word.Word8)) | (0 <= (plen VV))}
                                                        -> d:{VV : (GHC.Ptr.Ptr (GHC.Word.Word8)) | (0 <= (plen VV))}
                                                        -> n:{VV : (GHC.Types.Int) | (VV >= 0) && (VV <= (plen d)) && (VV <= (plen s))}
                                                        -> (GHC.Types.IO (Data.ByteString.Fusion.PairS <\z31 VV -> (VV <= (n - (psnd z31)))> (Data.ByteString.Fusion.PairS acc2 {VV : (GHC.Types.Int) | (VV >= 0)}) {VV : (GHC.Types.Int) | (VV >= 0) && (VV == n)})))
                                        -> s:{VV : (GHC.Ptr.Ptr (GHC.Word.Word8)) | (0 <= (plen VV))}
                                        -> d:{VV : (GHC.Ptr.Ptr (GHC.Word.Word8)) | (0 <= (plen VV))}
                                        -> n:{VV : (GHC.Types.Int) | (VV >= 0) && (VV <= (plen d)) && (VV <= (plen s))}
                                        -> (GHC.Types.IO (Data.ByteString.Fusion.PairS <\z31 VV -> (VV <= (n - (psnd z31)))> (Data.ByteString.Fusion.PairS (Data.ByteString.Fusion.PairS acc1 acc2) {VV : (GHC.Types.Int) | (VV >= 0)}) {VV : (GHC.Types.Int) | (VV >= 0) && (VV == n)}))
 Data.ByteString.Internal.ptrLen : forall a.
                                   p:{VV : (GHC.Ptr.Ptr a) | (0 <= (plen VV))}
                                   -> {VV : (GHC.Types.Int) | (VV >= 0) && (VV == (plen p))}
 Data.ByteString.Internal.unpackWith : forall a.
                                       lq_tmp_db6:(lq_tmp_db7:(GHC.Word.Word8) -> a)
                                       -> lq_tmp_db8:(Data.ByteString.Internal.ByteString) -> [a]
 Data.ByteString.Internal.packWith : forall a.
                                     lq_tmp_db9:(lq_tmp_db10:a -> (GHC.Word.Word8))
                                     -> lq_tmp_db11:[a] -> (Data.ByteString.Internal.ByteString)
 Data.ByteString.Internal.nullForeignPtr : {VV : (GHC.ForeignPtr.ForeignPtr (GHC.Word.Word8)) | ((fplen VV) == 0)}
 Data.ByteString.Internal.fromForeignPtr : p:(GHC.ForeignPtr.ForeignPtr (GHC.Word.Word8))
                                           -> o:{VV : (GHC.Types.Int) | (VV >= 0) && (VV <= (fplen p))}
                                           -> l:{VV : (GHC.Types.Int) | (VV >= 0) && ((o + VV) <= (fplen p))}
                                           -> {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == l)}
 Data.ByteString.Internal.toForeignPtr : b:(Data.ByteString.Internal.ByteString)
                                         -> ({VV : (GHC.ForeignPtr.ForeignPtr (GHC.Word.Word8)) | (VV == (bPayload b))}, {VV : (GHC.Types.Int) | (VV == (bOffset b))}, {VV : (GHC.Types.Int) | (VV == (bLength b))})
 Data.ByteString.Internal.unsafeCreate : l:{VV : (GHC.Types.Int) | (VV >= 0)}
                                         -> lq_tmp_db12:(lq_tmp_db13:{VV : (GHC.Ptr.Ptr (GHC.Word.Word8)) | (0 <= (plen VV)) && ((plen VV) == l)}
                                                         -> (GHC.Types.IO ()))
                                         -> {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == l)}
 Data.ByteString.Internal.create : l:{VV : (GHC.Types.Int) | (VV >= 0)}
                                   -> lq_tmp_db14:(lq_tmp_db15:{VV : (GHC.Ptr.Ptr (GHC.Word.Word8)) | (0 <= (plen VV)) && ((plen VV) == l)}
                                                   -> (GHC.Types.IO ()))
                                   -> (GHC.Types.IO {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == l)})
 Data.ByteString.Internal.createAndTrim : l:{VV : (GHC.Types.Int) | (VV >= 0)}
                                          -> lq_tmp_db16:(lq_tmp_db17:{VV : (GHC.Ptr.Ptr (GHC.Word.Word8)) | (0 <= (plen VV)) && ((plen VV) == l)}
                                                          -> (GHC.Types.IO {VV : (GHC.Types.Int) | (VV >= 0) && (VV <= l)}))
                                          -> (GHC.Types.IO {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) <= l)})
 Data.ByteString.Internal.createAndTrim' : forall a.
                                           l:{VV : (GHC.Types.Int) | (VV >= 0)}
                                           -> lq_tmp_db18:(lq_tmp_db19:{VV : (GHC.Ptr.Ptr (GHC.Word.Word8)) | (0 <= (plen VV)) && ((plen VV) == l)}
                                                           -> (GHC.Types.IO ({VV : (GHC.Types.Int) | (VV >= 0)}, {VV : (GHC.Types.Int) | (VV >= 0)}, a)<\o20 VV -> (VV <= (l - o20)), \o22 l23 VV -> True>))
                                           -> (GHC.Types.IO ({VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) <= l)}, a))
 Data.ByteString.Internal.createAndTrimEQ : forall a.
                                            l:{VV : (GHC.Types.Int) | (VV >= 0)}
                                            -> lq_tmp_db25:(lq_tmp_db26:{VV : (GHC.Ptr.Ptr (GHC.Word.Word8)) | (0 <= (plen VV)) && ((plen VV) == l)}
                                                            -> (GHC.Types.IO ({VV : (GHC.Types.Int) | (VV >= 0)}, {VV : (GHC.Types.Int) | (VV >= 0) && (VV == l)}, a)<\o27 VV -> (VV <= (l - o27)), \o29 l30 VV -> True>))
                                            -> (GHC.Types.IO ({VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == l)}, a))
 Data.ByteString.Internal.createAndTrimMEQ : forall a.
                                             l:{VV : (GHC.Types.Int) | (VV >= 0)}
                                             -> lq_tmp_db32:(lq_tmp_db33:{VV : (GHC.Ptr.Ptr (GHC.Word.Word8)) | (0 <= (plen VV)) && ((plen VV) == l)}
                                                             -> (GHC.Types.IO {v : ({VV : (GHC.Types.Int) | (VV >= 0)}, {VV : (GHC.Types.Int) | (VV >= 0) && (VV <= l)}, (Data.Maybe.Maybe a)) | ((tsnd v) <= (l - (tfst v))) && (((isJust (ttrd v))) => ((tsnd v) == l))}))
                                             -> (GHC.Types.IO ({VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) <= l)}, (Data.Maybe.Maybe a))<\b34 VV -> (((isJust VV)) => ((bLength b34) == l))>)
 Data.ByteString.Internal.createAndTrim'' : forall a <p :: (GHC.Types.Int)-> Bool>.
                                            l:{VV : (GHC.Types.Int)<p> | (VV >= 0)}
                                            -> lq_tmp_db40:(lq_tmp_db41:{VV : (GHC.Ptr.Ptr (GHC.Word.Word8)) | (0 <= (plen VV)) && ((plen VV) == l)}
                                                            -> (GHC.Types.IO ({VV : (GHC.Types.Int) | (VV >= 0)}, {VV : (GHC.Types.Int)<p> | (VV >= 0)}, a)<\o42 VV -> (VV <= (l - o42)), \o44 l45 VV -> True>))
                                            -> (GHC.Types.IO ({VV : (GHC.Types.Int)<p> | (VV >= 0) && (VV <= l)}, (Data.ByteString.Internal.ByteString), a)<\sz47 VV -> ((bLength VV) == sz47), \o49 l50 VV -> True>)
 Data.ByteString.Internal.mallocByteString : forall a.
                                             l:{VV : (GHC.Types.Int) | (VV >= 0)}
                                             -> (GHC.Types.IO {VV : (GHC.ForeignPtr.ForeignPtr a) | (0 <= (fplen VV)) && ((fplen VV) == l)})
 Data.ByteString.Internal.inlinePerformIO : forall a.
                                            lq_tmp_db52:(GHC.Types.IO a) -> a
 Data.ByteString.Internal.c_strlen : s:(GHC.Ptr.Ptr (Foreign.C.Types.CChar))
                                     -> (GHC.Types.IO {VV : (Foreign.C.Types.CSize) | (0 <= VV) && (VV == (plen s))})
 Data.ByteString.Internal.c_memchr : p:(GHC.Ptr.Ptr (GHC.Word.Word8))
                                     -> lq_tmp_db53:(Foreign.C.Types.CInt)
                                     -> n:{VV : (Foreign.C.Types.CSize) | (0 <= VV) && (VV <= (plen p))}
                                     -> (GHC.Types.IO {VV : (GHC.Ptr.Ptr (GHC.Word.Word8)) | (((isNullPtr VV)) || (((((plen p) - n) < (plen VV)) && ((plen VV) <= (plen p))) && ((pbase VV) == (pbase p))))})
 Data.ByteString.Internal.memchr : p:(GHC.Ptr.Ptr (GHC.Word.Word8))
                                   -> lq_tmp_db54:(GHC.Word.Word8)
                                   -> n:{VV : (Foreign.C.Types.CSize) | (0 <= VV) && (VV <= (plen p))}
                                   -> (GHC.Types.IO {VV : (GHC.Ptr.Ptr (GHC.Word.Word8)) | (((isNullPtr VV)) || (((((plen p) - n) < (plen VV)) && ((plen VV) <= (plen p))) && ((pbase VV) == (pbase p))))})
 Data.ByteString.Internal.memcmp : p:(GHC.Ptr.Ptr (GHC.Word.Word8))
                                   -> q:(GHC.Ptr.Ptr (GHC.Word.Word8))
                                   -> lq_tmp_db55:{VV : (Foreign.C.Types.CSize) | (VV <= (plen p)) && (VV <= (plen q))}
                                   -> (GHC.Types.IO (Foreign.C.Types.CInt))
 Data.ByteString.Internal.memcpy : dst:{VV : (GHC.Ptr.Ptr (GHC.Word.Word8)) | (0 <= (plen VV))}
                                   -> src:{VV : (GHC.Ptr.Ptr (GHC.Word.Word8)) | (0 <= (plen VV))}
                                   -> size:{VV : (Foreign.C.Types.CSize) | (VV <= (plen src)) && (VV <= (plen dst))}
                                   -> (GHC.Types.IO ())
 Data.ByteString.Internal.c_reverse : dst:{VV : (GHC.Ptr.Ptr (GHC.Word.Word8)) | (0 <= (plen VV))}
                                      -> src:{VV : (GHC.Ptr.Ptr (GHC.Word.Word8)) | (0 <= (plen VV))}
                                      -> lq_tmp_db56:{VV : (Foreign.C.Types.CULong) | (VV <= (plen src)) && (VV <= (plen dst))}
                                      -> (GHC.Types.IO ())
 Data.ByteString.Internal.c_intersperse : dst:(GHC.Ptr.Ptr (GHC.Word.Word8))
                                          -> src:(GHC.Ptr.Ptr (GHC.Word.Word8))
                                          -> lq_tmp_db57:{VV : (Foreign.C.Types.CULong) | (VV <= (plen src)) && (((VV + VV) - 1) <= (plen dst))}
                                          -> lq_tmp_db58:(GHC.Word.Word8)
                                          -> (GHC.Types.IO ())
 Data.ByteString.Internal.c_maximum : p:(GHC.Ptr.Ptr (GHC.Word.Word8))
                                      -> lq_tmp_db59:{VV : (Foreign.C.Types.CULong) | (VV <= (plen p))}
                                      -> (GHC.Types.IO (GHC.Word.Word8))
 Data.ByteString.Internal.c_minimum : p:(GHC.Ptr.Ptr (GHC.Word.Word8))
                                      -> lq_tmp_db60:{VV : (Foreign.C.Types.CULong) | (VV <= (plen p))}
                                      -> (GHC.Types.IO (GHC.Word.Word8))
 Data.ByteString.Internal.c_count : p:(GHC.Ptr.Ptr (GHC.Word.Word8))
                                    -> n:{VV : (Foreign.C.Types.CULong) | (VV <= (plen p))}
                                    -> lq_tmp_db61:(GHC.Word.Word8)
                                    -> (GHC.Types.IO {VV : (Foreign.C.Types.CULong) | (0 <= VV) && (VV <= n)})
 Data.ByteString.Lazy.Internal.invt : lq_tmp_db4:(Data.ByteString.Lazy.Internal.ByteString)
                                      -> {VV : (GHC.Types.Bool) | ((Prop VV))}
 Data.ByteString.Lazy.Internal.checkInvariant : lq_tmp_db5:(Data.ByteString.Lazy.Internal.ByteString)
                                                -> (Data.ByteString.Lazy.Internal.ByteString)
 Data.ByteString.Lazy.Internal.chunk : b:(Data.ByteString.Internal.ByteString)
                                       -> bs:(Data.ByteString.Lazy.Internal.ByteString)
                                       -> {VV : (Data.ByteString.Lazy.Internal.ByteString) | ((lbLength VV) == ((bLength b) + (lbLength bs)))}
 Data.ByteString.Lazy.Internal.foldrChunks : forall a <p :: (Data.ByteString.Lazy.Internal.ByteString)-> a-> Bool>.
                                             lq_tmp_db8:(bs:(Data.ByteString.Lazy.Internal.ByteString)
                                                         -> b:{VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) > 0)}
                                                         -> lq_tmp_db9:{VV : a<p bs> | true}
                                                         -> forall [ex#0:{VV : (Data.ByteString.Lazy.Internal.ByteString) | (VV == (Data.ByteString.Lazy.Internal.Chunk#rb4N b bs))}].{VV : a<p ex#0> | true})
                                             -> lq_tmp_db10:forall [ex#1:{VV : (Data.ByteString.Lazy.Internal.ByteString) | (VV == Data.ByteString.Lazy.Internal.Empty#rb4O)}].{VV : a<p ex#1> | true}
                                             -> b:(Data.ByteString.Lazy.Internal.ByteString)
                                             -> {VV : a<p b> | true}
 Data.ByteString.Lazy.Internal.foldlChunks : forall a.
                                             lq_tmp_db11:(lq_tmp_db12:a
                                                          -> lq_tmp_db13:{VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) > 0)}
                                                          -> a)
                                             -> lq_tmp_db14:a
                                             -> lq_tmp_db15:(Data.ByteString.Lazy.Internal.ByteString)
                                             -> a
 Data.ByteString.Lazy.Internal.defaultChunkSize : {VV : (GHC.Types.Int) | (VV >= 0) && (VV == 32752)}
 Data.ByteString.Lazy.Internal.smallChunkSize : {VV : (GHC.Types.Int) | (VV >= 0) && (VV == 4080)}
 Data.ByteString.Lazy.Internal.chunkOverhead : {VV : (GHC.Types.Int) | (VV >= 0) && (VV == 16)}
 Data.ByteString.Unsafe.unsafeHead : lq_tmp_db0:{VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) > 0)}
                                     -> (GHC.Word.Word8)
 Data.ByteString.Unsafe.unsafeTail : b:{VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) > 0)}
                                     -> {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == ((bLength b) - 1))}
 Data.ByteString.Unsafe.unsafeIndex : b:(Data.ByteString.Internal.ByteString)
                                      -> lq_tmp_db1:{VV : (GHC.Types.Int) | (VV >= 0) && (VV < (bLength b))}
                                      -> (GHC.Word.Word8)
 Data.ByteString.Unsafe.unsafeTake : n:{VV : (GHC.Types.Int) | (VV >= 0)}
                                     -> b:{VV : (Data.ByteString.Internal.ByteString) | (n <= (bLength VV))}
                                     -> {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == n)}
 Data.ByteString.Unsafe.unsafeDrop : n:{VV : (GHC.Types.Int) | (VV >= 0)}
                                     -> b:{VV : (Data.ByteString.Internal.ByteString) | (n <= (bLength VV))}
                                     -> {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == ((bLength b) - n))}
 Data.ByteString.Unsafe.unsafePackAddress : a:(GHC.Prim.Addr#)
                                            -> (GHC.Types.IO {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == (addrLen a))})
 Data.ByteString.Unsafe.unsafePackAddressLen : len:{VV : (GHC.Types.Int) | (VV >= 0)}
                                               -> lq_tmp_db2:{VV : (GHC.Prim.Addr#) | (len <= (addrLen VV))}
                                               -> (GHC.Types.IO {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == len)})
 Data.ByteString.Unsafe.unsafePackCStringFinalizer : p:{VV : (GHC.Ptr.Ptr (GHC.Word.Word8)) | (0 <= (plen VV))}
                                                     -> lq_tmp_db3:{VV : (GHC.Types.Int) | (VV >= 0) && (VV <= (plen p))}
                                                     -> lq_tmp_db4:(GHC.Types.IO ())
                                                     -> (GHC.Types.IO (Data.ByteString.Internal.ByteString))
 Data.ByteString.Unsafe.unsafePackCString : cstr:{VV : (GHC.Ptr.Ptr (Foreign.C.Types.CChar)) | (0 <= (plen VV))}
                                            -> (GHC.Types.IO {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == (plen cstr))})
 Data.ByteString.Unsafe.unsafePackCStringLen : lq_tmp_db5:((GHC.Ptr.Ptr (Foreign.C.Types.CChar)), {VV : (GHC.Types.Int) | (VV >= 0)})<\p0 VV -> (VV <= (plen p0))>
                                               -> (GHC.Types.IO (Data.ByteString.Internal.ByteString))
 Data.ByteString.Unsafe.unsafePackMallocCString : cstr:{VV : (GHC.Ptr.Ptr (Foreign.C.Types.CChar)) | (0 <= (plen VV))}
                                                  -> (GHC.Types.IO {VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) == (plen cstr))})
 Data.ByteString.Unsafe.unsafeUseAsCString : forall a.
                                             p:(Data.ByteString.Internal.ByteString)
                                             -> lq_tmp_db6:(lq_tmp_db7:{VV : (GHC.Ptr.Ptr (Foreign.C.Types.CChar)) | (0 <= (plen VV)) && ((bLength p) <= (plen VV))}
                                                            -> (GHC.Types.IO a))
                                             -> (GHC.Types.IO a)
 Data.ByteString.Unsafe.unsafeUseAsCStringLen : forall a.
                                                b:(Data.ByteString.Internal.ByteString)
                                                -> lq_tmp_db8:(lq_tmp_db9:((GHC.Ptr.Ptr (Foreign.C.Types.CChar)), {VV : (GHC.Types.Int) | (VV >= 0) && (VV == (bLength b))})<\p2 VV -> (VV <= (plen p2))>
                                                               -> (GHC.Types.IO a))
                                                -> (GHC.Types.IO a)
 Data.List.groupBy : forall a.
                     lq_tmp_db0:(lq_tmp_db1:a -> lq_tmp_db2:a -> (GHC.Types.Bool))
                     -> lq_tmp_db3:[a] -> [{VV : [a] | ((len VV) > 0)}]
 Data.List.transpose : forall a.
                       lq_tmp_db4:[[a]] -> [{VV : [a] | ((len VV) > 0)}]
 GHC.List.splitAt : forall a.
                    n:{VV : (GHC.Types.Int) | (VV >= 0)}
                    -> x:[a]
                    -> ({VV : [a] | (((len x) < n) => ((len VV) == (len x))) && ((not (((len x) < n))) => ((len VV) == n))}, [a])<\x15 VV -> ((len VV) == ((len x) - (len x15)))>
 GHC.List.concat : forall a.
                   x:[[a]] -> {VV : [a] | ((len VV) == (sumLens x))}
 Data.Text.Array.aLen : a:(Data.Text.Array.Array)
                        -> {VV : (GHC.Types.Int) | (VV >= 0) && (VV == (alen a))}
 Data.Text.Array.maLen : forall s.
                         ma:(Data.Text.Array.MArray s)
                         -> {VV : (GHC.Types.Int) | (VV >= 0) && (VV == (malen ma))}
 Data.Text.Array.new : forall s.
                       n:{VV : (GHC.Types.Int) | (VV >= 0)}
                       -> (GHC.ST.ST s {VV : (Data.Text.Array.MArray s) | ((malen VV) == n)})
 Data.Text.Array.unsafeFreeze : forall s.
                                ma:(Data.Text.Array.MArray s)
                                -> (GHC.ST.ST s {VV : (Data.Text.Array.Array) | ((alen VV) == (malen ma))})
 Data.Text.Array.unsafeIndex : a:(Data.Text.Array.Array)
                               -> lq_tmp_db5:{VV : (GHC.Types.Int) | (VV >= 0) && (VV < (alen a))}
                               -> (GHC.Word.Word16)
 Data.Text.Array.unsafeIndexF : a:(Data.Text.Array.Array)
                                -> o:{VV : (GHC.Types.Int) | (VV >= 0) && (VV <= (alen a))}
                                -> l:{VV : (GHC.Types.Int) | (VV >= 0) && ((VV + o) <= (alen a))}
                                -> i:{VV : (GHC.Types.Int) | (o <= VV) && (VV < (o + l))}
                                -> {VV : (GHC.Word.Word16) | (((55296 <= VV) && (VV <= 56319)) => (((numchars a o ((i - o) + 2)) == (1 + (numchars a o (i - o)))) && (((numchars a o ((i - o) + 2)) <= (numchars a o l)) && (((i - o) + 2) <= l)))) && ((not (((55296 <= VV) && (VV <= 56319)))) => (((numchars a o ((i - o) + 1)) == (1 + (numchars a o (i - o)))) && (((numchars a o ((i - o) + 1)) <= (numchars a o l)) && (((i - o) + 1) <= l))))}
 Data.Text.Array.unsafeIndexFQ : x:(GHC.Word.Word16)
                                 -> a:(Data.Text.Array.Array)
                                 -> o:(GHC.Types.Int)
                                 -> l:(GHC.Types.Int)
                                 -> i:(GHC.Types.Int)
                                 -> {VV : (GHC.Types.Bool) | (((Prop VV)) <=> ((((55296 <= x) && (x <= 56319)) => (((numchars a o ((i - o) + 2)) == (1 + (numchars a o (i - o)))) && (((numchars a o ((i - o) + 2)) <= (numchars a o l)) && (((i - o) + 2) <= l)))) && ((not (((55296 <= x) && (x <= 56319)))) => (((numchars a o ((i - o) + 1)) == (1 + (numchars a o (i - o)))) && (((numchars a o ((i - o) + 1)) <= (numchars a o l)) && (((i - o) + 1) <= l))))))}
 Data.Text.Array.unsafeIndexB : a:(Data.Text.Array.Array)
                                -> o:{VV : (GHC.Types.Int) | (VV >= 0) && (VV <= (alen a))}
                                -> l:{VV : (GHC.Types.Int) | (VV >= 0) && ((VV + o) <= (alen a))}
                                -> i:{VV : (GHC.Types.Int) | (o <= VV) && (VV < (o + l))}
                                -> {VV : (GHC.Word.Word16) | (((VV >= 56320) && (VV <= 57343)) => (((numchars a o ((i - o) + 1)) == (1 + (numchars a o ((i - o) - 1)))) && (((numchars a o ((i - o) - 1)) >= 0) && (((i - o) - 1) >= 0)))) && ((not (((VV >= 56320) && (VV <= 57343)))) => (((numchars a o ((i - o) + 1)) == (1 + (numchars a o (i - o)))) && ((numchars a o (i - o)) >= 0)))}
 Data.Text.Array.unsafeIndexBQ : x:(GHC.Word.Word16)
                                 -> a:(Data.Text.Array.Array)
                                 -> o:(GHC.Types.Int)
                                 -> i:(GHC.Types.Int)
                                 -> {VV : (GHC.Types.Bool) | (((Prop VV)) <=> ((((x >= 56320) && (x <= 57343)) => (((numchars a o ((i - o) + 1)) == (1 + (numchars a o ((i - o) - 1)))) && (((numchars a o ((i - o) - 1)) >= 0) && (((i - o) - 1) >= 0)))) && ((not (((x >= 56320) && (x <= 57343)))) => (((numchars a o ((i - o) + 1)) == (1 + (numchars a o (i - o)))) && ((numchars a o (i - o)) >= 0)))))}
 Data.Text.Array.unsafeWrite : forall s.
                               ma:(Data.Text.Array.MArray s)
                               -> lq_tmp_db6:{VV : (GHC.Types.Int) | (VV >= 0) && (VV < (malen ma))}
                               -> lq_tmp_db7:(GHC.Word.Word16)
                               -> (GHC.ST.ST s ())
 Data.Text.Array.toList : a:(Data.Text.Array.Array)
                          -> o:{VV : (GHC.Types.Int) | (VV >= 0) && (VV <= (alen a))}
                          -> l:{VV : (GHC.Types.Int) | (VV >= 0) && ((VV + o) <= (alen a))}
                          -> {VV : [(GHC.Word.Word16)] | ((len VV) == l)}
 Data.Text.Array.empty : {VV : (Data.Text.Array.Array) | ((alen VV) == 0)}
 Data.Text.Array.copyM : forall s.
                         dest:(Data.Text.Array.MArray s)
                         -> didx:{VV : (GHC.Types.Int) | (VV >= 0) && (VV <= (malen dest))}
                         -> src:(Data.Text.Array.MArray s)
                         -> sidx:{VV : (GHC.Types.Int) | (VV >= 0) && (VV <= (malen src))}
                         -> lq_tmp_db8:{VV : (GHC.Types.Int) | (VV >= 0) && ((VV + didx) <= (malen dest)) && ((VV + sidx) <= (malen src))}
                         -> (GHC.ST.ST s ())
 Data.Text.Array.copyI : forall s.
                         dest:(Data.Text.Array.MArray s)
                         -> i0:{VV : (GHC.Types.Int) | (VV >= 0) && (VV <= (malen dest))}
                         -> src:(Data.Text.Array.Array)
                         -> j0:{VV : (GHC.Types.Int) | (VV >= 0) && (VV <= (alen src))}
                         -> top:{VV : (GHC.Types.Int) | (VV >= 0) && (VV <= (malen dest)) && (((VV - i0) + j0) <= (alen src))}
                         -> (GHC.ST.ST s ())
 Data.Text.Array.memcpyI : forall s.
                           lq_tmp_db9:(GHC.Prim.MutableByteArray# s)
                           -> lq_tmp_db10:(Foreign.C.Types.CSize)
                           -> lq_tmp_db11:(GHC.Prim.ByteArray#)
                           -> lq_tmp_db12:(Foreign.C.Types.CSize)
                           -> lq_tmp_db13:(Foreign.C.Types.CSize)
                           -> (GHC.Types.IO ())
 Data.Text.Array.memcmp : lq_tmp_db14:(GHC.Prim.ByteArray#)
                          -> lq_tmp_db15:(Foreign.C.Types.CSize)
                          -> lq_tmp_db16:(GHC.Prim.ByteArray#)
                          -> lq_tmp_db17:(Foreign.C.Types.CSize)
                          -> lq_tmp_db18:(Foreign.C.Types.CSize)
                          -> (GHC.Types.IO (Foreign.C.Types.CInt))
 Data.Text.Array.memcpyM : forall s.
                           lq_tmp_db19:(GHC.Prim.MutableByteArray# s)
                           -> lq_tmp_db20:(Foreign.C.Types.CSize)
                           -> lq_tmp_db21:(GHC.Prim.MutableByteArray# s)
                           -> lq_tmp_db22:(Foreign.C.Types.CSize)
                           -> lq_tmp_db23:(Foreign.C.Types.CSize)
                           -> (GHC.Types.IO ())
 Data.Text.Axioms.axiom_numchars_append : a:(Data.Text.Internal.Text)
                                          -> b:(Data.Text.Internal.Text)
                                          -> t:(Data.Text.Internal.Text)
                                          -> {VV : (GHC.Types.Bool) | (((Prop VV)) <=> (((tlen t) == ((tlen a) + (tlen b))) => ((tlength t) == ((tlength a) + (tlength b)))))}
 Data.Text.Axioms.axiom_numchars_replicate : t1:(Data.Text.Internal.Text)
                                             -> t2:(Data.Text.Internal.Text)
                                             -> {VV : (GHC.Types.Bool) | (((Prop VV)) <=> (((tlen t2) >= (tlen t1)) => ((tlength t2) >= (tlength t1))))}
 Data.Text.Axioms.axiom_numchars_concat : t:(Data.Text.Internal.Text)
                                          -> ts:[(Data.Text.Internal.Text)]
                                          -> l:(GHC.Types.Int)
                                          -> {VV : (GHC.Types.Bool) | (((Prop VV)) <=> ((l == (sum_tlens ts)) => ((tlength t) == (sum_tlengths ts))))}
 Data.Text.Axioms.axiom_numchars_split : t:(Data.Text.Internal.Text)
                                         -> i:(GHC.Types.Int)
                                         -> {VV : (GHC.Types.Bool) | (((Prop VV)) <=> ((numchars (tarr t) (toff t) (tlen t)) == ((numchars (tarr t) (toff t) i) + (numchars (tarr t) ((toff t) + i) ((tlen t) - i)))))}
 Data.Text.Fusion.stream : t:(Data.Text.Internal.Text)
                           -> {VV : (Data.Text.Fusion.Internal.Stream (GHC.Types.Char)) | ((slen VV) == (tlength t))}
 Data.Text.Fusion.reverseStream : t:(Data.Text.Internal.Text)
                                  -> {VV : (Data.Text.Fusion.Internal.Stream (GHC.Types.Char)) | ((slen VV) == (tlength t))}
 Data.Text.Fusion.unstream : s:(Data.Text.Fusion.Internal.Stream (GHC.Types.Char))
                             -> {VV : (Data.Text.Internal.Text) | ((tlength VV) == (slen s))}
 Data.Text.Fusion.findIndex : lq_tmp_db0:(lq_tmp_db1:(GHC.Types.Char)
                                          -> (GHC.Types.Bool))
                              -> s:(Data.Text.Fusion.Internal.Stream (GHC.Types.Char))
                              -> (Data.Maybe.Maybe {VV : (GHC.Types.Int) | (VV >= 0) && (VV < (slen s))})
 Data.Text.Fusion.mapAccumL : forall a.
                              lq_tmp_db2:(lq_tmp_db3:a
                                          -> lq_tmp_db4:(GHC.Types.Char) -> (a, (GHC.Types.Char)))
                              -> lq_tmp_db5:a
                              -> s:(Data.Text.Fusion.Internal.Stream (GHC.Types.Char))
                              -> (a, {VV : (Data.Text.Internal.Text) | ((tlength VV) == (slen s))})
 Data.Text.Fusion.length : s:(Data.Text.Fusion.Internal.Stream (GHC.Types.Char))
                           -> {VV : (GHC.Types.Int) | (VV == (slen s))}
 Data.Text.Fusion.reverse : s:(Data.Text.Fusion.Internal.Stream (GHC.Types.Char))
                            -> {VV : (Data.Text.Internal.Text) | ((tlength VV) == (slen s))}
 Data.Text.Fusion.Common.cons : lq_tmp_db1:(GHC.Types.Char)
                                -> s:(Data.Text.Fusion.Internal.Stream (GHC.Types.Char))
                                -> {VV : (Data.Text.Fusion.Internal.Stream (GHC.Types.Char)) | ((slen VV) == (1 + (slen s)))}
 Data.Text.Fusion.Common.snoc : s:(Data.Text.Fusion.Internal.Stream (GHC.Types.Char))
                                -> lq_tmp_db2:(GHC.Types.Char)
                                -> {VV : (Data.Text.Fusion.Internal.Stream (GHC.Types.Char)) | ((slen VV) == (1 + (slen s)))}
 Data.Text.Fusion.Common.compareLengthI : s:(Data.Text.Fusion.Internal.Stream (GHC.Types.Char))
                                          -> l:(GHC.Types.Int)
                                          -> {VV : (GHC.Types.Ordering) | ((VV == GHC.Types.EQ#6U) <=> ((slen s) == l))}
 Data.Text.Fusion.Common.isSingleton : s:(Data.Text.Fusion.Internal.Stream (GHC.Types.Char))
                                       -> {VV : (GHC.Types.Bool) | (((Prop VV)) <=> ((slen s) == 1))}
 Data.Text.Fusion.Common.singleton : lq_tmp_db3:(GHC.Types.Char)
                                     -> {VV : (Data.Text.Fusion.Internal.Stream (GHC.Types.Char)) | ((slen VV) == 1)}
 Data.Text.Fusion.Common.streamList : forall a.
                                      l:[a]
                                      -> {VV : (Data.Text.Fusion.Internal.Stream a) | ((slen VV) == (len l))}
 Data.Text.Fusion.Common.unstreamList : forall a.
                                        s:(Data.Text.Fusion.Internal.Stream a)
                                        -> {VV : [a] | ((len VV) == (slen s))}
 Data.Text.Fusion.Common.map : lq_tmp_db4:(lq_tmp_db5:(GHC.Types.Char)
                                           -> (GHC.Types.Char))
                               -> s:(Data.Text.Fusion.Internal.Stream (GHC.Types.Char))
                               -> {VV : (Data.Text.Fusion.Internal.Stream (GHC.Types.Char)) | ((slen VV) == (slen s))}
 Data.Text.Fusion.Common.filter : lq_tmp_db6:(lq_tmp_db7:(GHC.Types.Char)
                                              -> (GHC.Types.Bool))
                                  -> s:(Data.Text.Fusion.Internal.Stream (GHC.Types.Char))
                                  -> {VV : (Data.Text.Fusion.Internal.Stream (GHC.Types.Char)) | ((slen VV) <= (slen s))}
 Data.Text.Fusion.Common.intersperse : lq_tmp_db8:(GHC.Types.Char)
                                       -> s:(Data.Text.Fusion.Internal.Stream (GHC.Types.Char))
                                       -> {VV : (Data.Text.Fusion.Internal.Stream (GHC.Types.Char)) | ((slen VV) > (slen s))}
 Data.Text.Fusion.Common.replicateCharI : l:(GHC.Types.Int)
                                          -> lq_tmp_db9:(GHC.Types.Char)
                                          -> {VV : (Data.Text.Fusion.Internal.Stream (GHC.Types.Char)) | ((slen VV) == l)}
 Data.Text.Fusion.Common.toCaseFold : s:(Data.Text.Fusion.Internal.Stream (GHC.Types.Char))
                                      -> {VV : (Data.Text.Fusion.Internal.Stream (GHC.Types.Char)) | ((slen VV) >= (slen s))}
 Data.Text.Fusion.Common.toUpper : s:(Data.Text.Fusion.Internal.Stream (GHC.Types.Char))
                                   -> {VV : (Data.Text.Fusion.Internal.Stream (GHC.Types.Char)) | ((slen VV) >= (slen s))}
 Data.Text.Fusion.Common.toLower : s:(Data.Text.Fusion.Internal.Stream (GHC.Types.Char))
                                   -> {VV : (Data.Text.Fusion.Internal.Stream (GHC.Types.Char)) | ((slen VV) >= (slen s))}
 Data.Text.Fusion.Size.exactSize : n:{VV : (GHC.Types.Int) | (VV >= 0)}
                                   -> {VV : (Data.Text.Fusion.Size.Size) | ((getSize VV) == n) && (not (((isUnknown VV))))}
 Data.Text.Fusion.Size.maxSize : n:{VV : (GHC.Types.Int) | (VV >= 0)}
                                 -> {VV : (Data.Text.Fusion.Size.Size) | ((getSize VV) == n) && (not (((isUnknown VV))))}
 Data.Text.Fusion.Size.unknownSize : {VV : (Data.Text.Fusion.Size.Size) | ((isUnknown VV))}
 Data.Text.Fusion.Size.larger : s1:(Data.Text.Fusion.Size.Size)
                                -> s2:(Data.Text.Fusion.Size.Size)
                                -> {VV : (Data.Text.Fusion.Size.Size) | ((not ((((isUnknown s1)) || ((isUnknown s2))))) => ((((getSize s1) > (getSize s2)) => ((getSize VV) == (getSize s1))) && ((not (((getSize s1) > (getSize s2)))) => ((getSize VV) == (getSize s2)))))}
 Data.Text.Fusion.Size.upperBound : k:{VV : (GHC.Types.Int) | (VV >= 0)}
                                    -> s:(Data.Text.Fusion.Size.Size)
                                    -> {VV : (GHC.Types.Int) | (VV >= 0) && (VV == (if ((isUnknown s)) then k else (getSize s)))}
 Data.Text.Fusion.Size.isEmpty : s:(Data.Text.Fusion.Size.Size)
                                 -> {VV : (GHC.Types.Bool) | (((Prop VV)) <=> ((not (((isUnknown s)))) && ((getSize s) == 0)))}
 Data.Text.Fusion.Size.overflowError : (GHC.Types.Int)
 Data.Text.Internal.text : a:(Data.Text.Array.Array)
                           -> o:{VV : (GHC.Types.Int) | (VV >= 0) && (VV <= (alen a))}
                           -> l:{VV : (GHC.Types.Int) | (VV >= 0) && ((VV + o) <= (alen a))}
                           -> {VV : (Data.Text.Internal.Text) | ((tarr VV) == a) && ((toff VV) == o) && ((tlen VV) == l) && ((tlength VV) == (numchars a o l))}
 Data.Text.Internal.empty : {VV : (Data.Text.Internal.Text) | ((tlen VV) == 0)}
 Data.Text.Internal.textP : a:(Data.Text.Array.Array)
                            -> o:{VV : (GHC.Types.Int) | (VV >= 0) && (VV <= (alen a))}
                            -> l:{VV : (GHC.Types.Int) | (VV >= 0) && ((VV + o) <= (alen a))}
                            -> {VV : (Data.Text.Internal.Text) | ((tlen VV) == l) && ((tlength VV) == (numchars a o l))}
 Data.Text.Internal.tlEqNumchars : t:(Data.Text.Internal.Text)
                                   -> a:(Data.Text.Array.Array)
                                   -> o:(GHC.Types.Int)
                                   -> l:(GHC.Types.Int)
                                   -> {VV : (GHC.Types.Bool) | (((Prop VV)) <=> ((tlength t) == (numchars a o l)))}
 Data.Text.Internal.numcharsZ : a:(Data.Text.Array.Array)
                                -> o:(GHC.Types.Int)
                                -> l:(GHC.Types.Int)
                                -> {VV : (GHC.Types.Bool) | (((Prop VV)) <=> ((numchars a o l) == 0))}
 Data.Text.Private.span_ : lq_tmp_db0:(lq_tmp_db1:(GHC.Types.Char)
                                       -> (GHC.Types.Bool))
                           -> t:(Data.Text.Internal.Text)
                           -> ({VV : (Data.Text.Internal.Text) | ((tlen VV) <= (tlen t))}, {VV : (Data.Text.Internal.Text) | ((tlen VV) <= (tlen t))})
 Data.Text.Private.runText : lq_tmp_db2:(forall s.
                                         lq_tmp_db3:(m:(Data.Text.Array.MArray s)
                                                     -> lq_tmp_db4:{VV : (GHC.Types.Int) | (VV >= 0) && (VV <= (malen m))}
                                                     -> (GHC.ST.ST s (Data.Text.Internal.Text)))
                                         -> (GHC.ST.ST s (Data.Text.Internal.Text)))
                             -> (Data.Text.Internal.Text)
 Data.Text.Unsafe.unsafeHead : lq_tmp_db0:{VV : (Data.Text.Internal.Text) | ((tlen VV) > 0)}
                               -> (GHC.Types.Char)
 Data.Text.Unsafe.unsafeTail : t:{VV : (Data.Text.Internal.Text) | ((tlen VV) > 0)}
                               -> {VV : (Data.Text.Internal.Text) | ((tlen VV) < (tlen t)) && ((tlength VV) == ((tlength t) - 1))}
 Data.Text.Unsafe.iter : t:(Data.Text.Internal.Text)
                         -> i:{VV : (GHC.Types.Int) | (VV >= 0) && (VV < (tlen t))}
                         -> {VV : (Data.Text.Unsafe.Iter) | (i < ((iter_d VV) + i)) && (((iter_d VV) + i) <= (tlen t)) && ((numchars (tarr t) (toff t) (i + (iter_d VV))) == (1 + (numchars (tarr t) (toff t) i))) && ((numchars (tarr t) (toff t) (i + (iter_d VV))) <= (tlength t))}
 Data.Text.Unsafe.iter_ : t:(Data.Text.Internal.Text)
                          -> i:{VV : (GHC.Types.Int) | (VV >= 0) && (VV < (tlen t))}
                          -> {VV : (GHC.Types.Int) | (i < (VV + i)) && ((VV + i) <= (tlen t)) && ((numchars (tarr t) (toff t) (i + VV)) == (1 + (numchars (tarr t) (toff t) i))) && ((numchars (tarr t) (toff t) (i + VV)) <= (tlength t))}
 Data.Text.Unsafe.reverseIter : t:(Data.Text.Internal.Text)
                                -> i:{VV : (GHC.Types.Int) | (0 <= VV) && (VV < (tlen t))}
                                -> ((GHC.Types.Char), {VV : (GHC.Types.Int) | (0 <= ((i + 1) + VV)) && (((i + 1) + VV) < (i + 1)) && ((numchars (tarr t) (toff t) ((i + 1) + VV)) == ((numchars (tarr t) (toff t) (i + 1)) - 1)) && ((numchars (tarr t) (toff t) ((i + 1) + VV)) >= -1)})
 Data.Text.Unsafe.neg : n:(GHC.Types.Int)
                        -> {VV : (GHC.Types.Int) | (VV == (0 - n))}
 Data.Text.Unsafe.lengthWord16 : t:(Data.Text.Internal.Text)
                                 -> {VV : (GHC.Types.Int) | (VV == (tlen t))}
 Data.Text.Unsafe.takeWord16 : k:{VV : (GHC.Types.Int) | (VV >= 0)}
                               -> lq_tmp_db2:{VV : (Data.Text.Internal.Text) | (k <= (tlen VV))}
                               -> {VV : (Data.Text.Internal.Text) | ((tlen VV) == k)}
 Data.Text.Unsafe.dropWord16 : k:{VV : (GHC.Types.Int) | (VV >= 0)}
                               -> t:{VV : (Data.Text.Internal.Text) | (k <= (tlen VV))}
                               -> {VV : (Data.Text.Internal.Text) | ((tlen VV) == ((tlen t) - k))}
 Data.Text.UnsafeChar.ord : c:(GHC.Types.Char)
                            -> {VV : (GHC.Types.Int) | (VV == (ord c))}
 Data.Text.UnsafeChar.unsafeWrite : forall s.
                                    ma:(Data.Text.Array.MArray s)
                                    -> i:{VV : (GHC.Types.Int) | (VV >= 0)}
                                    -> lq_tmp_db1:{VV : (GHC.Types.Char) | (((ord VV) < 65536) => ((0 <= i) && (i <= ((malen ma) - 1)))) && (((ord VV) >= 65536) => ((0 <= i) && (i <= ((malen ma) - 2))))}
                                    -> (GHC.ST.ST s {VV : (GHC.Types.Int) | (VV >= 0) && ((VV + i) <= (malen ma)) && (1 <= VV) && (VV <= 2)})
 Foreign.ForeignPtr.Imp.withForeignPtr : forall a b.
                                         fp:(GHC.ForeignPtr.ForeignPtr a)
                                         -> lq_tmp_db0:(lq_tmp_db1:{VV : (GHC.Ptr.Ptr a) | (0 <= (plen VV)) && ((plen VV) == (fplen fp))}
                                                        -> (GHC.Types.IO b))
                                         -> (GHC.Types.IO b)
 GHC.ForeignPtr.newForeignPtr_ : forall a.
                                 p:(GHC.Ptr.Ptr a)
                                 -> (GHC.Types.IO {VV : (GHC.ForeignPtr.ForeignPtr a) | (0 <= (fplen VV)) && ((fplen VV) == (plen p))})
 Foreign.Concurrent.newForeignPtr : forall a.
                                    p:{VV : (GHC.Ptr.Ptr a) | (0 <= (plen VV))}
                                    -> lq_tmp_db2:(GHC.Types.IO ())
                                    -> (GHC.Types.IO {VV : (GHC.ForeignPtr.ForeignPtr a) | (0 <= (fplen VV)) && ((fplen VV) == (plen p))})
 Foreign.ForeignPtr.Imp.newForeignPtr : forall a.
                                        lq_tmp_db3:(GHC.Ptr.FunPtr ((GHC.Ptr.Ptr a)
                                                                    -> (GHC.Types.IO ())))
                                        -> p:{VV : (GHC.Ptr.Ptr a) | (0 <= (plen VV))}
                                        -> (GHC.Types.IO {VV : (GHC.ForeignPtr.ForeignPtr a) | (0 <= (fplen VV)) && ((fplen VV) == (plen p))})
 Foreign.Marshal.Alloc.allocaBytes : forall a b.
                                     n:{VV : (GHC.Types.Int) | (VV >= 0)}
                                     -> lq_tmp_db0:(lq_tmp_db1:{VV : (GHC.Ptr.Ptr a) | (0 <= (plen VV)) && ((plen VV) == n)}
                                                    -> (GHC.Types.IO b))
                                     -> (GHC.Types.IO b)
 Foreign.Marshal.Array.allocaArray : forall a b.
                                     (Foreign.Storable.Storable a) =>
                                     n:(GHC.Types.Int)
                                     -> lq_tmp_db1:(lq_tmp_db2:{VV : (GHC.Ptr.Ptr a) | (0 <= (plen VV)) && ((plen VV) == n)}
                                                    -> (GHC.Types.IO b))
                                     -> (GHC.Types.IO b)
 Foreign.Storable.poke : forall a.
                         (Foreign.Storable.Storable a) =>
                         lq_tmp_db1:{VV : (GHC.Ptr.Ptr a) | (0 <= (plen VV))}
                         -> lq_tmp_db2:a -> (GHC.Types.IO ())
 Foreign.Storable.peek : forall a.
                         (Foreign.Storable.Storable a) =>
                         p:{VV : (GHC.Ptr.Ptr a) | (0 <= (plen VV))}
                         -> (GHC.Types.IO {VV : a | (VV == (deref p))})
 Foreign.Storable.peekByteOff : forall a.
                                (Foreign.Storable.Storable a) =>
                                forall b.
                                p:(GHC.Ptr.Ptr b)
                                -> lq_tmp_db5:{VV : (GHC.Types.Int) | (0 <= VV) && (VV < (plen p))}
                                -> (GHC.Types.IO a)
 Foreign.Storable.pokeByteOff : forall a.
                                (Foreign.Storable.Storable a) =>
                                forall b.
                                p:(GHC.Ptr.Ptr b)
                                -> lq_tmp_db7:{VV : (GHC.Types.Int) | (0 <= VV) && (VV < (plen p))}
                                -> lq_tmp_db8:a
                                -> (GHC.Types.IO ())
 GHC.Base.map : forall a b.
                lq_tmp_db5:(x:a -> b)
                -> xs:[a] -> {VV : [b] | ((len VV) == (len xs))}
 GHC.Base.$ : forall a b. lq_tmp_db6:(x:a -> b) -> lq_tmp_db7:a -> b
 GHC.Base.id : forall a. x:a -> {VV : a | (VV == x)}
 GHC.ForeignPtr.mallocPlainForeignPtrBytes : forall a.
                                             n:{VV : (GHC.Types.Int) | (VV >= 0)}
                                             -> (GHC.Types.IO {VV : (GHC.ForeignPtr.ForeignPtr a) | (0 <= (fplen VV)) && ((fplen VV) == n)})
 GHC.Ptr.castPtr : forall a b.
                   p:{VV : (GHC.Ptr.Ptr a) | (0 <= (plen VV))}
                   -> {VV : (GHC.Ptr.Ptr b) | (0 <= (plen VV)) && ((plen VV) == (plen p))}
 GHC.Ptr.plusPtr : forall a b.
                   base:{VV : (GHC.Ptr.Ptr a) | (0 <= (plen VV))}
                   -> off:{VV : (GHC.Types.Int) | (VV <= (plen base))}
                   -> {VV : (GHC.Ptr.Ptr b) | (0 <= (plen VV)) && ((pbase VV) == (pbase base)) && ((plen VV) == ((plen base) - off))}
 GHC.Ptr.minusPtr : forall a b.
                    q:{VV : (GHC.Ptr.Ptr a) | (0 <= (plen VV))}
                    -> p:{VV : (GHC.Ptr.Ptr b) | (0 <= (plen VV)) && ((pbase VV) == (pbase q)) && ((plen VV) >= (plen q))}
                    -> {VV : (GHC.Types.Int) | (VV >= 0) && (VV == ((plen p) - (plen q)))}
 GHC.Types.EQ : {VV : (GHC.Types.Ordering) | (VV == (cmp VV))}
 GHC.Types.LT : {VV : (GHC.Types.Ordering) | (VV == (cmp VV))}
 GHC.Types.GT : {VV : (GHC.Types.Ordering) | (VV == (cmp VV))}
 GHC.Types.True : {VV : (GHC.Types.Bool) | ((Prop VV))}
 GHC.Types.False : {VV : (GHC.Types.Bool) | (not (((Prop VV))))}
 Language.Haskell.Liquid.Foreign.intCSize : x:(GHC.Types.Int)
                                            -> {VV : (Foreign.C.Types.CSize) | (VV == x)}
 Language.Haskell.Liquid.Foreign.cSizeInt : x:(Foreign.C.Types.CSize)
                                            -> {VV : (GHC.Types.Int) | (VV == x)}
 Language.Haskell.Liquid.Foreign.mkPtr : forall b.
                                         x:(GHC.Prim.Addr#)
                                         -> {VV : (GHC.Ptr.Ptr b) | ((plen VV) == (addrLen x)) && ((plen VV) >= 0)}
 Language.Haskell.Liquid.Foreign.isNullPtr : forall a.
                                             p:(GHC.Ptr.Ptr a)
                                             -> {VV : (GHC.Types.Bool) | (((Prop VV)) <=> ((isNullPtr p)))}
 Language.Haskell.Liquid.Foreign.fpLen : forall a.
                                         p:(GHC.ForeignPtr.ForeignPtr a)
                                         -> {VV : (GHC.Types.Int) | (VV == (fplen p))}
 Language.Haskell.Liquid.Foreign.pLen : forall a.
                                        p:(GHC.Ptr.Ptr a)
                                        -> {VV : (GHC.Types.Int) | (VV == (plen p))}
 Language.Haskell.Liquid.Foreign.deref : forall a.
                                         p:(GHC.Ptr.Ptr a) -> {VV : a | (VV == (deref p))}
 Language.Haskell.Liquid.Foreign.eqPtr : forall a.
                                         p:{VV : (GHC.Ptr.Ptr a) | (0 <= (plen VV))}
                                         -> q:{VV : (GHC.Ptr.Ptr a) | (0 <= (plen VV)) && ((pbase VV) == (pbase p)) && ((plen VV) <= (plen p))}
                                         -> {VV : (GHC.Types.Bool) | (((Prop VV)) <=> ((plen p) == (plen q)))}
 Language.Haskell.Liquid.Prelude.plus : x:(GHC.Types.Int)
                                        -> y:(GHC.Types.Int)
                                        -> {VV : (GHC.Types.Int) | (VV == (x + y))}
 Language.Haskell.Liquid.Prelude.minus : x:(GHC.Types.Int)
                                         -> y:(GHC.Types.Int)
                                         -> {VV : (GHC.Types.Int) | (VV == (x - y))}
 Language.Haskell.Liquid.Prelude.times : x:(GHC.Types.Int)
                                         -> y:(GHC.Types.Int) -> (GHC.Types.Int)
 Language.Haskell.Liquid.Prelude.eq : x:(GHC.Types.Int)
                                      -> y:(GHC.Types.Int)
                                      -> {VV : (GHC.Types.Bool) | (((Prop VV)) <=> (x == y))}
 Language.Haskell.Liquid.Prelude.neq : x:(GHC.Types.Int)
                                       -> y:(GHC.Types.Int)
                                       -> {VV : (GHC.Types.Bool) | (((Prop VV)) <=> (x /= y))}
 Language.Haskell.Liquid.Prelude.leq : x:(GHC.Types.Int)
                                       -> y:(GHC.Types.Int)
                                       -> {VV : (GHC.Types.Bool) | (((Prop VV)) <=> (x <= y))}
 Language.Haskell.Liquid.Prelude.geq : x:(GHC.Types.Int)
                                       -> y:(GHC.Types.Int)
                                       -> {VV : (GHC.Types.Bool) | (((Prop VV)) <=> (x >= y))}
 Language.Haskell.Liquid.Prelude.lt : x:(GHC.Types.Int)
                                      -> y:(GHC.Types.Int)
                                      -> {VV : (GHC.Types.Bool) | (((Prop VV)) <=> (x < y))}
 Language.Haskell.Liquid.Prelude.gt : x:(GHC.Types.Int)
                                      -> y:(GHC.Types.Int)
                                      -> {VV : (GHC.Types.Bool) | (((Prop VV)) <=> (x > y))}
 Language.Haskell.Liquid.Prelude.liquidAssertB : x:{VV : (GHC.Types.Bool) | ((Prop VV))}
                                                 -> {VV : (GHC.Types.Bool) | ((Prop VV))}
 Language.Haskell.Liquid.Prelude.liquidAssert : forall a.
                                                lq_tmp_db0:{VV : (GHC.Types.Bool) | ((Prop VV))}
                                                -> lq_tmp_db1:a -> a
 Language.Haskell.Liquid.Prelude.liquidAssume : forall a.
                                                b:(GHC.Types.Bool)
                                                -> lq_tmp_db2:a -> {VV : a | ((Prop b))}
 Language.Haskell.Liquid.Prelude.liquidError : forall a.
                                               lq_tmp_db3:{VV : [(GHC.Types.Char)] | (0 == 1)} -> a
 Language.Haskell.Liquid.Prelude.crash : forall a.
                                         x:{VV : (GHC.Types.Bool) | ((Prop VV))} -> a
 Language.Haskell.Liquid.Prelude.isEven : x:(GHC.Types.Int)
                                          -> {VV : (GHC.Types.Bool) | (((Prop VV)) <=> ((x mod 2) == 0))}
 Language.Haskell.Liquid.Prelude.isOdd : x:(GHC.Types.Int)
                                         -> {VV : (GHC.Types.Bool) | (((Prop VV)) <=> ((x mod 2) == 1))}
 Language.Haskell.Liquid.Prelude.safeZipWith : forall a b c.
                                               lq_tmp_db4:(lq_tmp_db5:a -> lq_tmp_db6:b -> c)
                                               -> xs:[a]
                                               -> ys:{VV : [b] | ((len VV) == (len xs))}
                                               -> {VV : [c] | ((len VV) == (len xs))}
 GHC.Base.. : forall b c a <p :: b-> c-> Bool, q :: a-> b-> Bool>.
              f:(x:b -> {VV : c<p x> | true})
              -> g:(y:a -> {VV : b<q y> | true})
              -> x:a
              -> exists [z:{VV : b<q x> | true}].{VV : c<p z> | true}
 GHC.Integer.Type.smallInteger : x:(GHC.Prim.Int#)
                                 -> {VV : (GHC.Integer.Type.Integer) | (VV == (x  :  int))}
 GHC.Num.+ : forall a.
             (GHC.Num.Num a) =>
             x:a -> y:a -> {VV : a | (VV == (x + y))}
 GHC.Num.- : forall a.
             (GHC.Num.Num a) =>
             x:a -> y:a -> {VV : a | (VV == (x - y))}
 GHC.Num.* : forall a.
             (GHC.Num.Num a) =>
             x:a
             -> y:a
             -> {VV : a | (((x >= 0) && (y >= 0)) => ((VV >= x) && (VV >= y))) && (((x > 1) && (y > 1)) => ((VV > x) && (VV > y)))}
 GHC.List.head : forall a. xs:{VV : [a] | ((len VV) > 0)} -> a
 GHC.List.tail : forall a.
                 xs:{VV : [a] | ((len VV) > 0)}
                 -> {VV : [a] | ((len VV) == ((len xs) - 1))}
 GHC.List.last : forall a. xs:{VV : [a] | ((len VV) > 0)} -> a
 GHC.List.init : forall a.
                 xs:{VV : [a] | ((len VV) > 0)}
                 -> {VV : [a] | ((len VV) == ((len xs) - 1))}
 GHC.List.null : forall a.
                 xs:[a]
                 -> {VV : (GHC.Types.Bool) | (((Prop VV)) <=> ((len xs) == 0))}
 GHC.List.length : forall a.
                   xs:[a] -> {VV : (GHC.Types.Int) | (VV == (len xs))}
 GHC.List.filter : forall a.
                   lq_tmp_db0:(lq_tmp_db1:a -> (GHC.Types.Bool))
                   -> xs:[a] -> {VV : [a] | ((len VV) <= (len xs))}
 GHC.List.scanl : forall a b.
                  lq_tmp_db2:(lq_tmp_db3:a -> lq_tmp_db4:b -> a)
                  -> lq_tmp_db5:a
                  -> xs:[b]
                  -> {VV : [a] | ((len VV) == (1 + (len xs)))}
 GHC.List.scanl1 : forall a.
                   lq_tmp_db6:(lq_tmp_db7:a -> lq_tmp_db8:a -> a)
                   -> xs:{VV : [a] | ((len VV) > 0)}
                   -> {VV : [a] | ((len VV) == (len xs))}
 GHC.List.foldr1 : forall a.
                   lq_tmp_db9:(lq_tmp_db10:a -> lq_tmp_db11:a -> a)
                   -> xs:{VV : [a] | ((len VV) > 0)} -> a
 GHC.List.scanr : forall a b.
                  lq_tmp_db12:(lq_tmp_db13:a -> lq_tmp_db14:b -> b)
                  -> lq_tmp_db15:b
                  -> xs:[a]
                  -> {VV : [b] | ((len VV) == (1 + (len xs)))}
 GHC.List.scanr1 : forall a.
                   lq_tmp_db16:(lq_tmp_db17:a -> lq_tmp_db18:a -> a)
                   -> xs:{VV : [a] | ((len VV) > 0)}
                   -> {VV : [a] | ((len VV) == (len xs))}
 GHC.List.replicate : forall a.
                      n:(GHC.Types.Int)
                      -> x:a -> {v : [{VV : a | (VV == x)}] | ((len v) == n)}
 GHC.List.cycle : forall a.
                  lq_tmp_db19:{VV : [a] | ((len VV) > 0)} -> [a]
 GHC.List.takeWhile : forall a.
                      lq_tmp_db20:(lq_tmp_db21:a -> (GHC.Types.Bool))
                      -> xs:[a] -> {VV : [a] | ((len VV) <= (len xs))}
 GHC.List.dropWhile : forall a.
                      lq_tmp_db22:(lq_tmp_db23:a -> (GHC.Types.Bool))
                      -> xs:[a] -> {VV : [a] | ((len VV) <= (len xs))}
 GHC.List.take : forall a.
                 n:{VV : (GHC.Types.Int) | (VV >= 0)}
                 -> xs:[a]
                 -> {VV : [a] | ((len VV) == (if ((len xs) < n) then (len xs) else n))}
 GHC.List.drop : forall a.
                 n:{VV : (GHC.Types.Int) | (VV >= 0)}
                 -> xs:[a]
                 -> {VV : [a] | ((len VV) == (if ((len xs) < n) then 0 else ((len xs) - n)))}
 GHC.List.reverse : forall a.
                    xs:[a] -> {VV : [a] | ((len VV) == (len xs))}
 GHC.List.!! : forall a.
               xs:[a]
               -> lq_tmp_db26:{VV : (GHC.Types.Int) | (0 <= VV) && (VV < (len xs))}
               -> a
 GHC.List.errorEmptyList : forall a.
                           lq_tmp_db30:{VV : [(GHC.Types.Char)] | (0 == 1)} -> a
 GHC.List.span : forall a.
                 lq_tmp_db24:(lq_tmp_db25:a -> (GHC.Types.Bool))
                 -> xs:[a]
                 -> ({VV : [a] | ((len VV) <= (len xs))}, {VV : [a] | ((len VV) <= (len xs))})
 GHC.List.zipWith : forall a b c.
                    lq_tmp_db27:(lq_tmp_db28:a -> lq_tmp_db29:b -> c)
                    -> xs:[a]
                    -> ys:[b]
                    -> {VV : [c] | ((len VV) <= (len xs)) && ((len VV) <= (len ys))}
 GHC.Types.I# : x:(GHC.Prim.Int#)
                -> {VV : (GHC.Types.Int) | (VV == (x  :  int))}
 GHC.Prim.+# : x:(GHC.Prim.Int#)
               -> y:(GHC.Prim.Int#) -> {VV : (GHC.Prim.Int#) | (VV == (x + y))}
 GHC.Prim.-# : x:(GHC.Prim.Int#)
               -> y:(GHC.Prim.Int#) -> {VV : (GHC.Prim.Int#) | (VV == (x - y))}
 GHC.Prim.==# : x:(GHC.Prim.Int#)
                -> y:(GHC.Prim.Int#)
                -> {VV : (GHC.Types.Bool) | (((Prop VV)) <=> (x == y))}
 GHC.Prim.>=# : x:(GHC.Prim.Int#)
                -> y:(GHC.Prim.Int#)
                -> {VV : (GHC.Types.Bool) | (((Prop VV)) <=> (x >= y))}
 GHC.Prim.<=# : x:(GHC.Prim.Int#)
                -> y:(GHC.Prim.Int#)
                -> {VV : (GHC.Types.Bool) | (((Prop VV)) <=> (x <= y))}
 GHC.Prim.<# : x:(GHC.Prim.Int#)
               -> y:(GHC.Prim.Int#)
               -> {VV : (GHC.Types.Bool) | (((Prop VV)) <=> (x < y))}
 GHC.Prim.># : x:(GHC.Prim.Int#)
               -> y:(GHC.Prim.Int#)
               -> {VV : (GHC.Types.Bool) | (((Prop VV)) <=> (x > y))}
 GHC.Classes.not : x:(GHC.Types.Bool)
                   -> {VV : (GHC.Types.Bool) | (((Prop VV)) <=> (not (((Prop x)))))}
 GHC.Classes.&& : x:(GHC.Types.Bool)
                  -> y:(GHC.Types.Bool)
                  -> {VV : (GHC.Types.Bool) | (((Prop VV)) <=> (((Prop x)) && ((Prop y))))}
 GHC.Classes.|| : x:(GHC.Types.Bool)
                  -> y:(GHC.Types.Bool)
                  -> {VV : (GHC.Types.Bool) | (((Prop VV)) <=> (((Prop x)) || ((Prop y))))}
 GHC.Classes.== : forall a.
                  (GHC.Classes.Eq a) =>
                  x:a -> y:a -> {VV : (GHC.Types.Bool) | (((Prop VV)) <=> (x == y))}
 GHC.Classes./= : forall a.
                  (GHC.Classes.Eq a) =>
                  x:a -> y:a -> {VV : (GHC.Types.Bool) | (((Prop VV)) <=> (x /= y))}
 GHC.Classes.> : forall a.
                 (GHC.Classes.Ord a) =>
                 x:a -> y:a -> {VV : (GHC.Types.Bool) | (((Prop VV)) <=> (x > y))}
 GHC.Classes.>= : forall a.
                  (GHC.Classes.Ord a) =>
                  x:a -> y:a -> {VV : (GHC.Types.Bool) | (((Prop VV)) <=> (x >= y))}
 GHC.Classes.< : forall a.
                 (GHC.Classes.Ord a) =>
                 x:a -> y:a -> {VV : (GHC.Types.Bool) | (((Prop VV)) <=> (x < y))}
 GHC.Classes.<= : forall a.
                  (GHC.Classes.Ord a) =>
                  x:a -> y:a -> {VV : (GHC.Types.Bool) | (((Prop VV)) <=> (x <= y))}
 GHC.Classes.compare : forall a.
                       (GHC.Classes.Ord a) =>
                       x:a
                       -> y:a
                       -> {VV : (GHC.Types.Ordering) | ((VV == GHC.Types.EQ#6U) <=> (x == y)) && ((VV == GHC.Types.LT#6S) <=> (x < y)) && ((VV == GHC.Types.GT#6W) <=> (x > y))}
 GHC.Classes.max : forall a.
                   (GHC.Classes.Ord a) =>
                   x:a -> y:a -> {VV : a | (VV == (if (x > y) then x else y))}
 GHC.Classes.min : forall a.
                   (GHC.Classes.Ord a) =>
                   x:a -> y:a -> {VV : a | (VV == (if (x < y) then x else y))}
 GHC.Num.fromInteger : forall a.
                       (GHC.Num.Num a) =>
                       x:(GHC.Integer.Type.Integer) -> {VV : a | (VV == x)}
 GHC.Real.div : forall a.
                (GHC.Real.Integral a) =>
                x:a
                -> y:a
                -> {VV : a | (VV == (x / y)) && (((x >= 0) && (y >= 0)) => (VV >= 0)) && (((x >= 0) && (y >= 1)) => (VV <= x))}
 GHC.Real.quotRem : forall a.
                    (GHC.Real.Integral a) =>
                    x:a
                    -> y:a
                    -> ({VV : a | (VV == (x / y)) && (((x >= 0) && (y >= 0)) => (VV >= 0)) && (((x >= 0) && (y >= 1)) => (VV <= x))}, {VV : a | (VV >= 0) && (VV < y)})
 GHC.Real./ : forall a.
              (GHC.Real.Fractional a) =>
              x:a -> y:{VV : a | (VV /= 0)} -> {VV : a | (VV == (x / y))}
 GHC.Real.toInteger : forall a.
                      (GHC.Real.Integral a) =>
                      x:a -> {VV : (GHC.Integer.Type.Integer) | (VV == x)}
 GHC.Real.fromIntegral : forall a b.
                         (GHC.Real.Integral a, GHC.Num.Num b) =>
                         x:a -> {VV : b | (VV == x)}
 GHC.IO.Handle.Text.hGetBuf : forall a.
                              lq_tmp_db0:(GHC.IO.Handle.Types.Handle)
                              -> lq_tmp_db1:(GHC.Ptr.Ptr a)
                              -> n:{VV : (GHC.Types.Int) | (VV >= 0)}
                              -> (GHC.Types.IO {VV : (GHC.Types.Int) | (VV >= 0) && (VV <= n)})
 GHC.IO.Handle.Text.hGetBufNonBlocking : forall a.
                                         lq_tmp_db2:(GHC.IO.Handle.Types.Handle)
                                         -> lq_tmp_db3:(GHC.Ptr.Ptr a)
                                         -> n:{VV : (GHC.Types.Int) | (VV >= 0)}
                                         -> (GHC.Types.IO {VV : (GHC.Types.Int) | (VV >= 0) && (VV <= n)})
 GHC.IO.Handle.hFileSize : lq_tmp_db4:(GHC.IO.Handle.Types.Handle)
                           -> (GHC.Types.IO {VV : (GHC.Integer.Type.Integer) | (VV >= 0)})]
******* DataCon Specifications (Measure) ****
[Data.Text.Fusion.Size.Exact : n:(GHC.Types.Int)
                               -> {VV : (Data.Text.Fusion.Size.Size) | (((isUnknown VV)) <=> false) && ((getSize VV) == n)}
 GHC.Tuple.(,,,,,,) : forall a
                             b
                             c
                             d
                             e
                             f
                             g <p2 :: a-> b-> Bool, p3 :: b-> a-> c-> Bool, p4 :: c-> b-> a-> d-> Bool, p5 :: d-> c-> b-> a-> e-> Bool, p6 :: e-> d-> c-> b-> a-> f-> Bool, p7 :: f-> e-> d-> c-> b-> a-> g-> Bool>.
                      fix#x1_#40##44##44##44##44##44##44##41#:a
                      -> fix#x2_#40##44##44##44##44##44##44##41#:{VV : b<p2 fix#x1_#40##44##44##44##44##44##44##41#> | true}
                      -> fix#x3_#40##44##44##44##44##44##44##41#:{VV : c<p3 fix#x2_#40##44##44##44##44##44##44##41# fix#x1_#40##44##44##44##44##44##44##41#> | true}
                      -> fix#x4_#40##44##44##44##44##44##44##41#:{VV : d<p4 fix#x3_#40##44##44##44##44##44##44##41# fix#x2_#40##44##44##44##44##44##44##41# fix#x1_#40##44##44##44##44##44##44##41#> | true}
                      -> fix#x5_#40##44##44##44##44##44##44##41#:{VV : e<p5 fix#x4_#40##44##44##44##44##44##44##41# fix#x3_#40##44##44##44##44##44##44##41# fix#x2_#40##44##44##44##44##44##44##41# fix#x1_#40##44##44##44##44##44##44##41#> | true}
                      -> fix#x6_#40##44##44##44##44##44##44##41#:{VV : f<p6 fix#x5_#40##44##44##44##44##44##44##41# fix#x4_#40##44##44##44##44##44##44##41# fix#x3_#40##44##44##44##44##44##44##41# fix#x2_#40##44##44##44##44##44##44##41# fix#x1_#40##44##44##44##44##44##44##41#> | true}
                      -> fix#x7_#40##44##44##44##44##44##44##41#:{VV : g<p7 fix#x6_#40##44##44##44##44##44##44##41# fix#x5_#40##44##44##44##44##44##44##41# fix#x4_#40##44##44##44##44##44##44##41# fix#x3_#40##44##44##44##44##44##44##41# fix#x2_#40##44##44##44##44##44##44##41# fix#x1_#40##44##44##44##44##44##44##41#> | true}
                      -> (a, b, c, d, e, f, g)<p2, p3, p4, p5, p6, p7>
 Data.ByteString.Lazy.Internal.Chunk : b:{VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) > 0)}
                                       -> bs:(Data.ByteString.Lazy.Internal.ByteString)
                                       -> {VV : (Data.ByteString.Lazy.Internal.ByteString) | ((lbLength VV) == ((bLength b) + (lbLength bs)))}
 Data.ByteString.Fusion.$WJustS : forall a.
                                  x:a
                                  -> {VV : (Data.ByteString.Fusion.MaybeS a) | (((isJustS VV)) <=> true)}
 Data.Text.Fusion.Size.$WExact : n:(GHC.Types.Int)
                                 -> {VV : (Data.Text.Fusion.Size.Size) | (((isUnknown VV)) <=> false) && ((getSize VV) == n)}
 Data.ByteString.Lazy.Internal.$WChunk : b:{VV : (Data.ByteString.Internal.ByteString) | ((bLength VV) > 0)}
                                         -> bs:(Data.ByteString.Lazy.Internal.ByteString)
                                         -> {VV : (Data.ByteString.Lazy.Internal.ByteString) | ((lbLength VV) == ((bLength b) + (lbLength bs)))}
 Data.ByteString.Fusion.NothingS : forall a.
                                   {VV : (Data.ByteString.Fusion.MaybeS a) | (((isJustS VV)) <=> false)}
 GHC.Tuple.(,,,,,) : forall a
                            b
                            c
                            d
                            e
                            f <p2 :: a-> b-> Bool, p3 :: b-> a-> c-> Bool, p4 :: c-> b-> a-> d-> Bool, p5 :: d-> c-> b-> a-> e-> Bool, p6 :: e-> d-> c-> b-> a-> f-> Bool>.
                     fix#x1_#40##44##44##44##44##44##41#:a
                     -> fix#x2_#40##44##44##44##44##44##41#:{VV : b<p2 fix#x1_#40##44##44##44##44##44##41#> | true}
                     -> fix#x3_#40##44##44##44##44##44##41#:{VV : c<p3 fix#x2_#40##44##44##44##44##44##41# fix#x1_#40##44##44##44##44##44##41#> | true}
                     -> fix#x4_#40##44##44##44##44##44##41#:{VV : d<p4 fix#x3_#40##44##44##44##44##44##41# fix#x2_#40##44##44##44##44##44##41# fix#x1_#40##44##44##44##44##44##41#> | true}
                     -> fix#x5_#40##44##44##44##44##44##41#:{VV : e<p5 fix#x4_#40##44##44##44##44##44##41# fix#x3_#40##44##44##44##44##44##41# fix#x2_#40##44##44##44##44##44##41# fix#x1_#40##44##44##44##44##44##41#> | true}
                     -> fix#x6_#40##44##44##44##44##44##41#:{VV : f<p6 fix#x5_#40##44##44##44##44##44##41# fix#x4_#40##44##44##44##44##44##41# fix#x3_#40##44##44##44##44##44##41# fix#x2_#40##44##44##44##44##44##41# fix#x1_#40##44##44##44##44##44##41#> | true}
                     -> (a, b, c, d, e, f)<p2, p3, p4, p5, p6>
 Data.ByteString.Lazy.Internal.Empty : {VV : (Data.ByteString.Lazy.Internal.ByteString) | ((lbLength VV) == 0)}
 GHC.Tuple.(,,,,) : forall a
                           b
                           c
                           d
                           e <p2 :: a-> b-> Bool, p3 :: b-> a-> c-> Bool, p4 :: c-> b-> a-> d-> Bool, p5 :: d-> c-> b-> a-> e-> Bool>.
                    fix#x1_#40##44##44##44##44##41#:a
                    -> fix#x2_#40##44##44##44##44##41#:{VV : b<p2 fix#x1_#40##44##44##44##44##41#> | true}
                    -> fix#x3_#40##44##44##44##44##41#:{VV : c<p3 fix#x2_#40##44##44##44##44##41# fix#x1_#40##44##44##44##44##41#> | true}
                    -> fix#x4_#40##44##44##44##44##41#:{VV : d<p4 fix#x3_#40##44##44##44##44##41# fix#x2_#40##44##44##44##44##41# fix#x1_#40##44##44##44##44##41#> | true}
                    -> fix#x5_#40##44##44##44##44##41#:{VV : e<p5 fix#x4_#40##44##44##44##44##41# fix#x3_#40##44##44##44##44##41# fix#x2_#40##44##44##44##44##41# fix#x1_#40##44##44##44##44##41#> | true}
                    -> (a, b, c, d, e)<p2, p3, p4, p5>
 Data.Maybe.Just : forall a.
                   x:a
                   -> {VV : (Data.Maybe.Maybe a) | ((fromJust VV) == x) && (((isJust VV)) <=> true)}
 Data.Text.Unsafe.Iter : c:(GHC.Types.Char)
                         -> d:(GHC.Types.Int)
                         -> {VV : (Data.Text.Unsafe.Iter) | ((iter_d VV) == d)}
 Data.ByteString.Fusion.:*: : forall a b <p :: a-> b-> Bool>.
                              x:a
                              -> y:{VV : b<p x> | true}
                              -> {VV : (Data.ByteString.Fusion.PairS <p> a b) | ((psnd VV) == y) && ((pfst VV) == x)}
 Data.Text.Unsafe.$WIter : c:(GHC.Types.Char)
                           -> d:(GHC.Types.Int)
                           -> {VV : (Data.Text.Unsafe.Iter) | ((iter_d VV) == d)}
 GHC.Tuple.(,,,) : forall a
                          b
                          c
                          d <p2 :: a-> b-> Bool, p3 :: b-> a-> c-> Bool, p4 :: c-> b-> a-> d-> Bool>.
                   fix#x1_#40##44##44##44##41#:a
                   -> fix#x2_#40##44##44##44##41#:{VV : b<p2 fix#x1_#40##44##44##44##41#> | true}
                   -> fix#x3_#40##44##44##44##41#:{VV : c<p3 fix#x2_#40##44##44##44##41# fix#x1_#40##44##44##44##41#> | true}
                   -> fix#x4_#40##44##44##44##41#:{VV : d<p4 fix#x3_#40##44##44##44##41# fix#x2_#40##44##44##44##41# fix#x1_#40##44##44##44##41#> | true}
                   -> (a, b, c, d)<p2, p3, p4>
 Data.Maybe.Nothing : forall a.
                      {VV : (Data.Maybe.Maybe a) | (((isJust VV)) <=> false)}
 Data.ByteString.Internal.PS : p:(GHC.ForeignPtr.ForeignPtr (GHC.Word.Word8))
                               -> o:{VV : (GHC.Types.Int) | (VV >= 0) && (VV <= (fplen p))}
                               -> l:{VV : (GHC.Types.Int) | (VV >= 0) && ((o + VV) <= (fplen p))}
                               -> {VV : (Data.ByteString.Internal.ByteString) | ((bPayload VV) == p) && ((bOffset VV) == o) && ((bLength VV) == l)}
 Data.ByteString.Fusion.$W:*: : forall a b <p :: a-> b-> Bool>.
                                x:a
                                -> y:{VV : b<p x> | true}
                                -> {VV : (Data.ByteString.Fusion.PairS <p> a b) | ((psnd VV) == y) && ((pfst VV) == x)}
 Data.Text.Array.MArray : forall s.
                          maBA:(GHC.Prim.MutableByteArray# s)
                          -> maLen:{VV : (GHC.Types.Int) | (VV >= 0)}
                          -> {VV : (Data.Text.Array.MArray s) | ((malen VV) == maLen)}
 Data.ByteString.Internal.$WPS : p:(GHC.ForeignPtr.ForeignPtr (GHC.Word.Word8))
                                 -> o:{VV : (GHC.Types.Int) | (VV >= 0) && (VV <= (fplen p))}
                                 -> l:{VV : (GHC.Types.Int) | (VV >= 0) && ((o + VV) <= (fplen p))}
                                 -> {VV : (Data.ByteString.Internal.ByteString) | ((bPayload VV) == p) && ((bOffset VV) == o) && ((bLength VV) == l)}
 GHC.Types.[] : forall a <p :: a-> a-> Bool>.
                {VV : [a]<p> | ((bLengths VV) == 0) && ((lbLengths VV) == 0) && ((sumLens VV) == 0) && ((sum_tlengths VV) == 0) && ((sum_tlens VV) == 0) && (((null VV)) <=> true) && ((len VV) == 0)}
 GHC.Tuple.(,,) : forall a
                         b
                         c <p2 :: a-> b-> Bool, p3 :: b-> a-> c-> Bool>.
                  a:a
                  -> b:{VV : b<p2 a> | true}
                  -> c:{VV : c<p3 b a> | true}
                  -> {VV : (a, b, c)<p2, p3> | ((ttrd VV) == c) && ((tsnd VV) == b) && ((tfst VV) == a)}
 Data.Text.Array.$WMArray : forall s.
                            maBA:(GHC.Prim.MutableByteArray# s)
                            -> maLen:{VV : (GHC.Types.Int) | (VV >= 0)}
                            -> {VV : (Data.Text.Array.MArray s) | ((malen VV) == maLen)}
 GHC.Tuple.(,) : forall a b <p2 :: a-> b-> Bool>.
                 c:a
                 -> n:{VV : b<p2 c> | true}
                 -> {VV : (a, b)<p2> | ((cStringLen VV) == n) && ((snd VV) == n) && ((fst VV) == c)}
 GHC.Types.: : forall a <p :: a-> a-> Bool>.
               x:a
               -> xs:[{VV : a<p x> | true}]<p>
               -> {VV : [a]<p> | ((bLengths VV) == ((bLength x) + (bLengths xs))) && ((lbLengths VV) == ((lbLength x) + (lbLengths xs))) && ((sumLens VV) == ((len x) + (sumLens xs))) && ((sum_tlengths VV) == ((tlength x) + (sum_tlengths xs))) && ((sum_tlens VV) == ((tlen x) + (sum_tlens xs))) && (((null VV)) <=> false) && ((len VV) == (1 + (len xs)))}
 Data.Text.Internal.Text : a:(Data.Text.Array.Array)
                           -> o:{VV : (GHC.Types.Int) | (VV >= 0) && (VV <= (alen a))}
                           -> l:{VV : (GHC.Types.Int) | (VV >= 0) && ((VV + o) <= (alen a))}
                           -> {VV : (Data.Text.Internal.Text) | ((tlength VV) == (numchars a o l)) && ((tlen VV) == l) && ((toff VV) == o) && ((tarr VV) == a)}
 Data.Text.Internal.$WText : a:(Data.Text.Array.Array)
                             -> o:{VV : (GHC.Types.Int) | (VV >= 0) && (VV <= (alen a))}
                             -> l:{VV : (GHC.Types.Int) | (VV >= 0) && ((VV + o) <= (alen a))}
                             -> {VV : (Data.Text.Internal.Text) | ((tlength VV) == (numchars a o l)) && ((tlen VV) == l) && ((toff VV) == o) && ((tarr VV) == a)}
 Data.Text.Fusion.Size.Unknown : {VV : (Data.Text.Fusion.Size.Size) | (((isUnknown VV)) <=> true)}
 GHC.Tuple.() : forall a. fix#x1_#40##41#:a -> (a)
 Data.Text.Array.Array : aBA:(GHC.Prim.ByteArray#)
                         -> aLen:{VV : (GHC.Types.Int) | (VV >= 0)}
                         -> {VV : (Data.Text.Array.Array) | ((alen VV) == aLen)}
 GHC.Types.GT : {VV : (GHC.Types.Ordering) | ((cmp VV) == GHC.Types.GT#6W)}
 Data.Text.Array.$WArray : aBA:(GHC.Prim.ByteArray#)
                           -> aLen:{VV : (GHC.Types.Int) | (VV >= 0)}
                           -> {VV : (Data.Text.Array.Array) | ((alen VV) == aLen)}
 Data.Text.Fusion.Size.Max : n:(GHC.Types.Int)
                             -> {VV : (Data.Text.Fusion.Size.Size) | (((isUnknown VV)) <=> false) && ((getSize VV) == n)}
 GHC.Types.LT : {VV : (GHC.Types.Ordering) | ((cmp VV) == GHC.Types.LT#6S)}
 Data.Text.Fusion.Size.$WMax : n:(GHC.Types.Int)
                               -> {VV : (Data.Text.Fusion.Size.Size) | (((isUnknown VV)) <=> false) && ((getSize VV) == n)}
 GHC.Types.EQ : {VV : (GHC.Types.Ordering) | ((cmp VV) == GHC.Types.EQ#6U)}
 Data.ByteString.Fusion.JustS : forall a.
                                x:a
                                -> {VV : (Data.ByteString.Fusion.MaybeS a) | (((isJustS VV)) <=> true)}]
******* Measure Specifications **************
[isNullPtr : forall a. lq_tmp_db2:(GHC.Ptr.Ptr a) -> (Prop)
 pbase : forall a. lq_tmp_db0:(GHC.Ptr.Ptr a) -> (GHC.Types.Int)
 isUnknown : lq_tmp_db1:(Data.Text.Fusion.Size.Size) -> (Prop)
 pfst : forall a b.
        lq_tmp_db1:(Data.ByteString.Fusion.PairS a b) -> a
 toff : lq_tmp_db1:(Data.Text.Internal.Text) -> (GHC.Types.Int)
 ord : lq_tmp_db0:(GHC.Types.Char) -> (GHC.Types.Int)
 sumLens : forall a. lq_tmp_db7:[[a]] -> (GHC.Types.Int)
 tlength : lq_tmp_db4:(Data.Text.Internal.Text) -> (GHC.Types.Int)
 ttrd : forall a b c. lq_tmp_db38:(a, b, c) -> c
 lbLength : lq_tmp_db0:(Data.ByteString.Lazy.Internal.ByteString)
            -> (GHC.Types.Int)
 malen : forall s.
         lq_tmp_db4:(Data.Text.Array.MArray s) -> (GHC.Types.Int)
 cStringLen : lq_tmp_db4:((GHC.Ptr.Ptr (Foreign.C.Types.CChar)), (GHC.Types.Int))
              -> (GHC.Types.Int)
 bOffset : lq_tmp_db1:(Data.ByteString.Internal.ByteString)
           -> (GHC.Types.Int)
 bLengths : lq_tmp_db5:[(Data.ByteString.Internal.ByteString)]
            -> (GHC.Types.Int)
 tarr : lq_tmp_db0:(Data.Text.Internal.Text)
        -> (Data.Text.Array.Array)
 addrLen : lq_tmp_db0:(GHC.Prim.Addr#) -> (GHC.Types.Int)
 numchars : lq_tmp_db1:(Data.Text.Array.Array)
            -> lq_tmp_db2:(GHC.Types.Int)
            -> lq_tmp_db3:(GHC.Types.Int)
            -> (GHC.Types.Int)
 tfst : forall a b c. lq_tmp_db36:(a, b, c) -> a
 null : forall a. lq_tmp_db2:[a] -> (Prop)
 Prop : lq_tmp_db0:(GHC.Types.Bool) -> (Prop)
 tlen : lq_tmp_db2:(Data.Text.Internal.Text) -> (GHC.Types.Int)
 fplen : forall a.
         lq_tmp_db0:(GHC.ForeignPtr.ForeignPtr a) -> (GHC.Types.Int)
 psnd : forall a b.
        lq_tmp_db2:(Data.ByteString.Fusion.PairS a b) -> b
 getSize : lq_tmp_db0:(Data.Text.Fusion.Size.Size)
           -> (GHC.Types.Int)
 slen : forall a.
        lq_tmp_db0:(Data.Text.Fusion.Internal.Stream a) -> (GHC.Types.Int)
 lbLengths : lq_tmp_db1:[(Data.ByteString.Lazy.Internal.ByteString)]
             -> (GHC.Types.Int)
 len : forall a. lq_tmp_db1:[a] -> (GHC.Types.Int)
 iter_d : lq_tmp_db1:(Data.Text.Unsafe.Iter) -> (GHC.Types.Int)
 sum_tlengths : lq_tmp_db9:[(Data.Text.Internal.Text)]
                -> (GHC.Types.Int)
 snd : forall a b. lq_tmp_db4:(a, b) -> b
 alen : lq_tmp_db0:(Data.Text.Array.Array) -> (GHC.Types.Int)
 cmp : lq_tmp_db0:(GHC.Types.Ordering) -> (GHC.Types.Ordering)
 deref : forall a. lq_tmp_db3:(GHC.Ptr.Ptr a) -> a
 sum_tlens : lq_tmp_db3:[(Data.Text.Internal.Text)]
             -> (GHC.Types.Int)
 tsnd : forall a b c. lq_tmp_db37:(a, b, c) -> b
 fst : forall a b. lq_tmp_db3:(a, b) -> a
 plen : forall a. lq_tmp_db1:(GHC.Ptr.Ptr a) -> (GHC.Types.Int)
 bLength : lq_tmp_db0:(Data.ByteString.Internal.ByteString)
           -> (GHC.Types.Int)
 bPayload : lq_tmp_db2:(Data.ByteString.Internal.ByteString)
            -> (GHC.ForeignPtr.ForeignPtr (GHC.Word.Word8))
 isJustS : forall a.
           lq_tmp_db3:(Data.ByteString.Fusion.MaybeS a) -> (Prop)
 isJust : forall a. lq_tmp_db0:(Data.Maybe.Maybe a) -> (Prop)
 fromJust : forall a. lq_tmp_db1:(Data.Maybe.Maybe a) -> a
 GHC.Types.False#68 : (GHC.Types.Bool)
 GHC.Types.True#6u : (GHC.Types.Bool)]
*************** Core Bindings ***************
[Data.Text.Encoding.c_decode_utf8
   :: forall s.
      Data.Text.Array.MArray s
      -> GHC.Ptr.Ptr Foreign.C.Types.CSize
      -> GHC.Ptr.Ptr GHC.Word.Word8
      -> GHC.Ptr.Ptr GHC.Word.Word8
      -> GHC.Types.IO (GHC.Ptr.Ptr GHC.Word.Word8)
 [LclIdX]
 Data.Text.Encoding.c_decode_utf8 =
   \ (@ s) ->
     GHC.Err.undefined
       @ (Data.Text.Array.MArray s
          -> GHC.Ptr.Ptr Foreign.C.Types.CSize
          -> GHC.Ptr.Ptr GHC.Word.Word8
          -> GHC.Ptr.Ptr GHC.Word.Word8
          -> GHC.Types.IO (GHC.Ptr.Ptr GHC.Word.Word8)),
 Data.Text.Encoding.encodeUtf32BE [InlPrag=INLINE (sat-args=1)]
   :: Data.Text.Internal.Text -> Data.ByteString.Internal.ByteString
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=1, Value=True,
          ConLike=True, WorkFree=True, Expandable=True,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= \ (txt [Occ=OnceL] :: Data.Text.Internal.Text) ->
                  scc<CAF>
                  (scc<CAF> Data.Text.Encoding.Fusion.unstream)
                    (scc<CAF>
                     scc<CAF>
                     (scc<CAF> Data.Text.Encoding.Fusion.Common.restreamUtf32BE)
                       (scc<CAF>
                        scc<CAF> (scc<CAF> Data.Text.Fusion.stream) (scc<CAF> txt)))}]
 Data.Text.Encoding.encodeUtf32BE =
   \ (eta_B1 :: Data.Text.Internal.Text) ->
     (\ (txt :: Data.Text.Internal.Text) ->
        let {
          lq_anf__dhhE :: Data.Text.Fusion.Internal.Stream GHC.Types.Char
          [LclId]
          lq_anf__dhhE = Data.Text.Fusion.stream txt } in
        let {
          lq_anf__dhhF :: Data.Text.Fusion.Internal.Stream GHC.Word.Word8
          [LclId]
          lq_anf__dhhF =
            Data.Text.Encoding.Fusion.Common.restreamUtf32BE lq_anf__dhhE } in
        Data.Text.Encoding.Fusion.unstream lq_anf__dhhF)
       eta_B1,
 Data.Text.Encoding.encodeUtf32LE [InlPrag=INLINE (sat-args=1)]
   :: Data.Text.Internal.Text -> Data.ByteString.Internal.ByteString
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=1, Value=True,
          ConLike=True, WorkFree=True, Expandable=True,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= \ (txt [Occ=OnceL] :: Data.Text.Internal.Text) ->
                  scc<CAF>
                  (scc<CAF> Data.Text.Encoding.Fusion.unstream)
                    (scc<CAF>
                     scc<CAF>
                     (scc<CAF> Data.Text.Encoding.Fusion.Common.restreamUtf32LE)
                       (scc<CAF>
                        scc<CAF> (scc<CAF> Data.Text.Fusion.stream) (scc<CAF> txt)))}]
 Data.Text.Encoding.encodeUtf32LE =
   \ (eta_B1 :: Data.Text.Internal.Text) ->
     (\ (txt :: Data.Text.Internal.Text) ->
        let {
          lq_anf__dhhG :: Data.Text.Fusion.Internal.Stream GHC.Types.Char
          [LclId]
          lq_anf__dhhG = Data.Text.Fusion.stream txt } in
        let {
          lq_anf__dhhH :: Data.Text.Fusion.Internal.Stream GHC.Word.Word8
          [LclId]
          lq_anf__dhhH =
            Data.Text.Encoding.Fusion.Common.restreamUtf32LE lq_anf__dhhG } in
        Data.Text.Encoding.Fusion.unstream lq_anf__dhhH)
       eta_B1,
 Data.Text.Encoding.decodeUtf32BEWith [InlPrag=INLINE (sat-args=2)]
   :: Data.Text.Encoding.Error.OnDecodeError
      -> Data.ByteString.Internal.ByteString -> Data.Text.Internal.Text
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=2, Value=True,
          ConLike=True, WorkFree=True, Expandable=True,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= \ (onErr [Occ=OnceL]
                     :: Data.Text.Encoding.Error.OnDecodeError)
                  (bs [Occ=OnceL] :: Data.ByteString.Internal.ByteString) ->
                  scc<CAF>
                  (scc<CAF> Data.Text.Fusion.unstream)
                    (scc<CAF>
                     scc<CAF>
                     (scc<CAF>
                      (scc<CAF> Data.Text.Encoding.Fusion.streamUtf32BE)
                        (scc<CAF> onErr))
                       (scc<CAF> bs))}]
 Data.Text.Encoding.decodeUtf32BEWith =
   \ (eta_B2 :: Data.Text.Encoding.Error.OnDecodeError)
     (eta_B1 :: Data.ByteString.Internal.ByteString) ->
     (\ (onErr :: Data.Text.Encoding.Error.OnDecodeError)
        (bs :: Data.ByteString.Internal.ByteString) ->
        let {
          lq_anf__dhhI :: Data.Text.Fusion.Internal.Stream GHC.Types.Char
          [LclId]
          lq_anf__dhhI =
            Data.Text.Encoding.Fusion.streamUtf32BE onErr bs } in
        Data.Text.Fusion.unstream lq_anf__dhhI)
       eta_B2 eta_B1,
 Data.Text.Encoding.decodeUtf32BE [InlPrag=INLINE (sat-args=0)]
   :: Data.ByteString.Internal.ByteString -> Data.Text.Internal.Text
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=0, Value=False,
          ConLike=False, WorkFree=False, Expandable=False,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= scc<CAF>
                (scc<CAF> Data.Text.Encoding.decodeUtf32BEWith)
                  (scc<CAF> Data.Text.Encoding.Error.strictDecode)}]
 Data.Text.Encoding.decodeUtf32BE =
   Data.Text.Encoding.decodeUtf32BEWith
     Data.Text.Encoding.Error.strictDecode,
 Data.Text.Encoding.decodeUtf32LEWith [InlPrag=INLINE (sat-args=2)]
   :: Data.Text.Encoding.Error.OnDecodeError
      -> Data.ByteString.Internal.ByteString -> Data.Text.Internal.Text
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=2, Value=True,
          ConLike=True, WorkFree=True, Expandable=True,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= \ (onErr [Occ=OnceL]
                     :: Data.Text.Encoding.Error.OnDecodeError)
                  (bs [Occ=OnceL] :: Data.ByteString.Internal.ByteString) ->
                  scc<CAF>
                  (scc<CAF> Data.Text.Fusion.unstream)
                    (scc<CAF>
                     scc<CAF>
                     (scc<CAF>
                      (scc<CAF> Data.Text.Encoding.Fusion.streamUtf32LE)
                        (scc<CAF> onErr))
                       (scc<CAF> bs))}]
 Data.Text.Encoding.decodeUtf32LEWith =
   \ (eta_B2 :: Data.Text.Encoding.Error.OnDecodeError)
     (eta_B1 :: Data.ByteString.Internal.ByteString) ->
     (\ (onErr :: Data.Text.Encoding.Error.OnDecodeError)
        (bs :: Data.ByteString.Internal.ByteString) ->
        let {
          lq_anf__dhhJ :: Data.Text.Fusion.Internal.Stream GHC.Types.Char
          [LclId]
          lq_anf__dhhJ =
            Data.Text.Encoding.Fusion.streamUtf32LE onErr bs } in
        Data.Text.Fusion.unstream lq_anf__dhhJ)
       eta_B2 eta_B1,
 Data.Text.Encoding.decodeUtf32LE [InlPrag=INLINE (sat-args=0)]
   :: Data.ByteString.Internal.ByteString -> Data.Text.Internal.Text
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=0, Value=False,
          ConLike=False, WorkFree=False, Expandable=False,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= scc<CAF>
                (scc<CAF> Data.Text.Encoding.decodeUtf32LEWith)
                  (scc<CAF> Data.Text.Encoding.Error.strictDecode)}]
 Data.Text.Encoding.decodeUtf32LE =
   Data.Text.Encoding.decodeUtf32LEWith
     Data.Text.Encoding.Error.strictDecode,
 Data.Text.Encoding.encodeUtf16BE [InlPrag=INLINE (sat-args=1)]
   :: Data.Text.Internal.Text -> Data.ByteString.Internal.ByteString
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=1, Value=True,
          ConLike=True, WorkFree=True, Expandable=True,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= \ (txt [Occ=OnceL] :: Data.Text.Internal.Text) ->
                  scc<CAF>
                  (scc<CAF> Data.Text.Encoding.Fusion.unstream)
                    (scc<CAF>
                     scc<CAF>
                     (scc<CAF> Data.Text.Encoding.Fusion.Common.restreamUtf16BE)
                       (scc<CAF>
                        scc<CAF> (scc<CAF> Data.Text.Fusion.stream) (scc<CAF> txt)))}]
 Data.Text.Encoding.encodeUtf16BE =
   \ (eta_B1 :: Data.Text.Internal.Text) ->
     (\ (txt :: Data.Text.Internal.Text) ->
        let {
          lq_anf__dhhK :: Data.Text.Fusion.Internal.Stream GHC.Types.Char
          [LclId]
          lq_anf__dhhK = Data.Text.Fusion.stream txt } in
        let {
          lq_anf__dhhL :: Data.Text.Fusion.Internal.Stream GHC.Word.Word8
          [LclId]
          lq_anf__dhhL =
            Data.Text.Encoding.Fusion.Common.restreamUtf16BE lq_anf__dhhK } in
        Data.Text.Encoding.Fusion.unstream lq_anf__dhhL)
       eta_B1,
 Data.Text.Encoding.encodeUtf16LE [InlPrag=INLINE (sat-args=1)]
   :: Data.Text.Internal.Text -> Data.ByteString.Internal.ByteString
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=1, Value=True,
          ConLike=True, WorkFree=True, Expandable=True,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= \ (txt [Occ=OnceL] :: Data.Text.Internal.Text) ->
                  scc<CAF>
                  (scc<CAF> Data.Text.Encoding.Fusion.unstream)
                    (scc<CAF>
                     scc<CAF>
                     (scc<CAF> Data.Text.Encoding.Fusion.Common.restreamUtf16LE)
                       (scc<CAF>
                        scc<CAF> (scc<CAF> Data.Text.Fusion.stream) (scc<CAF> txt)))}]
 Data.Text.Encoding.encodeUtf16LE =
   \ (eta_B1 :: Data.Text.Internal.Text) ->
     (\ (txt :: Data.Text.Internal.Text) ->
        let {
          lq_anf__dhhM :: Data.Text.Fusion.Internal.Stream GHC.Types.Char
          [LclId]
          lq_anf__dhhM = Data.Text.Fusion.stream txt } in
        let {
          lq_anf__dhhN :: Data.Text.Fusion.Internal.Stream GHC.Word.Word8
          [LclId]
          lq_anf__dhhN =
            Data.Text.Encoding.Fusion.Common.restreamUtf16LE lq_anf__dhhM } in
        Data.Text.Encoding.Fusion.unstream lq_anf__dhhN)
       eta_B1,
 Data.Text.Encoding.decodeUtf16BEWith [InlPrag=INLINE (sat-args=2)]
   :: Data.Text.Encoding.Error.OnDecodeError
      -> Data.ByteString.Internal.ByteString -> Data.Text.Internal.Text
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=2, Value=True,
          ConLike=True, WorkFree=True, Expandable=True,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= \ (onErr [Occ=OnceL]
                     :: Data.Text.Encoding.Error.OnDecodeError)
                  (bs [Occ=OnceL] :: Data.ByteString.Internal.ByteString) ->
                  scc<CAF>
                  (scc<CAF> Data.Text.Fusion.unstream)
                    (scc<CAF>
                     scc<CAF>
                     (scc<CAF>
                      (scc<CAF> Data.Text.Encoding.Fusion.streamUtf16BE)
                        (scc<CAF> onErr))
                       (scc<CAF> bs))}]
 Data.Text.Encoding.decodeUtf16BEWith =
   \ (eta_B2 :: Data.Text.Encoding.Error.OnDecodeError)
     (eta_B1 :: Data.ByteString.Internal.ByteString) ->
     (\ (onErr :: Data.Text.Encoding.Error.OnDecodeError)
        (bs :: Data.ByteString.Internal.ByteString) ->
        let {
          lq_anf__dhhO :: Data.Text.Fusion.Internal.Stream GHC.Types.Char
          [LclId]
          lq_anf__dhhO =
            Data.Text.Encoding.Fusion.streamUtf16BE onErr bs } in
        Data.Text.Fusion.unstream lq_anf__dhhO)
       eta_B2 eta_B1,
 Data.Text.Encoding.decodeUtf16BE [InlPrag=INLINE (sat-args=0)]
   :: Data.ByteString.Internal.ByteString -> Data.Text.Internal.Text
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=0, Value=False,
          ConLike=False, WorkFree=False, Expandable=False,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= scc<CAF>
                (scc<CAF> Data.Text.Encoding.decodeUtf16BEWith)
                  (scc<CAF> Data.Text.Encoding.Error.strictDecode)}]
 Data.Text.Encoding.decodeUtf16BE =
   Data.Text.Encoding.decodeUtf16BEWith
     Data.Text.Encoding.Error.strictDecode,
 Data.Text.Encoding.decodeUtf16LEWith [InlPrag=INLINE (sat-args=2)]
   :: Data.Text.Encoding.Error.OnDecodeError
      -> Data.ByteString.Internal.ByteString -> Data.Text.Internal.Text
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=2, Value=True,
          ConLike=True, WorkFree=True, Expandable=True,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= \ (onErr [Occ=OnceL]
                     :: Data.Text.Encoding.Error.OnDecodeError)
                  (bs [Occ=OnceL] :: Data.ByteString.Internal.ByteString) ->
                  scc<CAF>
                  (scc<CAF> Data.Text.Fusion.unstream)
                    (scc<CAF>
                     scc<CAF>
                     (scc<CAF>
                      (scc<CAF> Data.Text.Encoding.Fusion.streamUtf16LE)
                        (scc<CAF> onErr))
                       (scc<CAF> bs))}]
 Data.Text.Encoding.decodeUtf16LEWith =
   \ (eta_B2 :: Data.Text.Encoding.Error.OnDecodeError)
     (eta_B1 :: Data.ByteString.Internal.ByteString) ->
     (\ (onErr :: Data.Text.Encoding.Error.OnDecodeError)
        (bs :: Data.ByteString.Internal.ByteString) ->
        let {
          lq_anf__dhhP :: Data.Text.Fusion.Internal.Stream GHC.Types.Char
          [LclId]
          lq_anf__dhhP =
            Data.Text.Encoding.Fusion.streamUtf16LE onErr bs } in
        Data.Text.Fusion.unstream lq_anf__dhhP)
       eta_B2 eta_B1,
 Data.Text.Encoding.decodeUtf16LE [InlPrag=INLINE (sat-args=0)]
   :: Data.ByteString.Internal.ByteString -> Data.Text.Internal.Text
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=0, Value=False,
          ConLike=False, WorkFree=False, Expandable=False,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= scc<CAF>
                (scc<CAF> Data.Text.Encoding.decodeUtf16LEWith)
                  (scc<CAF> Data.Text.Encoding.Error.strictDecode)}]
 Data.Text.Encoding.decodeUtf16LE =
   Data.Text.Encoding.decodeUtf16LEWith
     Data.Text.Encoding.Error.strictDecode,
 Data.Text.Encoding.plen :: forall a. GHC.Ptr.Ptr a -> GHC.Types.Int
 [LclIdX]
 Data.Text.Encoding.plen =
   \ (@ a) -> GHC.Err.undefined @ (GHC.Ptr.Ptr a -> GHC.Types.Int),
 Data.Text.Encoding.withLIQUID
   :: forall s b.
      Foreign.C.Types.CSize
      -> Data.Text.Array.MArray s
      -> (GHC.Ptr.Ptr Foreign.C.Types.CSize -> GHC.Types.IO b)
      -> GHC.Types.IO b
 [LclIdX]
 Data.Text.Encoding.withLIQUID =
   \ (@ s) (@ b) ->
     GHC.Err.undefined
       @ (Foreign.C.Types.CSize
          -> Data.Text.Array.MArray s
          -> (GHC.Ptr.Ptr Foreign.C.Types.CSize -> GHC.Types.IO b)
          -> GHC.Types.IO b),
 Data.Text.Encoding.decodeUtf8With
   :: Data.Text.Encoding.OnDecodeError
      -> Data.ByteString.Internal.ByteString -> Data.Text.Internal.Text
 [LclIdX]
 Data.Text.Encoding.decodeUtf8With =
   \ (onErr :: Data.Text.Encoding.OnDecodeError)
     (ds_dhhi :: Data.ByteString.Internal.ByteString) ->
     case ds_dhhi
     of lq_anf__dhhQ { Data.ByteString.Internal.PS fp off len ->
     let {
       desc :: [GHC.Types.Char]
       [LclId]
       desc =
         GHC.CString.unpackCString#
           "Data.Text.Encoding.decodeUtf8: Invalid UTF-8 stream" } in
     let {
       lq_anf__dhiJ
         :: forall s.
            (Data.Text.Array.MArray s
             -> GHC.Types.Int -> GHC.ST.ST s Data.Text.Internal.Text)
            -> GHC.ST.ST s Data.Text.Internal.Text
       [LclId]
       lq_anf__dhiJ =
         \ (@ s)
           (done
              :: Data.Text.Array.MArray s
                 -> GHC.Types.Int -> GHC.ST.ST s Data.Text.Internal.Text) ->
           let {
             go
               :: Data.Text.Array.MArray s -> GHC.Types.IO Data.Text.Internal.Text
             [LclId]
             go =
               \ (dest :: Data.Text.Array.MArray s) ->
                 let {
                   lq_anf__dhhR
                     :: (GHC.Ptr.Ptr GHC.Word.Word8
                         -> GHC.Types.IO Data.Text.Internal.Text)
                        -> GHC.Types.IO Data.Text.Internal.Text
                   [LclId]
                   lq_anf__dhhR =
                     Foreign.ForeignPtr.Imp.withForeignPtr
                       @ GHC.Word.Word8 @ Data.Text.Internal.Text fp } in
                 let {
                   lq_anf__dhiE
                     :: GHC.Ptr.Ptr GHC.Word.Word8
                        -> GHC.Types.IO Data.Text.Internal.Text
                   [LclId]
                   lq_anf__dhiE =
                     \ (ptr :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                       let {
                         lq_anf__dhhS :: GHC.Integer.Type.Integer
                         [LclId]
                         lq_anf__dhhS = __integer 0 } in
                       let {
                         lq_anf__dhhT :: Foreign.C.Types.CSize
                         [LclId]
                         lq_anf__dhhT =
                           GHC.Num.fromInteger
                             @ Foreign.C.Types.CSize
                             Foreign.C.Types.$fNumCSize
                             lq_anf__dhhS } in
                       let {
                         lq_anf__dhhU
                           :: (GHC.Ptr.Ptr Foreign.C.Types.CSize
                               -> GHC.Types.IO Data.Text.Internal.Text)
                              -> GHC.Types.IO Data.Text.Internal.Text
                         [LclId]
                         lq_anf__dhhU =
                           Data.Text.Encoding.withLIQUID
                             @ s @ Data.Text.Internal.Text lq_anf__dhhT dest } in
                       let {
                         lq_anf__dhiD
                           :: GHC.Ptr.Ptr Foreign.C.Types.CSize
                              -> GHC.Types.IO Data.Text.Internal.Text
                         [LclId]
                         lq_anf__dhiD =
                           \ (destOffPtr :: GHC.Ptr.Ptr Foreign.C.Types.CSize) ->
                             let {
                               lq_anf__dhhV :: GHC.Types.Int
                               [LclId]
                               lq_anf__dhhV =
                                 GHC.Num.+ @ GHC.Types.Int GHC.Num.$fNumInt off len } in
                             let {
                               end :: GHC.Ptr.Ptr GHC.Word.Word8
                               [LclId]
                               end =
                                 GHC.Ptr.plusPtr
                                   @ GHC.Word.Word8 @ GHC.Word.Word8 ptr lq_anf__dhhV } in
                             letrec {
                               loop [Occ=LoopBreaker]
                                 :: GHC.Types.Int
                                    -> GHC.Ptr.Ptr GHC.Word.Word8
                                    -> GHC.Types.IO Data.Text.Internal.Text
                               [LclId]
                               loop =
                                 \ _ (curPtr :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                                   let {
                                     lq_anf__dhhW :: GHC.Types.IO (GHC.Ptr.Ptr GHC.Word.Word8)
                                     [LclId]
                                     lq_anf__dhhW =
                                       Data.Text.Encoding.c_decode_utf8
                                         @ s dest destOffPtr curPtr end } in
                                   let {
                                     lq_anf__dhiy
                                       :: GHC.Ptr.Ptr GHC.Word.Word8
                                          -> GHC.Types.IO Data.Text.Internal.Text
                                     [LclId]
                                     lq_anf__dhiy =
                                       \ (curPtr' :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                                         let {
                                           lq_anf__dhhX :: GHC.Types.Bool
                                           [LclId]
                                           lq_anf__dhhX =
                                             Language.Haskell.Liquid.Foreign.eqPtr
                                               @ GHC.Word.Word8 curPtr' end } in
                                         case lq_anf__dhhX of lq_anf__dhhY {
                                           GHC.Types.False ->
                                             let {
                                               lq_anf__dhhZ :: GHC.Types.IO GHC.Word.Word8
                                               [LclId]
                                               lq_anf__dhhZ =
                                                 Foreign.Storable.peek
                                                   @ GHC.Word.Word8
                                                   Foreign.Storable.$fStorableWord8
                                                   curPtr' } in
                                             let {
                                               lq_anf__dhit
                                                 :: GHC.Word.Word8
                                                    -> GHC.Types.IO Data.Text.Internal.Text
                                               [LclId]
                                               lq_anf__dhit =
                                                 \ (x :: GHC.Word.Word8) ->
                                                   let {
                                                     lq_anf__dhi0
                                                       :: GHC.Types.IO Foreign.C.Types.CSize
                                                     [LclId]
                                                     lq_anf__dhi0 =
                                                       Foreign.Storable.peek
                                                         @ Foreign.C.Types.CSize
                                                         Foreign.C.Types.$fStorableCSize
                                                         destOffPtr } in
                                                   let {
                                                     lq_anf__dhis
                                                       :: Foreign.C.Types.CSize
                                                          -> GHC.Types.IO Data.Text.Internal.Text
                                                     [LclId]
                                                     lq_anf__dhis =
                                                       \ (destOff :: Foreign.C.Types.CSize) ->
                                                         let {
                                                           lq_anf__dhi1
                                                             :: Data.Maybe.Maybe GHC.Word.Word8
                                                           [LclId]
                                                           lq_anf__dhi1 =
                                                             Data.Maybe.Just @ GHC.Word.Word8 x } in
                                                         let {
                                                           lq_anf__dhi2 :: GHC.Types.Int
                                                           [LclId]
                                                           lq_anf__dhi2 =
                                                             GHC.Real.fromIntegral
                                                               @ Foreign.C.Types.CSize
                                                               @ GHC.Types.Int
                                                               Foreign.C.Types.$fIntegralCSize
                                                               GHC.Num.$fNumInt
                                                               destOff } in
                                                         let {
                                                           lq_anf__dhi3
                                                             :: Data.Maybe.Maybe GHC.Types.Char
                                                           [LclId]
                                                           lq_anf__dhi3 =
                                                             onErr
                                                               @ s
                                                               desc
                                                               lq_anf__dhi1
                                                               dest
                                                               lq_anf__dhi2 } in
                                                         case lq_anf__dhi3 of lq_anf__dhi4 {
                                                           Data.Maybe.Nothing ->
                                                             let {
                                                               lq_anf__dhi5
                                                                 :: GHC.Ptr.Ptr (GHC.Prim.Any *)
                                                                    -> GHC.Types.Int
                                                               [LclId]
                                                               lq_anf__dhi5 =
                                                                 Data.Text.Encoding.plen
                                                                   @ (GHC.Prim.Any *) } in
                                                             let {
                                                               lq_anf__dhi6 :: GHC.Types.Int
                                                               [LclId]
                                                               lq_anf__dhi6 = GHC.Types.I# 1 } in
                                                             let {
                                                               lq_anf__dhi7
                                                                 :: GHC.Ptr.Ptr (GHC.Prim.Any *)
                                                               [LclId]
                                                               lq_anf__dhi7 =
                                                                 GHC.Ptr.plusPtr
                                                                   @ GHC.Word.Word8
                                                                   @ (GHC.Prim.Any *)
                                                                   curPtr'
                                                                   lq_anf__dhi6 } in
                                                             let {
                                                               lq_anf__dhi8 :: GHC.Types.Int
                                                               [LclId]
                                                               lq_anf__dhi8 =
                                                                 GHC.Base.$
                                                                   @ (GHC.Ptr.Ptr (GHC.Prim.Any *))
                                                                   @ GHC.Types.Int
                                                                   lq_anf__dhi5
                                                                   lq_anf__dhi7 } in
                                                             let {
                                                               lq_anf__dhi9
                                                                 :: GHC.Ptr.Ptr GHC.Word.Word8
                                                                    -> GHC.Types.IO
                                                                         Data.Text.Internal.Text
                                                               [LclId]
                                                               lq_anf__dhi9 = loop lq_anf__dhi8 } in
                                                             let {
                                                               lq_anf__dhia :: GHC.Types.Int
                                                               [LclId]
                                                               lq_anf__dhia = GHC.Types.I# 1 } in
                                                             let {
                                                               lq_anf__dhib
                                                                 :: GHC.Ptr.Ptr GHC.Word.Word8
                                                               [LclId]
                                                               lq_anf__dhib =
                                                                 GHC.Ptr.plusPtr
                                                                   @ GHC.Word.Word8
                                                                   @ GHC.Word.Word8
                                                                   curPtr'
                                                                   lq_anf__dhia } in
                                                             GHC.Base.$
                                                               @ (GHC.Ptr.Ptr GHC.Word.Word8)
                                                               @ (GHC.Types.IO
                                                                    Data.Text.Internal.Text)
                                                               lq_anf__dhi9
                                                               lq_anf__dhib;
                                                           Data.Maybe.Just c ->
                                                             let {
                                                               lq_anf__dhic
                                                                 :: GHC.ST.ST s GHC.Types.Int
                                                                    -> GHC.Types.IO GHC.Types.Int
                                                               [LclId]
                                                               lq_anf__dhic =
                                                                 GHC.IO.unsafeSTToIO
                                                                   @ s @ GHC.Types.Int } in
                                                             let {
                                                               lq_anf__dhid :: GHC.Types.Int
                                                               [LclId]
                                                               lq_anf__dhid =
                                                                 GHC.Real.fromIntegral
                                                                   @ Foreign.C.Types.CSize
                                                                   @ GHC.Types.Int
                                                                   Foreign.C.Types.$fIntegralCSize
                                                                   GHC.Num.$fNumInt
                                                                   destOff } in
                                                             let {
                                                               lq_anf__dhie
                                                                 :: GHC.ST.ST s GHC.Types.Int
                                                               [LclId]
                                                               lq_anf__dhie =
                                                                 Data.Text.UnsafeChar.unsafeWrite
                                                                   @ s dest lq_anf__dhid c } in
                                                             let {
                                                               lq_anf__dhif
                                                                 :: GHC.Types.IO GHC.Types.Int
                                                               [LclId]
                                                               lq_anf__dhif =
                                                                 GHC.Base.$
                                                                   @ (GHC.ST.ST s GHC.Types.Int)
                                                                   @ (GHC.Types.IO GHC.Types.Int)
                                                                   lq_anf__dhic
                                                                   lq_anf__dhie } in
                                                             let {
                                                               lq_anf__dhir
                                                                 :: GHC.Types.Int
                                                                    -> GHC.Types.IO
                                                                         Data.Text.Internal.Text
                                                               [LclId]
                                                               lq_anf__dhir =
                                                                 \ (w :: GHC.Types.Int) ->
                                                                   let {
                                                                     lq_anf__dhig
                                                                       :: Foreign.C.Types.CSize
                                                                     [LclId]
                                                                     lq_anf__dhig =
                                                                       GHC.Real.fromIntegral
                                                                         @ GHC.Types.Int
                                                                         @ Foreign.C.Types.CSize
                                                                         GHC.Real.$fIntegralInt
                                                                         Foreign.C.Types.$fNumCSize
                                                                         w } in
                                                                   let {
                                                                     lq_anf__dhih
                                                                       :: Foreign.C.Types.CSize
                                                                     [LclId]
                                                                     lq_anf__dhih =
                                                                       GHC.Num.+
                                                                         @ Foreign.C.Types.CSize
                                                                         Foreign.C.Types.$fNumCSize
                                                                         destOff
                                                                         lq_anf__dhig } in
                                                                   let {
                                                                     lq_anf__dhii :: GHC.Types.IO ()
                                                                     [LclId]
                                                                     lq_anf__dhii =
                                                                       Foreign.Storable.poke
                                                                         @ Foreign.C.Types.CSize
                                                                         Foreign.C.Types.$fStorableCSize
                                                                         destOffPtr
                                                                         lq_anf__dhih } in
                                                                   let {
                                                                     lq_anf__dhij
                                                                       :: GHC.Ptr.Ptr
                                                                            (GHC.Prim.Any *)
                                                                          -> GHC.Types.Int
                                                                     [LclId]
                                                                     lq_anf__dhij =
                                                                       Data.Text.Encoding.plen
                                                                         @ (GHC.Prim.Any *) } in
                                                                   let {
                                                                     lq_anf__dhik :: GHC.Types.Int
                                                                     [LclId]
                                                                     lq_anf__dhik =
                                                                       GHC.Types.I# 1 } in
                                                                   let {
                                                                     lq_anf__dhil
                                                                       :: GHC.Ptr.Ptr
                                                                            (GHC.Prim.Any *)
                                                                     [LclId]
                                                                     lq_anf__dhil =
                                                                       GHC.Ptr.plusPtr
                                                                         @ GHC.Word.Word8
                                                                         @ (GHC.Prim.Any *)
                                                                         curPtr'
                                                                         lq_anf__dhik } in
                                                                   let {
                                                                     lq_anf__dhim :: GHC.Types.Int
                                                                     [LclId]
                                                                     lq_anf__dhim =
                                                                       GHC.Base.$
                                                                         @ (GHC.Ptr.Ptr
                                                                              (GHC.Prim.Any *))
                                                                         @ GHC.Types.Int
                                                                         lq_anf__dhij
                                                                         lq_anf__dhil } in
                                                                   let {
                                                                     lq_anf__dhin
                                                                       :: GHC.Ptr.Ptr GHC.Word.Word8
                                                                          -> GHC.Types.IO
                                                                               Data.Text.Internal.Text
                                                                     [LclId]
                                                                     lq_anf__dhin =
                                                                       loop lq_anf__dhim } in
                                                                   let {
                                                                     lq_anf__dhio :: GHC.Types.Int
                                                                     [LclId]
                                                                     lq_anf__dhio =
                                                                       GHC.Types.I# 1 } in
                                                                   let {
                                                                     lq_anf__dhip
                                                                       :: GHC.Ptr.Ptr GHC.Word.Word8
                                                                     [LclId]
                                                                     lq_anf__dhip =
                                                                       GHC.Ptr.plusPtr
                                                                         @ GHC.Word.Word8
                                                                         @ GHC.Word.Word8
                                                                         curPtr'
                                                                         lq_anf__dhio } in
                                                                   let {
                                                                     lq_anf__dhiq
                                                                       :: GHC.Types.IO
                                                                            Data.Text.Internal.Text
                                                                     [LclId]
                                                                     lq_anf__dhiq =
                                                                       GHC.Base.$
                                                                         @ (GHC.Ptr.Ptr
                                                                              GHC.Word.Word8)
                                                                         @ (GHC.Types.IO
                                                                              Data.Text.Internal.Text)
                                                                         lq_anf__dhin
                                                                         lq_anf__dhip } in
                                                                   GHC.Base.>>
                                                                     @ GHC.Types.IO
                                                                     GHC.Base.$fMonadIO
                                                                     @ ()
                                                                     @ Data.Text.Internal.Text
                                                                     lq_anf__dhii
                                                                     lq_anf__dhiq } in
                                                             GHC.Base.>>=
                                                               @ GHC.Types.IO
                                                               GHC.Base.$fMonadIO
                                                               @ GHC.Types.Int
                                                               @ Data.Text.Internal.Text
                                                               lq_anf__dhif
                                                               lq_anf__dhir
                                                         } } in
                                                   GHC.Base.>>=
                                                     @ GHC.Types.IO
                                                     GHC.Base.$fMonadIO
                                                     @ Foreign.C.Types.CSize
                                                     @ Data.Text.Internal.Text
                                                     lq_anf__dhi0
                                                     lq_anf__dhis } in
                                             GHC.Base.>>=
                                               @ GHC.Types.IO
                                               GHC.Base.$fMonadIO
                                               @ GHC.Word.Word8
                                               @ Data.Text.Internal.Text
                                               lq_anf__dhhZ
                                               lq_anf__dhit;
                                           GHC.Types.True ->
                                             let {
                                               lq_anf__dhiu :: GHC.Types.IO Foreign.C.Types.CSize
                                               [LclId]
                                               lq_anf__dhiu =
                                                 Foreign.Storable.peek
                                                   @ Foreign.C.Types.CSize
                                                   Foreign.C.Types.$fStorableCSize
                                                   destOffPtr } in
                                             let {
                                               lq_anf__dhix
                                                 :: Foreign.C.Types.CSize
                                                    -> GHC.Types.IO Data.Text.Internal.Text
                                               [LclId]
                                               lq_anf__dhix =
                                                 \ (n :: Foreign.C.Types.CSize) ->
                                                   let {
                                                     lq_anf__dhiv :: GHC.Types.Int
                                                     [LclId]
                                                     lq_anf__dhiv =
                                                       GHC.Real.fromIntegral
                                                         @ Foreign.C.Types.CSize
                                                         @ GHC.Types.Int
                                                         Foreign.C.Types.$fIntegralCSize
                                                         GHC.Num.$fNumInt
                                                         n } in
                                                   let {
                                                     lq_anf__dhiw
                                                       :: GHC.ST.ST s Data.Text.Internal.Text
                                                     [LclId]
                                                     lq_anf__dhiw = done dest lq_anf__dhiv } in
                                                   GHC.IO.unsafeSTToIO
                                                     @ s @ Data.Text.Internal.Text lq_anf__dhiw } in
                                             GHC.Base.>>=
                                               @ GHC.Types.IO
                                               GHC.Base.$fMonadIO
                                               @ Foreign.C.Types.CSize
                                               @ Data.Text.Internal.Text
                                               lq_anf__dhiu
                                               lq_anf__dhix
                                         } } in
                                   GHC.Base.>>=
                                     @ GHC.Types.IO
                                     GHC.Base.$fMonadIO
                                     @ (GHC.Ptr.Ptr GHC.Word.Word8)
                                     @ Data.Text.Internal.Text
                                     lq_anf__dhhW
                                     lq_anf__dhiy; } in
                             let {
                               loop
                                 :: GHC.Types.Int
                                    -> GHC.Ptr.Ptr GHC.Word.Word8
                                    -> GHC.Types.IO Data.Text.Internal.Text
                               [LclId]
                               loop = loop } in
                             let {
                               lq_anf__dhiz :: GHC.Ptr.Ptr (GHC.Prim.Any *) -> GHC.Types.Int
                               [LclId]
                               lq_anf__dhiz = Data.Text.Encoding.plen @ (GHC.Prim.Any *) } in
                             let {
                               lq_anf__dhiA :: GHC.Ptr.Ptr (GHC.Prim.Any *)
                               [LclId]
                               lq_anf__dhiA =
                                 GHC.Ptr.plusPtr @ GHC.Word.Word8 @ (GHC.Prim.Any *) ptr off } in
                             let {
                               lq_anf__dhiB :: GHC.Types.Int
                               [LclId]
                               lq_anf__dhiB =
                                 GHC.Base.$
                                   @ (GHC.Ptr.Ptr (GHC.Prim.Any *))
                                   @ GHC.Types.Int
                                   lq_anf__dhiz
                                   lq_anf__dhiA } in
                             let {
                               lq_anf__dhiC :: GHC.Ptr.Ptr GHC.Word.Word8
                               [LclId]
                               lq_anf__dhiC =
                                 GHC.Ptr.plusPtr @ GHC.Word.Word8 @ GHC.Word.Word8 ptr off } in
                             loop lq_anf__dhiB lq_anf__dhiC } in
                       GHC.Base.$
                         @ (GHC.Ptr.Ptr Foreign.C.Types.CSize
                            -> GHC.Types.IO Data.Text.Internal.Text)
                         @ (GHC.Types.IO Data.Text.Internal.Text)
                         lq_anf__dhhU
                         lq_anf__dhiD } in
                 GHC.Base.$
                   @ (GHC.Ptr.Ptr GHC.Word.Word8
                      -> GHC.Types.IO Data.Text.Internal.Text)
                   @ (GHC.Types.IO Data.Text.Internal.Text)
                   lq_anf__dhhR
                   lq_anf__dhiE } in
           let {
             lq_anf__dhiF :: GHC.Base.Monad (GHC.ST.ST s)
             [LclId]
             lq_anf__dhiF = GHC.ST.$fMonadST @ s } in
           let {
             lq_anf__dhiG
               :: GHC.Types.IO Data.Text.Internal.Text
                  -> GHC.ST.ST s Data.Text.Internal.Text
             [LclId]
             lq_anf__dhiG =
               GHC.IO.unsafeIOToST @ Data.Text.Internal.Text @ s } in
           let {
             lq_anf__dhiH
               :: Data.Text.Array.MArray s -> GHC.ST.ST s Data.Text.Internal.Text
             [LclId]
             lq_anf__dhiH =
               GHC.Base..
                 @ (GHC.Types.IO Data.Text.Internal.Text)
                 @ (GHC.ST.ST s Data.Text.Internal.Text)
                 @ (Data.Text.Array.MArray s)
                 lq_anf__dhiG
                 go } in
           let {
             lq_anf__dhiI :: GHC.ST.ST s (Data.Text.Array.MArray s)
             [LclId]
             lq_anf__dhiI = Data.Text.Array.new @ s len } in
           Control.Monad.=<<
             @ (Data.Text.Array.MArray s)
             @ (GHC.ST.ST s)
             @ Data.Text.Internal.Text
             lq_anf__dhiF
             lq_anf__dhiH
             lq_anf__dhiI } in
     GHC.Base.$
       @ (forall s.
          (Data.Text.Array.MArray s
           -> GHC.Types.Int -> GHC.ST.ST s Data.Text.Internal.Text)
          -> GHC.ST.ST s Data.Text.Internal.Text)
       @ Data.Text.Internal.Text
       Data.Text.Private.runText
       lq_anf__dhiJ
     },
 Data.Text.Encoding.strictDecode
   :: forall s.
      GHC.Base.String
      -> Data.Maybe.Maybe GHC.Word.Word8
      -> Data.Text.Array.MArray s
      -> GHC.Types.Int
      -> Data.Maybe.Maybe GHC.Types.Char
 [LclIdX]
 Data.Text.Encoding.strictDecode =
   \ (@ s)
     (desc :: GHC.Base.String)
     (c :: Data.Maybe.Maybe GHC.Word.Word8)
     _
     _ ->
     let {
       lq_anf__dhiK :: Data.Text.Encoding.Error.UnicodeException
       [LclId]
       lq_anf__dhiK = Data.Text.Encoding.Error.DecodeError desc c } in
     GHC.Exception.throw
       @ Data.Text.Encoding.Error.UnicodeException
       @ (Data.Maybe.Maybe GHC.Types.Char)
       Data.Text.Encoding.Error.$fExceptionUnicodeException
       lq_anf__dhiK,
 Data.Text.Encoding.decodeUtf8 [InlPrag=INLINE[0] (sat-args=0)]
   :: Data.ByteString.Internal.ByteString -> Data.Text.Internal.Text
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=0, Value=False,
          ConLike=False, WorkFree=False, Expandable=False,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= scc<CAF>
                (scc<CAF> Data.Text.Encoding.decodeUtf8With)
                  (scc<CAF> Data.Text.Encoding.strictDecode)}]
 Data.Text.Encoding.decodeUtf8 =
   Data.Text.Encoding.decodeUtf8With Data.Text.Encoding.strictDecode,
 Data.Text.Encoding.decodeASCII
   :: Data.ByteString.Internal.ByteString -> Data.Text.Internal.Text
 [LclIdX]
 Data.Text.Encoding.decodeASCII = Data.Text.Encoding.decodeUtf8,
 Data.Text.Encoding.decodeUtf8' [InlPrag=INLINE (sat-args=0)]
   :: Data.ByteString.Internal.ByteString
      -> Data.Either.Either
           Data.Text.Encoding.Error.UnicodeException Data.Text.Internal.Text
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=0, Value=False,
          ConLike=False, WorkFree=False, Expandable=False,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= scc<CAF>
                (scc<CAF>
                 GHC.Base..
                   @ (GHC.Types.IO
                        (Data.Either.Either
                           Data.Text.Encoding.Error.UnicodeException Data.Text.Internal.Text))
                   @ (Data.Either.Either
                        Data.Text.Encoding.Error.UnicodeException Data.Text.Internal.Text)
                   @ Data.ByteString.Internal.ByteString)
                  (scc<CAF>
                   GHC.IO.unsafePerformIO
                     @ (Data.Either.Either
                          Data.Text.Encoding.Error.UnicodeException Data.Text.Internal.Text))
                  (scc<CAF>
                   (scc<CAF>
                    GHC.Base..
                      @ (GHC.Types.IO Data.Text.Internal.Text)
                      @ (GHC.Types.IO
                           (Data.Either.Either
                              Data.Text.Encoding.Error.UnicodeException Data.Text.Internal.Text))
                      @ Data.ByteString.Internal.ByteString)
                     (scc<CAF>
                      Control.Exception.Base.try
                        @ Data.Text.Internal.Text
                        @ Data.Text.Encoding.Error.UnicodeException
                        Data.Text.Encoding.Error.$fExceptionUnicodeException)
                     (scc<CAF>
                      (scc<CAF>
                       GHC.Base..
                         @ Data.Text.Internal.Text
                         @ (GHC.Types.IO Data.Text.Internal.Text)
                         @ Data.ByteString.Internal.ByteString)
                        (scc<CAF> GHC.IO.evaluate @ Data.Text.Internal.Text)
                        (scc<CAF>
                         (scc<CAF> Data.Text.Encoding.decodeUtf8With)
                           (scc<CAF> Data.Text.Encoding.strictDecode))))}]
 Data.Text.Encoding.decodeUtf8' =
   let {
     lq_anf__dhiL
       :: GHC.Types.IO
            (Data.Either.Either
               Data.Text.Encoding.Error.UnicodeException Data.Text.Internal.Text)
          -> Data.Either.Either
               Data.Text.Encoding.Error.UnicodeException Data.Text.Internal.Text
     [LclId]
     lq_anf__dhiL =
       GHC.IO.unsafePerformIO
         @ (Data.Either.Either
              Data.Text.Encoding.Error.UnicodeException
              Data.Text.Internal.Text) } in
   let {
     lq_anf__dhiM
       :: GHC.Types.IO Data.Text.Internal.Text
          -> GHC.Types.IO
               (Data.Either.Either
                  Data.Text.Encoding.Error.UnicodeException Data.Text.Internal.Text)
     [LclId]
     lq_anf__dhiM =
       Control.Exception.Base.try
         @ Data.Text.Internal.Text
         @ Data.Text.Encoding.Error.UnicodeException
         Data.Text.Encoding.Error.$fExceptionUnicodeException } in
   let {
     lq_anf__dhiN
       :: Data.Text.Internal.Text -> GHC.Types.IO Data.Text.Internal.Text
     [LclId]
     lq_anf__dhiN = GHC.IO.evaluate @ Data.Text.Internal.Text } in
   let {
     lq_anf__dhiO
       :: Data.ByteString.Internal.ByteString -> Data.Text.Internal.Text
     [LclId]
     lq_anf__dhiO =
       Data.Text.Encoding.decodeUtf8With
         Data.Text.Encoding.strictDecode } in
   let {
     lq_anf__dhiP
       :: Data.ByteString.Internal.ByteString
          -> GHC.Types.IO Data.Text.Internal.Text
     [LclId]
     lq_anf__dhiP =
       GHC.Base..
         @ Data.Text.Internal.Text
         @ (GHC.Types.IO Data.Text.Internal.Text)
         @ Data.ByteString.Internal.ByteString
         lq_anf__dhiN
         lq_anf__dhiO } in
   let {
     lq_anf__dhiQ
       :: Data.ByteString.Internal.ByteString
          -> GHC.Types.IO
               (Data.Either.Either
                  Data.Text.Encoding.Error.UnicodeException Data.Text.Internal.Text)
     [LclId]
     lq_anf__dhiQ =
       GHC.Base..
         @ (GHC.Types.IO Data.Text.Internal.Text)
         @ (GHC.Types.IO
              (Data.Either.Either
                 Data.Text.Encoding.Error.UnicodeException Data.Text.Internal.Text))
         @ Data.ByteString.Internal.ByteString
         lq_anf__dhiM
         lq_anf__dhiP } in
   GHC.Base..
     @ (GHC.Types.IO
          (Data.Either.Either
             Data.Text.Encoding.Error.UnicodeException Data.Text.Internal.Text))
     @ (Data.Either.Either
          Data.Text.Encoding.Error.UnicodeException Data.Text.Internal.Text)
     @ Data.ByteString.Internal.ByteString
     lq_anf__dhiL
     lq_anf__dhiQ,
 Data.Text.Encoding.encodeUtf8
   :: Data.Text.Internal.Text -> Data.ByteString.Internal.ByteString
 [LclIdX]
 Data.Text.Encoding.encodeUtf8 =
   \ (ds_dhgB :: Data.Text.Internal.Text) ->
     case ds_dhgB
     of lq_anf__dhiR { Data.Text.Internal.Text arr off len ->
     let {
       offLen :: GHC.Types.Int
       [LclId]
       offLen = GHC.Num.+ @ GHC.Types.Int GHC.Num.$fNumInt off len } in
     letrec {
       start [Occ=LoopBreaker]
         :: GHC.Types.Int
            -> GHC.Types.Int
            -> GHC.Types.Int
            -> GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
            -> GHC.Types.IO Data.ByteString.Internal.ByteString
       [LclId]
       start =
         \ (size :: GHC.Types.Int)
           (n0 :: GHC.Types.Int)
           (m0 :: GHC.Types.Int)
           (fp :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8) ->
           let {
             loop
               :: GHC.Types.Int
                  -> GHC.Types.Int
                  -> GHC.Ptr.Ptr GHC.Word.Word8
                  -> GHC.Types.IO Data.ByteString.Internal.ByteString
             [LclId]
             loop =
               \ (n1 :: GHC.Types.Int)
                 (m1 :: GHC.Types.Int)
                 (ptr :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                 letrec {
                   go [Occ=LoopBreaker]
                     :: GHC.Types.Int
                        -> GHC.Types.Int
                        -> GHC.Types.Int
                        -> GHC.Types.IO Data.ByteString.Internal.ByteString
                   [LclId]
                   go =
                     \ (ds_dhh2 :: GHC.Types.Int)
                       (n :: GHC.Types.Int)
                       (m :: GHC.Types.Int) ->
                       case n of lq_anf__dhiS { GHC.Types.I# lq_anf__dhm2 ->
                       case m of lq_anf__dhiT { GHC.Types.I# lq_anf__dhm1 ->
                       let {
                         lq_anf__dhiU :: GHC.Types.Bool
                         [LclId]
                         lq_anf__dhiU =
                           GHC.Classes.==
                             @ GHC.Types.Int GHC.Classes.$fEqInt lq_anf__dhiS offLen } in
                       case lq_anf__dhiU of lq_anf__dhiV {
                         GHC.Types.False ->
                           let {
                             ensure
                               :: GHC.Types.Int
                                  -> (GHC.Ptr.Ptr GHC.Word.Word8
                                      -> GHC.Types.IO Data.ByteString.Internal.ByteString)
                                  -> GHC.Types.IO Data.ByteString.Internal.ByteString
                             [LclId]
                             ensure =
                               \ (k :: GHC.Types.Int)
                                 (ds_dhgX
                                    :: GHC.Ptr.Ptr GHC.Word.Word8
                                       -> GHC.Types.IO Data.ByteString.Internal.ByteString) ->
                                 let {
                                   lq_anf__dhiW :: GHC.Types.Int
                                   [LclId]
                                   lq_anf__dhiW =
                                     GHC.Num.-
                                       @ GHC.Types.Int GHC.Num.$fNumInt size lq_anf__dhiT } in
                                 let {
                                   lq_anf__dhiX :: GHC.Types.Bool
                                   [LclId]
                                   lq_anf__dhiX =
                                     GHC.Classes.>=
                                       @ GHC.Types.Int GHC.Classes.$fOrdInt lq_anf__dhiW k } in
                                 case lq_anf__dhiX of lq_anf__dhiY {
                                   GHC.Types.False ->
                                     let {
                                       lq_anf__dhiZ :: GHC.Types.Int
                                       [LclId]
                                       lq_anf__dhiZ = GHC.Types.I# 2 } in
                                     let {
                                       newSize :: GHC.Types.Int
                                       [LclId]
                                       newSize =
                                         GHC.Num.*
                                           @ GHC.Types.Int GHC.Num.$fNumInt size lq_anf__dhiZ } in
                                     let {
                                       lq_anf__dhj0
                                         :: GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                       [LclId]
                                       lq_anf__dhj0 =
                                         Data.ByteString.Internal.mallocByteString
                                           @ GHC.Word.Word8 newSize } in
                                     let {
                                       lq_anf__dhj6
                                         :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
                                            -> GHC.Types.IO Data.ByteString.Internal.ByteString
                                       [LclId]
                                       lq_anf__dhj6 =
                                         \ (fp' :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8) ->
                                           let {
                                             lq_anf__dhj1
                                               :: (GHC.Ptr.Ptr GHC.Word.Word8 -> GHC.Types.IO ())
                                                  -> GHC.Types.IO ()
                                             [LclId]
                                             lq_anf__dhj1 =
                                               Foreign.ForeignPtr.Imp.withForeignPtr
                                                 @ GHC.Word.Word8 @ () fp' } in
                                           let {
                                             lq_anf__dhj3
                                               :: GHC.Ptr.Ptr GHC.Word.Word8 -> GHC.Types.IO ()
                                             [LclId]
                                             lq_anf__dhj3 =
                                               \ (ptr' :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                                                 let {
                                                   lq_anf__dhj2 :: Foreign.C.Types.CSize
                                                   [LclId]
                                                   lq_anf__dhj2 =
                                                     GHC.Real.fromIntegral
                                                       @ GHC.Types.Int
                                                       @ Foreign.C.Types.CSize
                                                       GHC.Real.$fIntegralInt
                                                       Foreign.C.Types.$fNumCSize
                                                       lq_anf__dhiT } in
                                                 Data.ByteString.Internal.memcpy
                                                   ptr' ptr lq_anf__dhj2 } in
                                           let {
                                             lq_anf__dhj4 :: GHC.Types.IO ()
                                             [LclId]
                                             lq_anf__dhj4 =
                                               GHC.Base.$
                                                 @ (GHC.Ptr.Ptr GHC.Word.Word8 -> GHC.Types.IO ())
                                                 @ (GHC.Types.IO ())
                                                 lq_anf__dhj1
                                                 lq_anf__dhj3 } in
                                           let {
                                             lq_anf__dhj5
                                               :: GHC.Types.IO Data.ByteString.Internal.ByteString
                                             [LclId]
                                             lq_anf__dhj5 =
                                               start newSize lq_anf__dhiS lq_anf__dhiT fp' } in
                                           GHC.Base.>>
                                             @ GHC.Types.IO
                                             GHC.Base.$fMonadIO
                                             @ ()
                                             @ Data.ByteString.Internal.ByteString
                                             lq_anf__dhj4
                                             lq_anf__dhj5 } in
                                     GHC.Base.>>=
                                       @ GHC.Types.IO
                                       GHC.Base.$fMonadIO
                                       @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                       @ Data.ByteString.Internal.ByteString
                                       lq_anf__dhj0
                                       lq_anf__dhj6;
                                   GHC.Types.True -> ds_dhgX ptr
                                 } } in
                           let {
                             poke8
                               :: forall a.
                                  GHC.Real.Integral a =>
                                  GHC.Types.Int -> a -> GHC.Types.IO ()
                             [LclId]
                             poke8 =
                               \ (@ a)
                                 ($dIntegral :: GHC.Real.Integral a)
                                 (k :: GHC.Types.Int)
                                 (v :: a) ->
                                 let {
                                   lq_anf__dhj7 :: GHC.Ptr.Ptr GHC.Word.Word8
                                   [LclId]
                                   lq_anf__dhj7 =
                                     GHC.Ptr.plusPtr @ GHC.Word.Word8 @ GHC.Word.Word8 ptr k } in
                                 let {
                                   lq_anf__dhj8 :: GHC.Word.Word8
                                   [LclId]
                                   lq_anf__dhj8 =
                                     GHC.Real.fromIntegral
                                       @ a @ GHC.Word.Word8 $dIntegral GHC.Word.$fNumWord8 v } in
                                 Foreign.Storable.poke
                                   @ GHC.Word.Word8
                                   Foreign.Storable.$fStorableWord8
                                   lq_anf__dhj7
                                   lq_anf__dhj8 } in
                           let {
                             w :: GHC.Word.Word16
                             [LclId]
                             w = Data.Text.Array.unsafeIndexF arr off len lq_anf__dhiS } in
                           let {
                             lq_anf__dhj9 :: GHC.Integer.Type.Integer
                             [LclId]
                             lq_anf__dhj9 = __integer 127 } in
                           let {
                             lq_anf__dhja :: GHC.Word.Word16
                             [LclId]
                             lq_anf__dhja =
                               GHC.Num.fromInteger
                                 @ GHC.Word.Word16 GHC.Word.$fNumWord16 lq_anf__dhj9 } in
                           let {
                             lq_anf__dhjb :: GHC.Types.Bool
                             [LclId]
                             lq_anf__dhjb =
                               GHC.Classes.<=
                                 @ GHC.Word.Word16 GHC.Word.$fOrdWord16 w lq_anf__dhja } in
                           case lq_anf__dhjb of lq_anf__dhjc {
                             GHC.Types.False ->
                               let {
                                 lq_anf__dhjd :: GHC.Integer.Type.Integer
                                 [LclId]
                                 lq_anf__dhjd = __integer 2047 } in
                               let {
                                 lq_anf__dhje :: GHC.Word.Word16
                                 [LclId]
                                 lq_anf__dhje =
                                   GHC.Num.fromInteger
                                     @ GHC.Word.Word16 GHC.Word.$fNumWord16 lq_anf__dhjd } in
                               let {
                                 lq_anf__dhjf :: GHC.Types.Bool
                                 [LclId]
                                 lq_anf__dhjf =
                                   GHC.Classes.<=
                                     @ GHC.Word.Word16 GHC.Word.$fOrdWord16 w lq_anf__dhje } in
                               case lq_anf__dhjf of lq_anf__dhjg {
                                 GHC.Types.False ->
                                   let {
                                     lq_anf__dhjh :: GHC.Integer.Type.Integer
                                     [LclId]
                                     lq_anf__dhjh = __integer 55296 } in
                                   let {
                                     lq_anf__dhji :: GHC.Word.Word16
                                     [LclId]
                                     lq_anf__dhji =
                                       GHC.Num.fromInteger
                                         @ GHC.Word.Word16 GHC.Word.$fNumWord16 lq_anf__dhjh } in
                                   let {
                                     lq_anf__dhjj :: GHC.Types.Bool
                                     [LclId]
                                     lq_anf__dhjj =
                                       GHC.Classes.<=
                                         @ GHC.Word.Word16 GHC.Word.$fOrdWord16 lq_anf__dhji w } in
                                   let {
                                     lq_anf__dhjk :: GHC.Integer.Type.Integer
                                     [LclId]
                                     lq_anf__dhjk = __integer 56319 } in
                                   let {
                                     lq_anf__dhjl :: GHC.Word.Word16
                                     [LclId]
                                     lq_anf__dhjl =
                                       GHC.Num.fromInteger
                                         @ GHC.Word.Word16 GHC.Word.$fNumWord16 lq_anf__dhjk } in
                                   let {
                                     lq_anf__dhjm :: GHC.Types.Bool
                                     [LclId]
                                     lq_anf__dhjm =
                                       GHC.Classes.<=
                                         @ GHC.Word.Word16 GHC.Word.$fOrdWord16 w lq_anf__dhjl } in
                                   let {
                                     lq_anf__dhjn :: GHC.Types.Bool
                                     [LclId]
                                     lq_anf__dhjn = GHC.Classes.&& lq_anf__dhjj lq_anf__dhjm } in
                                   case lq_anf__dhjn of lq_anf__dhjo {
                                     GHC.Types.False ->
                                       let {
                                         lq_anf__dhjp :: GHC.Types.Int
                                         [LclId]
                                         lq_anf__dhjp = GHC.Types.I# 3 } in
                                       let {
                                         lq_anf__dhjq
                                           :: (GHC.Ptr.Ptr GHC.Word.Word8
                                               -> GHC.Types.IO Data.ByteString.Internal.ByteString)
                                              -> GHC.Types.IO Data.ByteString.Internal.ByteString
                                         [LclId]
                                         lq_anf__dhjq = ensure lq_anf__dhjp } in
                                       let {
                                         lq_anf__dhk4
                                           :: GHC.Ptr.Ptr GHC.Word.Word8
                                              -> GHC.Types.IO Data.ByteString.Internal.ByteString
                                         [LclId]
                                         lq_anf__dhk4 =
                                           \ _ ->
                                             let {
                                               lq_anf__dhjr :: GHC.Word.Word16 -> GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhjr =
                                                 poke8
                                                   @ GHC.Word.Word16
                                                   GHC.Word.$fIntegralWord16
                                                   lq_anf__dhiT } in
                                             let {
                                               lq_anf__dhjs :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhjs = GHC.Types.I# 12 } in
                                             let {
                                               lq_anf__dhjt :: GHC.Word.Word16
                                               [LclId]
                                               lq_anf__dhjt =
                                                 Data.Text.UnsafeShift.shiftR
                                                   @ GHC.Word.Word16
                                                   Data.Text.UnsafeShift.$fUnsafeShiftWord16
                                                   w
                                                   lq_anf__dhjs } in
                                             let {
                                               lq_anf__dhju :: GHC.Integer.Type.Integer
                                               [LclId]
                                               lq_anf__dhju = __integer 224 } in
                                             let {
                                               lq_anf__dhjv :: GHC.Word.Word16
                                               [LclId]
                                               lq_anf__dhjv =
                                                 GHC.Num.fromInteger
                                                   @ GHC.Word.Word16
                                                   GHC.Word.$fNumWord16
                                                   lq_anf__dhju } in
                                             let {
                                               lq_anf__dhjw :: GHC.Word.Word16
                                               [LclId]
                                               lq_anf__dhjw =
                                                 GHC.Num.+
                                                   @ GHC.Word.Word16
                                                   GHC.Word.$fNumWord16
                                                   lq_anf__dhjt
                                                   lq_anf__dhjv } in
                                             let {
                                               lq_anf__dhjx :: GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhjx =
                                                 GHC.Base.$
                                                   @ GHC.Word.Word16
                                                   @ (GHC.Types.IO ())
                                                   lq_anf__dhjr
                                                   lq_anf__dhjw } in
                                             let {
                                               lq_anf__dhjy :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhjy = GHC.Types.I# 1 } in
                                             let {
                                               lq_anf__dhjz :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhjz =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhiT
                                                   lq_anf__dhjy } in
                                             let {
                                               lq_anf__dhjA :: GHC.Word.Word16 -> GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhjA =
                                                 poke8
                                                   @ GHC.Word.Word16
                                                   GHC.Word.$fIntegralWord16
                                                   lq_anf__dhjz } in
                                             let {
                                               lq_anf__dhjB :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhjB = GHC.Types.I# 6 } in
                                             let {
                                               lq_anf__dhjC :: GHC.Word.Word16
                                               [LclId]
                                               lq_anf__dhjC =
                                                 Data.Text.UnsafeShift.shiftR
                                                   @ GHC.Word.Word16
                                                   Data.Text.UnsafeShift.$fUnsafeShiftWord16
                                                   w
                                                   lq_anf__dhjB } in
                                             let {
                                               lq_anf__dhjD :: GHC.Integer.Type.Integer
                                               [LclId]
                                               lq_anf__dhjD = __integer 63 } in
                                             let {
                                               lq_anf__dhjE :: GHC.Word.Word16
                                               [LclId]
                                               lq_anf__dhjE =
                                                 GHC.Num.fromInteger
                                                   @ GHC.Word.Word16
                                                   GHC.Word.$fNumWord16
                                                   lq_anf__dhjD } in
                                             let {
                                               lq_anf__dhjF :: GHC.Word.Word16
                                               [LclId]
                                               lq_anf__dhjF =
                                                 Data.Bits..&.
                                                   @ GHC.Word.Word16
                                                   GHC.Word.$fBitsWord16
                                                   lq_anf__dhjC
                                                   lq_anf__dhjE } in
                                             let {
                                               lq_anf__dhjG :: GHC.Integer.Type.Integer
                                               [LclId]
                                               lq_anf__dhjG = __integer 128 } in
                                             let {
                                               lq_anf__dhjH :: GHC.Word.Word16
                                               [LclId]
                                               lq_anf__dhjH =
                                                 GHC.Num.fromInteger
                                                   @ GHC.Word.Word16
                                                   GHC.Word.$fNumWord16
                                                   lq_anf__dhjG } in
                                             let {
                                               lq_anf__dhjI :: GHC.Word.Word16
                                               [LclId]
                                               lq_anf__dhjI =
                                                 GHC.Num.+
                                                   @ GHC.Word.Word16
                                                   GHC.Word.$fNumWord16
                                                   lq_anf__dhjF
                                                   lq_anf__dhjH } in
                                             let {
                                               lq_anf__dhjJ :: GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhjJ =
                                                 GHC.Base.$
                                                   @ GHC.Word.Word16
                                                   @ (GHC.Types.IO ())
                                                   lq_anf__dhjA
                                                   lq_anf__dhjI } in
                                             let {
                                               lq_anf__dhjK :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhjK = GHC.Types.I# 2 } in
                                             let {
                                               lq_anf__dhjL :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhjL =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhiT
                                                   lq_anf__dhjK } in
                                             let {
                                               lq_anf__dhjM :: GHC.Word.Word16 -> GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhjM =
                                                 poke8
                                                   @ GHC.Word.Word16
                                                   GHC.Word.$fIntegralWord16
                                                   lq_anf__dhjL } in
                                             let {
                                               lq_anf__dhjN :: GHC.Integer.Type.Integer
                                               [LclId]
                                               lq_anf__dhjN = __integer 63 } in
                                             let {
                                               lq_anf__dhjO :: GHC.Word.Word16
                                               [LclId]
                                               lq_anf__dhjO =
                                                 GHC.Num.fromInteger
                                                   @ GHC.Word.Word16
                                                   GHC.Word.$fNumWord16
                                                   lq_anf__dhjN } in
                                             let {
                                               lq_anf__dhjP :: GHC.Word.Word16
                                               [LclId]
                                               lq_anf__dhjP =
                                                 Data.Bits..&.
                                                   @ GHC.Word.Word16
                                                   GHC.Word.$fBitsWord16
                                                   w
                                                   lq_anf__dhjO } in
                                             let {
                                               lq_anf__dhjQ :: GHC.Integer.Type.Integer
                                               [LclId]
                                               lq_anf__dhjQ = __integer 128 } in
                                             let {
                                               lq_anf__dhjR :: GHC.Word.Word16
                                               [LclId]
                                               lq_anf__dhjR =
                                                 GHC.Num.fromInteger
                                                   @ GHC.Word.Word16
                                                   GHC.Word.$fNumWord16
                                                   lq_anf__dhjQ } in
                                             let {
                                               lq_anf__dhjS :: GHC.Word.Word16
                                               [LclId]
                                               lq_anf__dhjS =
                                                 GHC.Num.+
                                                   @ GHC.Word.Word16
                                                   GHC.Word.$fNumWord16
                                                   lq_anf__dhjP
                                                   lq_anf__dhjR } in
                                             let {
                                               lq_anf__dhjT :: GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhjT =
                                                 GHC.Base.$
                                                   @ GHC.Word.Word16
                                                   @ (GHC.Types.IO ())
                                                   lq_anf__dhjM
                                                   lq_anf__dhjS } in
                                             let {
                                               lq_anf__dhjU :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhjU = GHC.Types.I# 1 } in
                                             let {
                                               lq_anf__dhjV :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhjV =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhiS
                                                   lq_anf__dhjU } in
                                             let {
                                               lq_anf__dhjW :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhjW =
                                                 GHC.Num.-
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   offLen
                                                   lq_anf__dhjV } in
                                             let {
                                               lq_anf__dhjX :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhjX = GHC.Types.I# 1 } in
                                             let {
                                               lq_anf__dhjY :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhjY =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhiS
                                                   lq_anf__dhjX } in
                                             let {
                                               lq_anf__dhjZ :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhjZ = GHC.Types.I# 3 } in
                                             let {
                                               lq_anf__dhk0 :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhk0 =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhiT
                                                   lq_anf__dhjZ } in
                                             let {
                                               lq_anf__dhk1
                                                 :: GHC.Types.IO Data.ByteString.Internal.ByteString
                                               [LclId]
                                               lq_anf__dhk1 =
                                                 go lq_anf__dhjW lq_anf__dhjY lq_anf__dhk0 } in
                                             let {
                                               lq_anf__dhk2
                                                 :: GHC.Types.IO Data.ByteString.Internal.ByteString
                                               [LclId]
                                               lq_anf__dhk2 =
                                                 GHC.Base.>>
                                                   @ GHC.Types.IO
                                                   GHC.Base.$fMonadIO
                                                   @ ()
                                                   @ Data.ByteString.Internal.ByteString
                                                   lq_anf__dhjT
                                                   lq_anf__dhk1 } in
                                             let {
                                               lq_anf__dhk3
                                                 :: GHC.Types.IO Data.ByteString.Internal.ByteString
                                               [LclId]
                                               lq_anf__dhk3 =
                                                 GHC.Base.>>
                                                   @ GHC.Types.IO
                                                   GHC.Base.$fMonadIO
                                                   @ ()
                                                   @ Data.ByteString.Internal.ByteString
                                                   lq_anf__dhjJ
                                                   lq_anf__dhk2 } in
                                             GHC.Base.>>
                                               @ GHC.Types.IO
                                               GHC.Base.$fMonadIO
                                               @ ()
                                               @ Data.ByteString.Internal.ByteString
                                               lq_anf__dhjx
                                               lq_anf__dhk3 } in
                                       GHC.Base.$
                                         @ (GHC.Ptr.Ptr GHC.Word.Word8
                                            -> GHC.Types.IO Data.ByteString.Internal.ByteString)
                                         @ (GHC.Types.IO Data.ByteString.Internal.ByteString)
                                         lq_anf__dhjq
                                         lq_anf__dhk4;
                                     GHC.Types.True ->
                                       let {
                                         lq_anf__dhk5 :: GHC.Types.Int
                                         [LclId]
                                         lq_anf__dhk5 = GHC.Types.I# 4 } in
                                       let {
                                         lq_anf__dhk6
                                           :: (GHC.Ptr.Ptr GHC.Word.Word8
                                               -> GHC.Types.IO Data.ByteString.Internal.ByteString)
                                              -> GHC.Types.IO Data.ByteString.Internal.ByteString
                                         [LclId]
                                         lq_anf__dhk6 = ensure lq_anf__dhk5 } in
                                       let {
                                         lq_anf__dhkU
                                           :: GHC.Ptr.Ptr GHC.Word.Word8
                                              -> GHC.Types.IO Data.ByteString.Internal.ByteString
                                         [LclId]
                                         lq_anf__dhkU =
                                           \ _ ->
                                             let {
                                               lq_anf__dhk7 :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhk7 = GHC.Types.I# 1 } in
                                             let {
                                               lq_anf__dhk8 :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhk8 =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhiS
                                                   lq_anf__dhk7 } in
                                             let {
                                               lq_anf__dhk9 :: GHC.Word.Word16
                                               [LclId]
                                               lq_anf__dhk9 =
                                                 Data.Text.Array.unsafeIndex arr lq_anf__dhk8 } in
                                             let {
                                               lq_anf__dhka :: GHC.Types.Char
                                               [LclId]
                                               lq_anf__dhka =
                                                 Data.Text.Encoding.Utf16.chr2 w lq_anf__dhk9 } in
                                             let {
                                               c :: GHC.Types.Int
                                               [LclId]
                                               c =
                                                 GHC.Base.$
                                                   @ GHC.Types.Char
                                                   @ GHC.Types.Int
                                                   Data.Text.UnsafeChar.ord
                                                   lq_anf__dhka } in
                                             let {
                                               lq_anf__dhkb :: GHC.Types.Int -> GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhkb =
                                                 poke8
                                                   @ GHC.Types.Int
                                                   GHC.Real.$fIntegralInt
                                                   lq_anf__dhiT } in
                                             let {
                                               lq_anf__dhkc :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkc = GHC.Types.I# 18 } in
                                             let {
                                               lq_anf__dhkd :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkd =
                                                 Data.Text.UnsafeShift.shiftR
                                                   @ GHC.Types.Int
                                                   Data.Text.UnsafeShift.$fUnsafeShiftInt
                                                   c
                                                   lq_anf__dhkc } in
                                             let {
                                               lq_anf__dhke :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhke = GHC.Types.I# 240 } in
                                             let {
                                               lq_anf__dhkf :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkf =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhkd
                                                   lq_anf__dhke } in
                                             let {
                                               lq_anf__dhkg :: GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhkg =
                                                 GHC.Base.$
                                                   @ GHC.Types.Int
                                                   @ (GHC.Types.IO ())
                                                   lq_anf__dhkb
                                                   lq_anf__dhkf } in
                                             let {
                                               lq_anf__dhkh :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkh = GHC.Types.I# 1 } in
                                             let {
                                               lq_anf__dhki :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhki =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhiT
                                                   lq_anf__dhkh } in
                                             let {
                                               lq_anf__dhkj :: GHC.Types.Int -> GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhkj =
                                                 poke8
                                                   @ GHC.Types.Int
                                                   GHC.Real.$fIntegralInt
                                                   lq_anf__dhki } in
                                             let {
                                               lq_anf__dhkk :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkk = GHC.Types.I# 12 } in
                                             let {
                                               lq_anf__dhkl :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkl =
                                                 Data.Text.UnsafeShift.shiftR
                                                   @ GHC.Types.Int
                                                   Data.Text.UnsafeShift.$fUnsafeShiftInt
                                                   c
                                                   lq_anf__dhkk } in
                                             let {
                                               lq_anf__dhkm :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkm = GHC.Types.I# 63 } in
                                             let {
                                               lq_anf__dhkn :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkn =
                                                 Data.Bits..&.
                                                   @ GHC.Types.Int
                                                   Data.Bits.$fBitsInt
                                                   lq_anf__dhkl
                                                   lq_anf__dhkm } in
                                             let {
                                               lq_anf__dhko :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhko = GHC.Types.I# 128 } in
                                             let {
                                               lq_anf__dhkp :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkp =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhkn
                                                   lq_anf__dhko } in
                                             let {
                                               lq_anf__dhkq :: GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhkq =
                                                 GHC.Base.$
                                                   @ GHC.Types.Int
                                                   @ (GHC.Types.IO ())
                                                   lq_anf__dhkj
                                                   lq_anf__dhkp } in
                                             let {
                                               lq_anf__dhkr :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkr = GHC.Types.I# 2 } in
                                             let {
                                               lq_anf__dhks :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhks =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhiT
                                                   lq_anf__dhkr } in
                                             let {
                                               lq_anf__dhkt :: GHC.Types.Int -> GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhkt =
                                                 poke8
                                                   @ GHC.Types.Int
                                                   GHC.Real.$fIntegralInt
                                                   lq_anf__dhks } in
                                             let {
                                               lq_anf__dhku :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhku = GHC.Types.I# 6 } in
                                             let {
                                               lq_anf__dhkv :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkv =
                                                 Data.Text.UnsafeShift.shiftR
                                                   @ GHC.Types.Int
                                                   Data.Text.UnsafeShift.$fUnsafeShiftInt
                                                   c
                                                   lq_anf__dhku } in
                                             let {
                                               lq_anf__dhkw :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkw = GHC.Types.I# 63 } in
                                             let {
                                               lq_anf__dhkx :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkx =
                                                 Data.Bits..&.
                                                   @ GHC.Types.Int
                                                   Data.Bits.$fBitsInt
                                                   lq_anf__dhkv
                                                   lq_anf__dhkw } in
                                             let {
                                               lq_anf__dhky :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhky = GHC.Types.I# 128 } in
                                             let {
                                               lq_anf__dhkz :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkz =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhkx
                                                   lq_anf__dhky } in
                                             let {
                                               lq_anf__dhkA :: GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhkA =
                                                 GHC.Base.$
                                                   @ GHC.Types.Int
                                                   @ (GHC.Types.IO ())
                                                   lq_anf__dhkt
                                                   lq_anf__dhkz } in
                                             let {
                                               lq_anf__dhkB :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkB = GHC.Types.I# 3 } in
                                             let {
                                               lq_anf__dhkC :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkC =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhiT
                                                   lq_anf__dhkB } in
                                             let {
                                               lq_anf__dhkD :: GHC.Types.Int -> GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhkD =
                                                 poke8
                                                   @ GHC.Types.Int
                                                   GHC.Real.$fIntegralInt
                                                   lq_anf__dhkC } in
                                             let {
                                               lq_anf__dhkE :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkE = GHC.Types.I# 63 } in
                                             let {
                                               lq_anf__dhkF :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkF =
                                                 Data.Bits..&.
                                                   @ GHC.Types.Int
                                                   Data.Bits.$fBitsInt
                                                   c
                                                   lq_anf__dhkE } in
                                             let {
                                               lq_anf__dhkG :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkG = GHC.Types.I# 128 } in
                                             let {
                                               lq_anf__dhkH :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkH =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhkF
                                                   lq_anf__dhkG } in
                                             let {
                                               lq_anf__dhkI :: GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhkI =
                                                 GHC.Base.$
                                                   @ GHC.Types.Int
                                                   @ (GHC.Types.IO ())
                                                   lq_anf__dhkD
                                                   lq_anf__dhkH } in
                                             let {
                                               lq_anf__dhkJ :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkJ = GHC.Types.I# 2 } in
                                             let {
                                               lq_anf__dhkK :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkK =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhiS
                                                   lq_anf__dhkJ } in
                                             let {
                                               lq_anf__dhkL :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkL =
                                                 GHC.Num.-
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   offLen
                                                   lq_anf__dhkK } in
                                             let {
                                               lq_anf__dhkM :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkM = GHC.Types.I# 2 } in
                                             let {
                                               lq_anf__dhkN :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkN =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhiS
                                                   lq_anf__dhkM } in
                                             let {
                                               lq_anf__dhkO :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkO = GHC.Types.I# 4 } in
                                             let {
                                               lq_anf__dhkP :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkP =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhiT
                                                   lq_anf__dhkO } in
                                             let {
                                               lq_anf__dhkQ
                                                 :: GHC.Types.IO Data.ByteString.Internal.ByteString
                                               [LclId]
                                               lq_anf__dhkQ =
                                                 go lq_anf__dhkL lq_anf__dhkN lq_anf__dhkP } in
                                             let {
                                               lq_anf__dhkR
                                                 :: GHC.Types.IO Data.ByteString.Internal.ByteString
                                               [LclId]
                                               lq_anf__dhkR =
                                                 GHC.Base.>>
                                                   @ GHC.Types.IO
                                                   GHC.Base.$fMonadIO
                                                   @ ()
                                                   @ Data.ByteString.Internal.ByteString
                                                   lq_anf__dhkI
                                                   lq_anf__dhkQ } in
                                             let {
                                               lq_anf__dhkS
                                                 :: GHC.Types.IO Data.ByteString.Internal.ByteString
                                               [LclId]
                                               lq_anf__dhkS =
                                                 GHC.Base.>>
                                                   @ GHC.Types.IO
                                                   GHC.Base.$fMonadIO
                                                   @ ()
                                                   @ Data.ByteString.Internal.ByteString
                                                   lq_anf__dhkA
                                                   lq_anf__dhkR } in
                                             let {
                                               lq_anf__dhkT
                                                 :: GHC.Types.IO Data.ByteString.Internal.ByteString
                                               [LclId]
                                               lq_anf__dhkT =
                                                 GHC.Base.>>
                                                   @ GHC.Types.IO
                                                   GHC.Base.$fMonadIO
                                                   @ ()
                                                   @ Data.ByteString.Internal.ByteString
                                                   lq_anf__dhkq
                                                   lq_anf__dhkS } in
                                             GHC.Base.>>
                                               @ GHC.Types.IO
                                               GHC.Base.$fMonadIO
                                               @ ()
                                               @ Data.ByteString.Internal.ByteString
                                               lq_anf__dhkg
                                               lq_anf__dhkT } in
                                       GHC.Base.$
                                         @ (GHC.Ptr.Ptr GHC.Word.Word8
                                            -> GHC.Types.IO Data.ByteString.Internal.ByteString)
                                         @ (GHC.Types.IO Data.ByteString.Internal.ByteString)
                                         lq_anf__dhk6
                                         lq_anf__dhkU
                                   };
                                 GHC.Types.True ->
                                   let {
                                     lq_anf__dhkV :: GHC.Types.Int
                                     [LclId]
                                     lq_anf__dhkV = GHC.Types.I# 2 } in
                                   let {
                                     lq_anf__dhkW
                                       :: (GHC.Ptr.Ptr GHC.Word.Word8
                                           -> GHC.Types.IO Data.ByteString.Internal.ByteString)
                                          -> GHC.Types.IO Data.ByteString.Internal.ByteString
                                     [LclId]
                                     lq_anf__dhkW = ensure lq_anf__dhkV } in
                                   let {
                                     lq_anf__dhln
                                       :: GHC.Ptr.Ptr GHC.Word.Word8
                                          -> GHC.Types.IO Data.ByteString.Internal.ByteString
                                     [LclId]
                                     lq_anf__dhln =
                                       \ _ ->
                                         let {
                                           lq_anf__dhkX :: GHC.Word.Word16 -> GHC.Types.IO ()
                                           [LclId]
                                           lq_anf__dhkX =
                                             poke8
                                               @ GHC.Word.Word16
                                               GHC.Word.$fIntegralWord16
                                               lq_anf__dhiT } in
                                         let {
                                           lq_anf__dhkY :: GHC.Types.Int
                                           [LclId]
                                           lq_anf__dhkY = GHC.Types.I# 6 } in
                                         let {
                                           lq_anf__dhkZ :: GHC.Word.Word16
                                           [LclId]
                                           lq_anf__dhkZ =
                                             Data.Text.UnsafeShift.shiftR
                                               @ GHC.Word.Word16
                                               Data.Text.UnsafeShift.$fUnsafeShiftWord16
                                               w
                                               lq_anf__dhkY } in
                                         let {
                                           lq_anf__dhl0 :: GHC.Integer.Type.Integer
                                           [LclId]
                                           lq_anf__dhl0 = __integer 192 } in
                                         let {
                                           lq_anf__dhl1 :: GHC.Word.Word16
                                           [LclId]
                                           lq_anf__dhl1 =
                                             GHC.Num.fromInteger
                                               @ GHC.Word.Word16
                                               GHC.Word.$fNumWord16
                                               lq_anf__dhl0 } in
                                         let {
                                           lq_anf__dhl2 :: GHC.Word.Word16
                                           [LclId]
                                           lq_anf__dhl2 =
                                             GHC.Num.+
                                               @ GHC.Word.Word16
                                               GHC.Word.$fNumWord16
                                               lq_anf__dhkZ
                                               lq_anf__dhl1 } in
                                         let {
                                           lq_anf__dhl3 :: GHC.Types.IO ()
                                           [LclId]
                                           lq_anf__dhl3 =
                                             GHC.Base.$
                                               @ GHC.Word.Word16
                                               @ (GHC.Types.IO ())
                                               lq_anf__dhkX
                                               lq_anf__dhl2 } in
                                         let {
                                           lq_anf__dhl4 :: GHC.Types.Int
                                           [LclId]
                                           lq_anf__dhl4 = GHC.Types.I# 1 } in
                                         let {
                                           lq_anf__dhl5 :: GHC.Types.Int
                                           [LclId]
                                           lq_anf__dhl5 =
                                             GHC.Num.+
                                               @ GHC.Types.Int
                                               GHC.Num.$fNumInt
                                               lq_anf__dhiT
                                               lq_anf__dhl4 } in
                                         let {
                                           lq_anf__dhl6 :: GHC.Word.Word16 -> GHC.Types.IO ()
                                           [LclId]
                                           lq_anf__dhl6 =
                                             poke8
                                               @ GHC.Word.Word16
                                               GHC.Word.$fIntegralWord16
                                               lq_anf__dhl5 } in
                                         let {
                                           lq_anf__dhl7 :: GHC.Integer.Type.Integer
                                           [LclId]
                                           lq_anf__dhl7 = __integer 63 } in
                                         let {
                                           lq_anf__dhl8 :: GHC.Word.Word16
                                           [LclId]
                                           lq_anf__dhl8 =
                                             GHC.Num.fromInteger
                                               @ GHC.Word.Word16
                                               GHC.Word.$fNumWord16
                                               lq_anf__dhl7 } in
                                         let {
                                           lq_anf__dhl9 :: GHC.Word.Word16
                                           [LclId]
                                           lq_anf__dhl9 =
                                             Data.Bits..&.
                                               @ GHC.Word.Word16
                                               GHC.Word.$fBitsWord16
                                               w
                                               lq_anf__dhl8 } in
                                         let {
                                           lq_anf__dhla :: GHC.Integer.Type.Integer
                                           [LclId]
                                           lq_anf__dhla = __integer 128 } in
                                         let {
                                           lq_anf__dhlb :: GHC.Word.Word16
                                           [LclId]
                                           lq_anf__dhlb =
                                             GHC.Num.fromInteger
                                               @ GHC.Word.Word16
                                               GHC.Word.$fNumWord16
                                               lq_anf__dhla } in
                                         let {
                                           lq_anf__dhlc :: GHC.Word.Word16
                                           [LclId]
                                           lq_anf__dhlc =
                                             GHC.Num.+
                                               @ GHC.Word.Word16
                                               GHC.Word.$fNumWord16
                                               lq_anf__dhl9
                                               lq_anf__dhlb } in
                                         let {
                                           lq_anf__dhld :: GHC.Types.IO ()
                                           [LclId]
                                           lq_anf__dhld =
                                             GHC.Base.$
                                               @ GHC.Word.Word16
                                               @ (GHC.Types.IO ())
                                               lq_anf__dhl6
                                               lq_anf__dhlc } in
                                         let {
                                           lq_anf__dhle :: GHC.Types.Int
                                           [LclId]
                                           lq_anf__dhle = GHC.Types.I# 1 } in
                                         let {
                                           lq_anf__dhlf :: GHC.Types.Int
                                           [LclId]
                                           lq_anf__dhlf =
                                             GHC.Num.+
                                               @ GHC.Types.Int
                                               GHC.Num.$fNumInt
                                               lq_anf__dhiS
                                               lq_anf__dhle } in
                                         let {
                                           lq_anf__dhlg :: GHC.Types.Int
                                           [LclId]
                                           lq_anf__dhlg =
                                             GHC.Num.-
                                               @ GHC.Types.Int
                                               GHC.Num.$fNumInt
                                               offLen
                                               lq_anf__dhlf } in
                                         let {
                                           lq_anf__dhlh :: GHC.Types.Int
                                           [LclId]
                                           lq_anf__dhlh = GHC.Types.I# 1 } in
                                         let {
                                           lq_anf__dhli :: GHC.Types.Int
                                           [LclId]
                                           lq_anf__dhli =
                                             GHC.Num.+
                                               @ GHC.Types.Int
                                               GHC.Num.$fNumInt
                                               lq_anf__dhiS
                                               lq_anf__dhlh } in
                                         let {
                                           lq_anf__dhlj :: GHC.Types.Int
                                           [LclId]
                                           lq_anf__dhlj = GHC.Types.I# 2 } in
                                         let {
                                           lq_anf__dhlk :: GHC.Types.Int
                                           [LclId]
                                           lq_anf__dhlk =
                                             GHC.Num.+
                                               @ GHC.Types.Int
                                               GHC.Num.$fNumInt
                                               lq_anf__dhiT
                                               lq_anf__dhlj } in
                                         let {
                                           lq_anf__dhll
                                             :: GHC.Types.IO Data.ByteString.Internal.ByteString
                                           [LclId]
                                           lq_anf__dhll =
                                             go lq_anf__dhlg lq_anf__dhli lq_anf__dhlk } in
                                         let {
                                           lq_anf__dhlm
                                             :: GHC.Types.IO Data.ByteString.Internal.ByteString
                                           [LclId]
                                           lq_anf__dhlm =
                                             GHC.Base.>>
                                               @ GHC.Types.IO
                                               GHC.Base.$fMonadIO
                                               @ ()
                                               @ Data.ByteString.Internal.ByteString
                                               lq_anf__dhld
                                               lq_anf__dhll } in
                                         GHC.Base.>>
                                           @ GHC.Types.IO
                                           GHC.Base.$fMonadIO
                                           @ ()
                                           @ Data.ByteString.Internal.ByteString
                                           lq_anf__dhl3
                                           lq_anf__dhlm } in
                                   GHC.Base.$
                                     @ (GHC.Ptr.Ptr GHC.Word.Word8
                                        -> GHC.Types.IO Data.ByteString.Internal.ByteString)
                                     @ (GHC.Types.IO Data.ByteString.Internal.ByteString)
                                     lq_anf__dhkW
                                     lq_anf__dhln
                               };
                             GHC.Types.True ->
                               let {
                                 lq_anf__dhlo :: GHC.Types.Int
                                 [LclId]
                                 lq_anf__dhlo = GHC.Types.I# 1 } in
                               let {
                                 lq_anf__dhlp
                                   :: (GHC.Ptr.Ptr GHC.Word.Word8
                                       -> GHC.Types.IO Data.ByteString.Internal.ByteString)
                                      -> GHC.Types.IO Data.ByteString.Internal.ByteString
                                 [LclId]
                                 lq_anf__dhlp = ensure lq_anf__dhlo } in
                               let {
                                 lq_anf__dhlY
                                   :: GHC.Ptr.Ptr GHC.Word.Word8
                                      -> GHC.Types.IO Data.ByteString.Internal.ByteString
                                 [LclId]
                                 lq_anf__dhlY =
                                   \ (ptr :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                                     let {
                                       lq_anf__dhlq :: GHC.Ptr.Ptr GHC.Word.Word8
                                       [LclId]
                                       lq_anf__dhlq =
                                         GHC.Ptr.plusPtr
                                           @ GHC.Word.Word8 @ GHC.Word.Word8 ptr lq_anf__dhiT } in
                                     let {
                                       lq_anf__dhlr :: GHC.Word.Word8
                                       [LclId]
                                       lq_anf__dhlr =
                                         GHC.Real.fromIntegral
                                           @ GHC.Word.Word16
                                           @ GHC.Word.Word8
                                           GHC.Word.$fIntegralWord16
                                           GHC.Word.$fNumWord8
                                           w } in
                                     let {
                                       lq_anf__dhls :: GHC.Types.IO ()
                                       [LclId]
                                       lq_anf__dhls =
                                         Foreign.Storable.poke
                                           @ GHC.Word.Word8
                                           Foreign.Storable.$fStorableWord8
                                           lq_anf__dhlq
                                           lq_anf__dhlr } in
                                     let {
                                       end :: GHC.Ptr.Ptr GHC.Word.Word8
                                       [LclId]
                                       end =
                                         GHC.Ptr.plusPtr
                                           @ GHC.Word.Word8 @ GHC.Word.Word8 ptr size } in
                                     letrec {
                                       ascii [Occ=LoopBreaker]
                                         :: GHC.Types.Int
                                            -> GHC.Types.Int
                                            -> GHC.Ptr.Ptr GHC.Word.Word8
                                            -> GHC.Types.IO Data.ByteString.Internal.ByteString
                                       [LclId]
                                       ascii =
                                         \ (ds_dhgF :: GHC.Types.Int)
                                           (t :: GHC.Types.Int)
                                           (u :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                                           case t of lq_anf__dhlt { GHC.Types.I# lq_anf__dhlP ->
                                           case u of lq_anf__dhlu { GHC.Ptr.Ptr lq_anf__dhlO ->
                                           let {
                                             lq_anf__dhlv :: GHC.Types.Bool
                                             [LclId]
                                             lq_anf__dhlv =
                                               GHC.Classes.==
                                                 @ GHC.Types.Int
                                                 GHC.Classes.$fEqInt
                                                 lq_anf__dhlt
                                                 offLen } in
                                           let {
                                             lq_anf__dhlw :: GHC.Types.Bool
                                             [LclId]
                                             lq_anf__dhlw =
                                               Language.Haskell.Liquid.Foreign.eqPtr
                                                 @ GHC.Word.Word8 lq_anf__dhlu end } in
                                           let {
                                             lq_anf__dhlx :: GHC.Types.Bool
                                             [LclId]
                                             lq_anf__dhlx =
                                               GHC.Classes.|| lq_anf__dhlv lq_anf__dhlw } in
                                           case lq_anf__dhlx of lq_anf__dhly {
                                             GHC.Types.False ->
                                               let {
                                                 v :: GHC.Word.Word16
                                                 [LclId]
                                                 v =
                                                   Data.Text.Array.unsafeIndex arr lq_anf__dhlt } in
                                               let {
                                                 lq_anf__dhlz :: GHC.Integer.Type.Integer
                                                 [LclId]
                                                 lq_anf__dhlz = __integer 128 } in
                                               let {
                                                 lq_anf__dhlA :: GHC.Word.Word16
                                                 [LclId]
                                                 lq_anf__dhlA =
                                                   GHC.Num.fromInteger
                                                     @ GHC.Word.Word16
                                                     GHC.Word.$fNumWord16
                                                     lq_anf__dhlz } in
                                               let {
                                                 lq_anf__dhlB :: GHC.Types.Bool
                                                 [LclId]
                                                 lq_anf__dhlB =
                                                   GHC.Classes.>=
                                                     @ GHC.Word.Word16
                                                     GHC.Word.$fOrdWord16
                                                     v
                                                     lq_anf__dhlA } in
                                               case lq_anf__dhlB of lq_anf__dhlC {
                                                 GHC.Types.False ->
                                                   let {
                                                     lq_anf__dhlD :: GHC.Word.Word8
                                                     [LclId]
                                                     lq_anf__dhlD =
                                                       GHC.Real.fromIntegral
                                                         @ GHC.Word.Word16
                                                         @ GHC.Word.Word8
                                                         GHC.Word.$fIntegralWord16
                                                         GHC.Word.$fNumWord8
                                                         v } in
                                                   let {
                                                     lq_anf__dhlE :: GHC.Types.IO ()
                                                     [LclId]
                                                     lq_anf__dhlE =
                                                       Foreign.Storable.poke
                                                         @ GHC.Word.Word8
                                                         Foreign.Storable.$fStorableWord8
                                                         lq_anf__dhlu
                                                         lq_anf__dhlD } in
                                                   let {
                                                     lq_anf__dhlF :: GHC.Types.Int
                                                     [LclId]
                                                     lq_anf__dhlF = GHC.Types.I# 1 } in
                                                   let {
                                                     lq_anf__dhlG :: GHC.Types.Int
                                                     [LclId]
                                                     lq_anf__dhlG =
                                                       GHC.Num.-
                                                         @ GHC.Types.Int
                                                         GHC.Num.$fNumInt
                                                         ds_dhgF
                                                         lq_anf__dhlF } in
                                                   let {
                                                     lq_anf__dhlH :: GHC.Types.Int
                                                     [LclId]
                                                     lq_anf__dhlH = GHC.Types.I# 1 } in
                                                   let {
                                                     lq_anf__dhlI :: GHC.Types.Int
                                                     [LclId]
                                                     lq_anf__dhlI =
                                                       GHC.Num.+
                                                         @ GHC.Types.Int
                                                         GHC.Num.$fNumInt
                                                         lq_anf__dhlt
                                                         lq_anf__dhlH } in
                                                   let {
                                                     lq_anf__dhlJ :: GHC.Types.Int
                                                     [LclId]
                                                     lq_anf__dhlJ = GHC.Types.I# 1 } in
                                                   let {
                                                     lq_anf__dhlK :: GHC.Ptr.Ptr GHC.Word.Word8
                                                     [LclId]
                                                     lq_anf__dhlK =
                                                       GHC.Ptr.plusPtr
                                                         @ GHC.Word.Word8
                                                         @ GHC.Word.Word8
                                                         lq_anf__dhlu
                                                         lq_anf__dhlJ } in
                                                   let {
                                                     lq_anf__dhlL
                                                       :: GHC.Types.IO
                                                            Data.ByteString.Internal.ByteString
                                                     [LclId]
                                                     lq_anf__dhlL =
                                                       ascii
                                                         lq_anf__dhlG lq_anf__dhlI lq_anf__dhlK } in
                                                   GHC.Base.>>
                                                     @ GHC.Types.IO
                                                     GHC.Base.$fMonadIO
                                                     @ ()
                                                     @ Data.ByteString.Internal.ByteString
                                                     lq_anf__dhlE
                                                     lq_anf__dhlL;
                                                 GHC.Types.True ->
                                                   let {
                                                     lq_anf__dhlM :: GHC.Types.Int
                                                     [LclId]
                                                     lq_anf__dhlM =
                                                       GHC.Ptr.minusPtr
                                                         @ GHC.Word.Word8
                                                         @ GHC.Word.Word8
                                                         lq_anf__dhlu
                                                         ptr } in
                                                   go ds_dhgF lq_anf__dhlt lq_anf__dhlM
                                               };
                                             GHC.Types.True ->
                                               let {
                                                 lq_anf__dhlN :: GHC.Types.Int
                                                 [LclId]
                                                 lq_anf__dhlN =
                                                   GHC.Ptr.minusPtr
                                                     @ GHC.Word.Word8
                                                     @ GHC.Word.Word8
                                                     lq_anf__dhlu
                                                     ptr } in
                                               go ds_dhgF lq_anf__dhlt lq_anf__dhlN
                                           }
                                           }
                                           }; } in
                                     let {
                                       ascii
                                         :: GHC.Types.Int
                                            -> GHC.Types.Int
                                            -> GHC.Ptr.Ptr GHC.Word.Word8
                                            -> GHC.Types.IO Data.ByteString.Internal.ByteString
                                       [LclId]
                                       ascii = ascii } in
                                     let {
                                       lq_anf__dhlQ :: GHC.Types.Int
                                       [LclId]
                                       lq_anf__dhlQ = GHC.Types.I# 1 } in
                                     let {
                                       lq_anf__dhlR :: GHC.Types.Int
                                       [LclId]
                                       lq_anf__dhlR =
                                         GHC.Num.-
                                           @ GHC.Types.Int
                                           GHC.Num.$fNumInt
                                           ds_dhh2
                                           lq_anf__dhlQ } in
                                     let {
                                       lq_anf__dhlS :: GHC.Types.Int
                                       [LclId]
                                       lq_anf__dhlS = GHC.Types.I# 1 } in
                                     let {
                                       lq_anf__dhlT :: GHC.Types.Int
                                       [LclId]
                                       lq_anf__dhlT =
                                         GHC.Num.+
                                           @ GHC.Types.Int
                                           GHC.Num.$fNumInt
                                           lq_anf__dhiS
                                           lq_anf__dhlS } in
                                     let {
                                       lq_anf__dhlU :: GHC.Types.Int
                                       [LclId]
                                       lq_anf__dhlU = GHC.Types.I# 1 } in
                                     let {
                                       lq_anf__dhlV :: GHC.Types.Int
                                       [LclId]
                                       lq_anf__dhlV =
                                         GHC.Num.+
                                           @ GHC.Types.Int
                                           GHC.Num.$fNumInt
                                           lq_anf__dhiT
                                           lq_anf__dhlU } in
                                     let {
                                       lq_anf__dhlW :: GHC.Ptr.Ptr GHC.Word.Word8
                                       [LclId]
                                       lq_anf__dhlW =
                                         GHC.Ptr.plusPtr
                                           @ GHC.Word.Word8 @ GHC.Word.Word8 ptr lq_anf__dhlV } in
                                     let {
                                       lq_anf__dhlX
                                         :: GHC.Types.IO Data.ByteString.Internal.ByteString
                                       [LclId]
                                       lq_anf__dhlX =
                                         ascii lq_anf__dhlR lq_anf__dhlT lq_anf__dhlW } in
                                     GHC.Base.>>
                                       @ GHC.Types.IO
                                       GHC.Base.$fMonadIO
                                       @ ()
                                       @ Data.ByteString.Internal.ByteString
                                       lq_anf__dhls
                                       lq_anf__dhlX } in
                               GHC.Base.$
                                 @ (GHC.Ptr.Ptr GHC.Word.Word8
                                    -> GHC.Types.IO Data.ByteString.Internal.ByteString)
                                 @ (GHC.Types.IO Data.ByteString.Internal.ByteString)
                                 lq_anf__dhlp
                                 lq_anf__dhlY
                           };
                         GHC.Types.True ->
                           let {
                             lq_anf__dhlZ :: GHC.Types.Int
                             [LclId]
                             lq_anf__dhlZ = GHC.Types.I# 0 } in
                           let {
                             lq_anf__dhm0 :: Data.ByteString.Internal.ByteString
                             [LclId]
                             lq_anf__dhm0 =
                               Data.ByteString.Internal.$WPS fp lq_anf__dhlZ lq_anf__dhiT } in
                           GHC.Base.return
                             @ GHC.Types.IO
                             GHC.Base.$fMonadIO
                             @ Data.ByteString.Internal.ByteString
                             lq_anf__dhm0
                       }
                       }
                       }; } in
                 let {
                   go
                     :: GHC.Types.Int
                        -> GHC.Types.Int
                        -> GHC.Types.Int
                        -> GHC.Types.IO Data.ByteString.Internal.ByteString
                   [LclId]
                   go = go } in
                 let {
                   lq_anf__dhm3 :: GHC.Types.Int
                   [LclId]
                   lq_anf__dhm3 =
                     GHC.Num.- @ GHC.Types.Int GHC.Num.$fNumInt offLen n1 } in
                 go lq_anf__dhm3 n1 m1 } in
           let {
             lq_anf__dhm4
               :: (GHC.Ptr.Ptr GHC.Word.Word8
                   -> GHC.Types.IO Data.ByteString.Internal.ByteString)
                  -> GHC.Types.IO Data.ByteString.Internal.ByteString
             [LclId]
             lq_anf__dhm4 =
               Foreign.ForeignPtr.Imp.withForeignPtr
                 @ GHC.Word.Word8 @ Data.ByteString.Internal.ByteString fp } in
           let {
             lq_anf__dhm5
               :: GHC.Ptr.Ptr GHC.Word.Word8
                  -> GHC.Types.IO Data.ByteString.Internal.ByteString
             [LclId]
             lq_anf__dhm5 = loop n0 m0 } in
           GHC.Base.$
             @ (GHC.Ptr.Ptr GHC.Word.Word8
                -> GHC.Types.IO Data.ByteString.Internal.ByteString)
             @ (GHC.Types.IO Data.ByteString.Internal.ByteString)
             lq_anf__dhm4
             lq_anf__dhm5; } in
     let {
       start
         :: GHC.Types.Int
            -> GHC.Types.Int
            -> GHC.Types.Int
            -> GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
            -> GHC.Types.IO Data.ByteString.Internal.ByteString
       [LclId]
       start = start } in
     let {
       lq_anf__dhm6
         :: GHC.Types.IO Data.ByteString.Internal.ByteString
            -> Data.ByteString.Internal.ByteString
       [LclId]
       lq_anf__dhm6 =
         GHC.IO.unsafePerformIO @ Data.ByteString.Internal.ByteString } in
     let {
       lq_anf__dhm7 :: GHC.Types.Int
       [LclId]
       lq_anf__dhm7 = GHC.Types.I# 4 } in
     let {
       size0 :: GHC.Types.Int
       [LclId]
       size0 =
         GHC.Classes.max
           @ GHC.Types.Int GHC.Classes.$fOrdInt len lq_anf__dhm7 } in
     let {
       lq_anf__dhm8
         :: GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
       [LclId]
       lq_anf__dhm8 =
         Data.ByteString.Internal.mallocByteString
           @ GHC.Word.Word8 size0 } in
     let {
       lq_anf__dhm9 :: GHC.Types.Int
       [LclId]
       lq_anf__dhm9 = GHC.Types.I# 0 } in
     let {
       lq_anf__dhma
         :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
            -> GHC.Types.IO Data.ByteString.Internal.ByteString
       [LclId]
       lq_anf__dhma = start size0 off lq_anf__dhm9 } in
     let {
       lq_anf__dhmb :: GHC.Types.IO Data.ByteString.Internal.ByteString
       [LclId]
       lq_anf__dhmb =
         GHC.Base.>>=
           @ GHC.Types.IO
           GHC.Base.$fMonadIO
           @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
           @ Data.ByteString.Internal.ByteString
           lq_anf__dhm8
           lq_anf__dhma } in
     GHC.Base.$
       @ (GHC.Types.IO Data.ByteString.Internal.ByteString)
       @ Data.ByteString.Internal.ByteString
       lq_anf__dhm6
       lq_anf__dhmb
     }]
*************** Original CoreBinds ***************************
[Data.Text.Encoding.c_decode_utf8
   :: forall s.
      Data.Text.Array.MArray s
      -> GHC.Ptr.Ptr Foreign.C.Types.CSize
      -> GHC.Ptr.Ptr GHC.Word.Word8
      -> GHC.Ptr.Ptr GHC.Word.Word8
      -> GHC.Types.IO (GHC.Ptr.Ptr GHC.Word.Word8)
 [LclIdX]
 Data.Text.Encoding.c_decode_utf8 =
   \ (@ s) ->
     GHC.Err.undefined
       @ (Data.Text.Array.MArray s
          -> GHC.Ptr.Ptr Foreign.C.Types.CSize
          -> GHC.Ptr.Ptr GHC.Word.Word8
          -> GHC.Ptr.Ptr GHC.Word.Word8
          -> GHC.Types.IO (GHC.Ptr.Ptr GHC.Word.Word8)),
 Data.Text.Encoding.encodeUtf32BE [InlPrag=INLINE (sat-args=1)]
   :: Data.Text.Internal.Text -> Data.ByteString.Internal.ByteString
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=1, Value=True,
          ConLike=True, WorkFree=True, Expandable=True,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= \ (txt [Occ=OnceL] :: Data.Text.Internal.Text) ->
                  scc<CAF>
                  (scc<CAF> Data.Text.Encoding.Fusion.unstream)
                    (scc<CAF>
                     scc<CAF>
                     (scc<CAF> Data.Text.Encoding.Fusion.Common.restreamUtf32BE)
                       (scc<CAF>
                        scc<CAF> (scc<CAF> Data.Text.Fusion.stream) (scc<CAF> txt)))}]
 Data.Text.Encoding.encodeUtf32BE =
   \ (eta_B1 :: Data.Text.Internal.Text) ->
     (\ (txt :: Data.Text.Internal.Text) ->
        let {
          lq_anf__dhhE :: Data.Text.Fusion.Internal.Stream GHC.Types.Char
          [LclId]
          lq_anf__dhhE = Data.Text.Fusion.stream txt } in
        let {
          lq_anf__dhhF :: Data.Text.Fusion.Internal.Stream GHC.Word.Word8
          [LclId]
          lq_anf__dhhF =
            Data.Text.Encoding.Fusion.Common.restreamUtf32BE lq_anf__dhhE } in
        Data.Text.Encoding.Fusion.unstream lq_anf__dhhF)
       eta_B1,
 Data.Text.Encoding.encodeUtf32LE [InlPrag=INLINE (sat-args=1)]
   :: Data.Text.Internal.Text -> Data.ByteString.Internal.ByteString
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=1, Value=True,
          ConLike=True, WorkFree=True, Expandable=True,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= \ (txt [Occ=OnceL] :: Data.Text.Internal.Text) ->
                  scc<CAF>
                  (scc<CAF> Data.Text.Encoding.Fusion.unstream)
                    (scc<CAF>
                     scc<CAF>
                     (scc<CAF> Data.Text.Encoding.Fusion.Common.restreamUtf32LE)
                       (scc<CAF>
                        scc<CAF> (scc<CAF> Data.Text.Fusion.stream) (scc<CAF> txt)))}]
 Data.Text.Encoding.encodeUtf32LE =
   \ (eta_B1 :: Data.Text.Internal.Text) ->
     (\ (txt :: Data.Text.Internal.Text) ->
        let {
          lq_anf__dhhG :: Data.Text.Fusion.Internal.Stream GHC.Types.Char
          [LclId]
          lq_anf__dhhG = Data.Text.Fusion.stream txt } in
        let {
          lq_anf__dhhH :: Data.Text.Fusion.Internal.Stream GHC.Word.Word8
          [LclId]
          lq_anf__dhhH =
            Data.Text.Encoding.Fusion.Common.restreamUtf32LE lq_anf__dhhG } in
        Data.Text.Encoding.Fusion.unstream lq_anf__dhhH)
       eta_B1,
 Data.Text.Encoding.decodeUtf32BEWith [InlPrag=INLINE (sat-args=2)]
   :: Data.Text.Encoding.Error.OnDecodeError
      -> Data.ByteString.Internal.ByteString -> Data.Text.Internal.Text
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=2, Value=True,
          ConLike=True, WorkFree=True, Expandable=True,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= \ (onErr [Occ=OnceL]
                     :: Data.Text.Encoding.Error.OnDecodeError)
                  (bs [Occ=OnceL] :: Data.ByteString.Internal.ByteString) ->
                  scc<CAF>
                  (scc<CAF> Data.Text.Fusion.unstream)
                    (scc<CAF>
                     scc<CAF>
                     (scc<CAF>
                      (scc<CAF> Data.Text.Encoding.Fusion.streamUtf32BE)
                        (scc<CAF> onErr))
                       (scc<CAF> bs))}]
 Data.Text.Encoding.decodeUtf32BEWith =
   \ (eta_B2 :: Data.Text.Encoding.Error.OnDecodeError)
     (eta_B1 :: Data.ByteString.Internal.ByteString) ->
     (\ (onErr :: Data.Text.Encoding.Error.OnDecodeError)
        (bs :: Data.ByteString.Internal.ByteString) ->
        let {
          lq_anf__dhhI :: Data.Text.Fusion.Internal.Stream GHC.Types.Char
          [LclId]
          lq_anf__dhhI =
            Data.Text.Encoding.Fusion.streamUtf32BE onErr bs } in
        Data.Text.Fusion.unstream lq_anf__dhhI)
       eta_B2 eta_B1,
 Data.Text.Encoding.decodeUtf32BE [InlPrag=INLINE (sat-args=0)]
   :: Data.ByteString.Internal.ByteString -> Data.Text.Internal.Text
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=0, Value=False,
          ConLike=False, WorkFree=False, Expandable=False,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= scc<CAF>
                (scc<CAF> Data.Text.Encoding.decodeUtf32BEWith)
                  (scc<CAF> Data.Text.Encoding.Error.strictDecode)}]
 Data.Text.Encoding.decodeUtf32BE =
   Data.Text.Encoding.decodeUtf32BEWith
     Data.Text.Encoding.Error.strictDecode,
 Data.Text.Encoding.decodeUtf32LEWith [InlPrag=INLINE (sat-args=2)]
   :: Data.Text.Encoding.Error.OnDecodeError
      -> Data.ByteString.Internal.ByteString -> Data.Text.Internal.Text
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=2, Value=True,
          ConLike=True, WorkFree=True, Expandable=True,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= \ (onErr [Occ=OnceL]
                     :: Data.Text.Encoding.Error.OnDecodeError)
                  (bs [Occ=OnceL] :: Data.ByteString.Internal.ByteString) ->
                  scc<CAF>
                  (scc<CAF> Data.Text.Fusion.unstream)
                    (scc<CAF>
                     scc<CAF>
                     (scc<CAF>
                      (scc<CAF> Data.Text.Encoding.Fusion.streamUtf32LE)
                        (scc<CAF> onErr))
                       (scc<CAF> bs))}]
 Data.Text.Encoding.decodeUtf32LEWith =
   \ (eta_B2 :: Data.Text.Encoding.Error.OnDecodeError)
     (eta_B1 :: Data.ByteString.Internal.ByteString) ->
     (\ (onErr :: Data.Text.Encoding.Error.OnDecodeError)
        (bs :: Data.ByteString.Internal.ByteString) ->
        let {
          lq_anf__dhhJ :: Data.Text.Fusion.Internal.Stream GHC.Types.Char
          [LclId]
          lq_anf__dhhJ =
            Data.Text.Encoding.Fusion.streamUtf32LE onErr bs } in
        Data.Text.Fusion.unstream lq_anf__dhhJ)
       eta_B2 eta_B1,
 Data.Text.Encoding.decodeUtf32LE [InlPrag=INLINE (sat-args=0)]
   :: Data.ByteString.Internal.ByteString -> Data.Text.Internal.Text
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=0, Value=False,
          ConLike=False, WorkFree=False, Expandable=False,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= scc<CAF>
                (scc<CAF> Data.Text.Encoding.decodeUtf32LEWith)
                  (scc<CAF> Data.Text.Encoding.Error.strictDecode)}]
 Data.Text.Encoding.decodeUtf32LE =
   Data.Text.Encoding.decodeUtf32LEWith
     Data.Text.Encoding.Error.strictDecode,
 Data.Text.Encoding.encodeUtf16BE [InlPrag=INLINE (sat-args=1)]
   :: Data.Text.Internal.Text -> Data.ByteString.Internal.ByteString
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=1, Value=True,
          ConLike=True, WorkFree=True, Expandable=True,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= \ (txt [Occ=OnceL] :: Data.Text.Internal.Text) ->
                  scc<CAF>
                  (scc<CAF> Data.Text.Encoding.Fusion.unstream)
                    (scc<CAF>
                     scc<CAF>
                     (scc<CAF> Data.Text.Encoding.Fusion.Common.restreamUtf16BE)
                       (scc<CAF>
                        scc<CAF> (scc<CAF> Data.Text.Fusion.stream) (scc<CAF> txt)))}]
 Data.Text.Encoding.encodeUtf16BE =
   \ (eta_B1 :: Data.Text.Internal.Text) ->
     (\ (txt :: Data.Text.Internal.Text) ->
        let {
          lq_anf__dhhK :: Data.Text.Fusion.Internal.Stream GHC.Types.Char
          [LclId]
          lq_anf__dhhK = Data.Text.Fusion.stream txt } in
        let {
          lq_anf__dhhL :: Data.Text.Fusion.Internal.Stream GHC.Word.Word8
          [LclId]
          lq_anf__dhhL =
            Data.Text.Encoding.Fusion.Common.restreamUtf16BE lq_anf__dhhK } in
        Data.Text.Encoding.Fusion.unstream lq_anf__dhhL)
       eta_B1,
 Data.Text.Encoding.encodeUtf16LE [InlPrag=INLINE (sat-args=1)]
   :: Data.Text.Internal.Text -> Data.ByteString.Internal.ByteString
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=1, Value=True,
          ConLike=True, WorkFree=True, Expandable=True,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= \ (txt [Occ=OnceL] :: Data.Text.Internal.Text) ->
                  scc<CAF>
                  (scc<CAF> Data.Text.Encoding.Fusion.unstream)
                    (scc<CAF>
                     scc<CAF>
                     (scc<CAF> Data.Text.Encoding.Fusion.Common.restreamUtf16LE)
                       (scc<CAF>
                        scc<CAF> (scc<CAF> Data.Text.Fusion.stream) (scc<CAF> txt)))}]
 Data.Text.Encoding.encodeUtf16LE =
   \ (eta_B1 :: Data.Text.Internal.Text) ->
     (\ (txt :: Data.Text.Internal.Text) ->
        let {
          lq_anf__dhhM :: Data.Text.Fusion.Internal.Stream GHC.Types.Char
          [LclId]
          lq_anf__dhhM = Data.Text.Fusion.stream txt } in
        let {
          lq_anf__dhhN :: Data.Text.Fusion.Internal.Stream GHC.Word.Word8
          [LclId]
          lq_anf__dhhN =
            Data.Text.Encoding.Fusion.Common.restreamUtf16LE lq_anf__dhhM } in
        Data.Text.Encoding.Fusion.unstream lq_anf__dhhN)
       eta_B1,
 Data.Text.Encoding.decodeUtf16BEWith [InlPrag=INLINE (sat-args=2)]
   :: Data.Text.Encoding.Error.OnDecodeError
      -> Data.ByteString.Internal.ByteString -> Data.Text.Internal.Text
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=2, Value=True,
          ConLike=True, WorkFree=True, Expandable=True,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= \ (onErr [Occ=OnceL]
                     :: Data.Text.Encoding.Error.OnDecodeError)
                  (bs [Occ=OnceL] :: Data.ByteString.Internal.ByteString) ->
                  scc<CAF>
                  (scc<CAF> Data.Text.Fusion.unstream)
                    (scc<CAF>
                     scc<CAF>
                     (scc<CAF>
                      (scc<CAF> Data.Text.Encoding.Fusion.streamUtf16BE)
                        (scc<CAF> onErr))
                       (scc<CAF> bs))}]
 Data.Text.Encoding.decodeUtf16BEWith =
   \ (eta_B2 :: Data.Text.Encoding.Error.OnDecodeError)
     (eta_B1 :: Data.ByteString.Internal.ByteString) ->
     (\ (onErr :: Data.Text.Encoding.Error.OnDecodeError)
        (bs :: Data.ByteString.Internal.ByteString) ->
        let {
          lq_anf__dhhO :: Data.Text.Fusion.Internal.Stream GHC.Types.Char
          [LclId]
          lq_anf__dhhO =
            Data.Text.Encoding.Fusion.streamUtf16BE onErr bs } in
        Data.Text.Fusion.unstream lq_anf__dhhO)
       eta_B2 eta_B1,
 Data.Text.Encoding.decodeUtf16BE [InlPrag=INLINE (sat-args=0)]
   :: Data.ByteString.Internal.ByteString -> Data.Text.Internal.Text
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=0, Value=False,
          ConLike=False, WorkFree=False, Expandable=False,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= scc<CAF>
                (scc<CAF> Data.Text.Encoding.decodeUtf16BEWith)
                  (scc<CAF> Data.Text.Encoding.Error.strictDecode)}]
 Data.Text.Encoding.decodeUtf16BE =
   Data.Text.Encoding.decodeUtf16BEWith
     Data.Text.Encoding.Error.strictDecode,
 Data.Text.Encoding.decodeUtf16LEWith [InlPrag=INLINE (sat-args=2)]
   :: Data.Text.Encoding.Error.OnDecodeError
      -> Data.ByteString.Internal.ByteString -> Data.Text.Internal.Text
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=2, Value=True,
          ConLike=True, WorkFree=True, Expandable=True,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= \ (onErr [Occ=OnceL]
                     :: Data.Text.Encoding.Error.OnDecodeError)
                  (bs [Occ=OnceL] :: Data.ByteString.Internal.ByteString) ->
                  scc<CAF>
                  (scc<CAF> Data.Text.Fusion.unstream)
                    (scc<CAF>
                     scc<CAF>
                     (scc<CAF>
                      (scc<CAF> Data.Text.Encoding.Fusion.streamUtf16LE)
                        (scc<CAF> onErr))
                       (scc<CAF> bs))}]
 Data.Text.Encoding.decodeUtf16LEWith =
   \ (eta_B2 :: Data.Text.Encoding.Error.OnDecodeError)
     (eta_B1 :: Data.ByteString.Internal.ByteString) ->
     (\ (onErr :: Data.Text.Encoding.Error.OnDecodeError)
        (bs :: Data.ByteString.Internal.ByteString) ->
        let {
          lq_anf__dhhP :: Data.Text.Fusion.Internal.Stream GHC.Types.Char
          [LclId]
          lq_anf__dhhP =
            Data.Text.Encoding.Fusion.streamUtf16LE onErr bs } in
        Data.Text.Fusion.unstream lq_anf__dhhP)
       eta_B2 eta_B1,
 Data.Text.Encoding.decodeUtf16LE [InlPrag=INLINE (sat-args=0)]
   :: Data.ByteString.Internal.ByteString -> Data.Text.Internal.Text
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=0, Value=False,
          ConLike=False, WorkFree=False, Expandable=False,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= scc<CAF>
                (scc<CAF> Data.Text.Encoding.decodeUtf16LEWith)
                  (scc<CAF> Data.Text.Encoding.Error.strictDecode)}]
 Data.Text.Encoding.decodeUtf16LE =
   Data.Text.Encoding.decodeUtf16LEWith
     Data.Text.Encoding.Error.strictDecode,
 Data.Text.Encoding.plen :: forall a. GHC.Ptr.Ptr a -> GHC.Types.Int
 [LclIdX]
 Data.Text.Encoding.plen =
   \ (@ a) -> GHC.Err.undefined @ (GHC.Ptr.Ptr a -> GHC.Types.Int),
 Data.Text.Encoding.withLIQUID
   :: forall s b.
      Foreign.C.Types.CSize
      -> Data.Text.Array.MArray s
      -> (GHC.Ptr.Ptr Foreign.C.Types.CSize -> GHC.Types.IO b)
      -> GHC.Types.IO b
 [LclIdX]
 Data.Text.Encoding.withLIQUID =
   \ (@ s) (@ b) ->
     GHC.Err.undefined
       @ (Foreign.C.Types.CSize
          -> Data.Text.Array.MArray s
          -> (GHC.Ptr.Ptr Foreign.C.Types.CSize -> GHC.Types.IO b)
          -> GHC.Types.IO b),
 Data.Text.Encoding.decodeUtf8With
   :: Data.Text.Encoding.OnDecodeError
      -> Data.ByteString.Internal.ByteString -> Data.Text.Internal.Text
 [LclIdX]
 Data.Text.Encoding.decodeUtf8With =
   \ (onErr :: Data.Text.Encoding.OnDecodeError)
     (ds_dhhi :: Data.ByteString.Internal.ByteString) ->
     case ds_dhhi
     of lq_anf__dhhQ { Data.ByteString.Internal.PS fp off len ->
     let {
       desc :: [GHC.Types.Char]
       [LclId]
       desc =
         GHC.CString.unpackCString#
           "Data.Text.Encoding.decodeUtf8: Invalid UTF-8 stream" } in
     let {
       lq_anf__dhiJ
         :: forall s.
            (Data.Text.Array.MArray s
             -> GHC.Types.Int -> GHC.ST.ST s Data.Text.Internal.Text)
            -> GHC.ST.ST s Data.Text.Internal.Text
       [LclId]
       lq_anf__dhiJ =
         \ (@ s)
           (done
              :: Data.Text.Array.MArray s
                 -> GHC.Types.Int -> GHC.ST.ST s Data.Text.Internal.Text) ->
           let {
             go
               :: Data.Text.Array.MArray s -> GHC.Types.IO Data.Text.Internal.Text
             [LclId]
             go =
               \ (dest :: Data.Text.Array.MArray s) ->
                 let {
                   lq_anf__dhhR
                     :: (GHC.Ptr.Ptr GHC.Word.Word8
                         -> GHC.Types.IO Data.Text.Internal.Text)
                        -> GHC.Types.IO Data.Text.Internal.Text
                   [LclId]
                   lq_anf__dhhR =
                     Foreign.ForeignPtr.Imp.withForeignPtr
                       @ GHC.Word.Word8 @ Data.Text.Internal.Text fp } in
                 let {
                   lq_anf__dhiE
                     :: GHC.Ptr.Ptr GHC.Word.Word8
                        -> GHC.Types.IO Data.Text.Internal.Text
                   [LclId]
                   lq_anf__dhiE =
                     \ (ptr :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                       let {
                         lq_anf__dhhS :: GHC.Integer.Type.Integer
                         [LclId]
                         lq_anf__dhhS = __integer 0 } in
                       let {
                         lq_anf__dhhT :: Foreign.C.Types.CSize
                         [LclId]
                         lq_anf__dhhT =
                           GHC.Num.fromInteger
                             @ Foreign.C.Types.CSize
                             Foreign.C.Types.$fNumCSize
                             lq_anf__dhhS } in
                       let {
                         lq_anf__dhhU
                           :: (GHC.Ptr.Ptr Foreign.C.Types.CSize
                               -> GHC.Types.IO Data.Text.Internal.Text)
                              -> GHC.Types.IO Data.Text.Internal.Text
                         [LclId]
                         lq_anf__dhhU =
                           Data.Text.Encoding.withLIQUID
                             @ s @ Data.Text.Internal.Text lq_anf__dhhT dest } in
                       let {
                         lq_anf__dhiD
                           :: GHC.Ptr.Ptr Foreign.C.Types.CSize
                              -> GHC.Types.IO Data.Text.Internal.Text
                         [LclId]
                         lq_anf__dhiD =
                           \ (destOffPtr :: GHC.Ptr.Ptr Foreign.C.Types.CSize) ->
                             let {
                               lq_anf__dhhV :: GHC.Types.Int
                               [LclId]
                               lq_anf__dhhV =
                                 GHC.Num.+ @ GHC.Types.Int GHC.Num.$fNumInt off len } in
                             let {
                               end :: GHC.Ptr.Ptr GHC.Word.Word8
                               [LclId]
                               end =
                                 GHC.Ptr.plusPtr
                                   @ GHC.Word.Word8 @ GHC.Word.Word8 ptr lq_anf__dhhV } in
                             letrec {
                               loop [Occ=LoopBreaker]
                                 :: GHC.Types.Int
                                    -> GHC.Ptr.Ptr GHC.Word.Word8
                                    -> GHC.Types.IO Data.Text.Internal.Text
                               [LclId]
                               loop =
                                 \ _ (curPtr :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                                   let {
                                     lq_anf__dhhW :: GHC.Types.IO (GHC.Ptr.Ptr GHC.Word.Word8)
                                     [LclId]
                                     lq_anf__dhhW =
                                       Data.Text.Encoding.c_decode_utf8
                                         @ s dest destOffPtr curPtr end } in
                                   let {
                                     lq_anf__dhiy
                                       :: GHC.Ptr.Ptr GHC.Word.Word8
                                          -> GHC.Types.IO Data.Text.Internal.Text
                                     [LclId]
                                     lq_anf__dhiy =
                                       \ (curPtr' :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                                         let {
                                           lq_anf__dhhX :: GHC.Types.Bool
                                           [LclId]
                                           lq_anf__dhhX =
                                             Language.Haskell.Liquid.Foreign.eqPtr
                                               @ GHC.Word.Word8 curPtr' end } in
                                         case lq_anf__dhhX of lq_anf__dhhY {
                                           GHC.Types.False ->
                                             let {
                                               lq_anf__dhhZ :: GHC.Types.IO GHC.Word.Word8
                                               [LclId]
                                               lq_anf__dhhZ =
                                                 Foreign.Storable.peek
                                                   @ GHC.Word.Word8
                                                   Foreign.Storable.$fStorableWord8
                                                   curPtr' } in
                                             let {
                                               lq_anf__dhit
                                                 :: GHC.Word.Word8
                                                    -> GHC.Types.IO Data.Text.Internal.Text
                                               [LclId]
                                               lq_anf__dhit =
                                                 \ (x :: GHC.Word.Word8) ->
                                                   let {
                                                     lq_anf__dhi0
                                                       :: GHC.Types.IO Foreign.C.Types.CSize
                                                     [LclId]
                                                     lq_anf__dhi0 =
                                                       Foreign.Storable.peek
                                                         @ Foreign.C.Types.CSize
                                                         Foreign.C.Types.$fStorableCSize
                                                         destOffPtr } in
                                                   let {
                                                     lq_anf__dhis
                                                       :: Foreign.C.Types.CSize
                                                          -> GHC.Types.IO Data.Text.Internal.Text
                                                     [LclId]
                                                     lq_anf__dhis =
                                                       \ (destOff :: Foreign.C.Types.CSize) ->
                                                         let {
                                                           lq_anf__dhi1
                                                             :: Data.Maybe.Maybe GHC.Word.Word8
                                                           [LclId]
                                                           lq_anf__dhi1 =
                                                             Data.Maybe.Just @ GHC.Word.Word8 x } in
                                                         let {
                                                           lq_anf__dhi2 :: GHC.Types.Int
                                                           [LclId]
                                                           lq_anf__dhi2 =
                                                             GHC.Real.fromIntegral
                                                               @ Foreign.C.Types.CSize
                                                               @ GHC.Types.Int
                                                               Foreign.C.Types.$fIntegralCSize
                                                               GHC.Num.$fNumInt
                                                               destOff } in
                                                         let {
                                                           lq_anf__dhi3
                                                             :: Data.Maybe.Maybe GHC.Types.Char
                                                           [LclId]
                                                           lq_anf__dhi3 =
                                                             onErr
                                                               @ s
                                                               desc
                                                               lq_anf__dhi1
                                                               dest
                                                               lq_anf__dhi2 } in
                                                         case lq_anf__dhi3 of lq_anf__dhi4 {
                                                           Data.Maybe.Nothing ->
                                                             let {
                                                               lq_anf__dhi5
                                                                 :: GHC.Ptr.Ptr (GHC.Prim.Any *)
                                                                    -> GHC.Types.Int
                                                               [LclId]
                                                               lq_anf__dhi5 =
                                                                 Data.Text.Encoding.plen
                                                                   @ (GHC.Prim.Any *) } in
                                                             let {
                                                               lq_anf__dhi6 :: GHC.Types.Int
                                                               [LclId]
                                                               lq_anf__dhi6 = GHC.Types.I# 1 } in
                                                             let {
                                                               lq_anf__dhi7
                                                                 :: GHC.Ptr.Ptr (GHC.Prim.Any *)
                                                               [LclId]
                                                               lq_anf__dhi7 =
                                                                 GHC.Ptr.plusPtr
                                                                   @ GHC.Word.Word8
                                                                   @ (GHC.Prim.Any *)
                                                                   curPtr'
                                                                   lq_anf__dhi6 } in
                                                             let {
                                                               lq_anf__dhi8 :: GHC.Types.Int
                                                               [LclId]
                                                               lq_anf__dhi8 =
                                                                 GHC.Base.$
                                                                   @ (GHC.Ptr.Ptr (GHC.Prim.Any *))
                                                                   @ GHC.Types.Int
                                                                   lq_anf__dhi5
                                                                   lq_anf__dhi7 } in
                                                             let {
                                                               lq_anf__dhi9
                                                                 :: GHC.Ptr.Ptr GHC.Word.Word8
                                                                    -> GHC.Types.IO
                                                                         Data.Text.Internal.Text
                                                               [LclId]
                                                               lq_anf__dhi9 = loop lq_anf__dhi8 } in
                                                             let {
                                                               lq_anf__dhia :: GHC.Types.Int
                                                               [LclId]
                                                               lq_anf__dhia = GHC.Types.I# 1 } in
                                                             let {
                                                               lq_anf__dhib
                                                                 :: GHC.Ptr.Ptr GHC.Word.Word8
                                                               [LclId]
                                                               lq_anf__dhib =
                                                                 GHC.Ptr.plusPtr
                                                                   @ GHC.Word.Word8
                                                                   @ GHC.Word.Word8
                                                                   curPtr'
                                                                   lq_anf__dhia } in
                                                             GHC.Base.$
                                                               @ (GHC.Ptr.Ptr GHC.Word.Word8)
                                                               @ (GHC.Types.IO
                                                                    Data.Text.Internal.Text)
                                                               lq_anf__dhi9
                                                               lq_anf__dhib;
                                                           Data.Maybe.Just c ->
                                                             let {
                                                               lq_anf__dhic
                                                                 :: GHC.ST.ST s GHC.Types.Int
                                                                    -> GHC.Types.IO GHC.Types.Int
                                                               [LclId]
                                                               lq_anf__dhic =
                                                                 GHC.IO.unsafeSTToIO
                                                                   @ s @ GHC.Types.Int } in
                                                             let {
                                                               lq_anf__dhid :: GHC.Types.Int
                                                               [LclId]
                                                               lq_anf__dhid =
                                                                 GHC.Real.fromIntegral
                                                                   @ Foreign.C.Types.CSize
                                                                   @ GHC.Types.Int
                                                                   Foreign.C.Types.$fIntegralCSize
                                                                   GHC.Num.$fNumInt
                                                                   destOff } in
                                                             let {
                                                               lq_anf__dhie
                                                                 :: GHC.ST.ST s GHC.Types.Int
                                                               [LclId]
                                                               lq_anf__dhie =
                                                                 Data.Text.UnsafeChar.unsafeWrite
                                                                   @ s dest lq_anf__dhid c } in
                                                             let {
                                                               lq_anf__dhif
                                                                 :: GHC.Types.IO GHC.Types.Int
                                                               [LclId]
                                                               lq_anf__dhif =
                                                                 GHC.Base.$
                                                                   @ (GHC.ST.ST s GHC.Types.Int)
                                                                   @ (GHC.Types.IO GHC.Types.Int)
                                                                   lq_anf__dhic
                                                                   lq_anf__dhie } in
                                                             let {
                                                               lq_anf__dhir
                                                                 :: GHC.Types.Int
                                                                    -> GHC.Types.IO
                                                                         Data.Text.Internal.Text
                                                               [LclId]
                                                               lq_anf__dhir =
                                                                 \ (w :: GHC.Types.Int) ->
                                                                   let {
                                                                     lq_anf__dhig
                                                                       :: Foreign.C.Types.CSize
                                                                     [LclId]
                                                                     lq_anf__dhig =
                                                                       GHC.Real.fromIntegral
                                                                         @ GHC.Types.Int
                                                                         @ Foreign.C.Types.CSize
                                                                         GHC.Real.$fIntegralInt
                                                                         Foreign.C.Types.$fNumCSize
                                                                         w } in
                                                                   let {
                                                                     lq_anf__dhih
                                                                       :: Foreign.C.Types.CSize
                                                                     [LclId]
                                                                     lq_anf__dhih =
                                                                       GHC.Num.+
                                                                         @ Foreign.C.Types.CSize
                                                                         Foreign.C.Types.$fNumCSize
                                                                         destOff
                                                                         lq_anf__dhig } in
                                                                   let {
                                                                     lq_anf__dhii :: GHC.Types.IO ()
                                                                     [LclId]
                                                                     lq_anf__dhii =
                                                                       Foreign.Storable.poke
                                                                         @ Foreign.C.Types.CSize
                                                                         Foreign.C.Types.$fStorableCSize
                                                                         destOffPtr
                                                                         lq_anf__dhih } in
                                                                   let {
                                                                     lq_anf__dhij
                                                                       :: GHC.Ptr.Ptr
                                                                            (GHC.Prim.Any *)
                                                                          -> GHC.Types.Int
                                                                     [LclId]
                                                                     lq_anf__dhij =
                                                                       Data.Text.Encoding.plen
                                                                         @ (GHC.Prim.Any *) } in
                                                                   let {
                                                                     lq_anf__dhik :: GHC.Types.Int
                                                                     [LclId]
                                                                     lq_anf__dhik =
                                                                       GHC.Types.I# 1 } in
                                                                   let {
                                                                     lq_anf__dhil
                                                                       :: GHC.Ptr.Ptr
                                                                            (GHC.Prim.Any *)
                                                                     [LclId]
                                                                     lq_anf__dhil =
                                                                       GHC.Ptr.plusPtr
                                                                         @ GHC.Word.Word8
                                                                         @ (GHC.Prim.Any *)
                                                                         curPtr'
                                                                         lq_anf__dhik } in
                                                                   let {
                                                                     lq_anf__dhim :: GHC.Types.Int
                                                                     [LclId]
                                                                     lq_anf__dhim =
                                                                       GHC.Base.$
                                                                         @ (GHC.Ptr.Ptr
                                                                              (GHC.Prim.Any *))
                                                                         @ GHC.Types.Int
                                                                         lq_anf__dhij
                                                                         lq_anf__dhil } in
                                                                   let {
                                                                     lq_anf__dhin
                                                                       :: GHC.Ptr.Ptr GHC.Word.Word8
                                                                          -> GHC.Types.IO
                                                                               Data.Text.Internal.Text
                                                                     [LclId]
                                                                     lq_anf__dhin =
                                                                       loop lq_anf__dhim } in
                                                                   let {
                                                                     lq_anf__dhio :: GHC.Types.Int
                                                                     [LclId]
                                                                     lq_anf__dhio =
                                                                       GHC.Types.I# 1 } in
                                                                   let {
                                                                     lq_anf__dhip
                                                                       :: GHC.Ptr.Ptr GHC.Word.Word8
                                                                     [LclId]
                                                                     lq_anf__dhip =
                                                                       GHC.Ptr.plusPtr
                                                                         @ GHC.Word.Word8
                                                                         @ GHC.Word.Word8
                                                                         curPtr'
                                                                         lq_anf__dhio } in
                                                                   let {
                                                                     lq_anf__dhiq
                                                                       :: GHC.Types.IO
                                                                            Data.Text.Internal.Text
                                                                     [LclId]
                                                                     lq_anf__dhiq =
                                                                       GHC.Base.$
                                                                         @ (GHC.Ptr.Ptr
                                                                              GHC.Word.Word8)
                                                                         @ (GHC.Types.IO
                                                                              Data.Text.Internal.Text)
                                                                         lq_anf__dhin
                                                                         lq_anf__dhip } in
                                                                   GHC.Base.>>
                                                                     @ GHC.Types.IO
                                                                     GHC.Base.$fMonadIO
                                                                     @ ()
                                                                     @ Data.Text.Internal.Text
                                                                     lq_anf__dhii
                                                                     lq_anf__dhiq } in
                                                             GHC.Base.>>=
                                                               @ GHC.Types.IO
                                                               GHC.Base.$fMonadIO
                                                               @ GHC.Types.Int
                                                               @ Data.Text.Internal.Text
                                                               lq_anf__dhif
                                                               lq_anf__dhir
                                                         } } in
                                                   GHC.Base.>>=
                                                     @ GHC.Types.IO
                                                     GHC.Base.$fMonadIO
                                                     @ Foreign.C.Types.CSize
                                                     @ Data.Text.Internal.Text
                                                     lq_anf__dhi0
                                                     lq_anf__dhis } in
                                             GHC.Base.>>=
                                               @ GHC.Types.IO
                                               GHC.Base.$fMonadIO
                                               @ GHC.Word.Word8
                                               @ Data.Text.Internal.Text
                                               lq_anf__dhhZ
                                               lq_anf__dhit;
                                           GHC.Types.True ->
                                             let {
                                               lq_anf__dhiu :: GHC.Types.IO Foreign.C.Types.CSize
                                               [LclId]
                                               lq_anf__dhiu =
                                                 Foreign.Storable.peek
                                                   @ Foreign.C.Types.CSize
                                                   Foreign.C.Types.$fStorableCSize
                                                   destOffPtr } in
                                             let {
                                               lq_anf__dhix
                                                 :: Foreign.C.Types.CSize
                                                    -> GHC.Types.IO Data.Text.Internal.Text
                                               [LclId]
                                               lq_anf__dhix =
                                                 \ (n :: Foreign.C.Types.CSize) ->
                                                   let {
                                                     lq_anf__dhiv :: GHC.Types.Int
                                                     [LclId]
                                                     lq_anf__dhiv =
                                                       GHC.Real.fromIntegral
                                                         @ Foreign.C.Types.CSize
                                                         @ GHC.Types.Int
                                                         Foreign.C.Types.$fIntegralCSize
                                                         GHC.Num.$fNumInt
                                                         n } in
                                                   let {
                                                     lq_anf__dhiw
                                                       :: GHC.ST.ST s Data.Text.Internal.Text
                                                     [LclId]
                                                     lq_anf__dhiw = done dest lq_anf__dhiv } in
                                                   GHC.IO.unsafeSTToIO
                                                     @ s @ Data.Text.Internal.Text lq_anf__dhiw } in
                                             GHC.Base.>>=
                                               @ GHC.Types.IO
                                               GHC.Base.$fMonadIO
                                               @ Foreign.C.Types.CSize
                                               @ Data.Text.Internal.Text
                                               lq_anf__dhiu
                                               lq_anf__dhix
                                         } } in
                                   GHC.Base.>>=
                                     @ GHC.Types.IO
                                     GHC.Base.$fMonadIO
                                     @ (GHC.Ptr.Ptr GHC.Word.Word8)
                                     @ Data.Text.Internal.Text
                                     lq_anf__dhhW
                                     lq_anf__dhiy; } in
                             let {
                               loop
                                 :: GHC.Types.Int
                                    -> GHC.Ptr.Ptr GHC.Word.Word8
                                    -> GHC.Types.IO Data.Text.Internal.Text
                               [LclId]
                               loop = loop } in
                             let {
                               lq_anf__dhiz :: GHC.Ptr.Ptr (GHC.Prim.Any *) -> GHC.Types.Int
                               [LclId]
                               lq_anf__dhiz = Data.Text.Encoding.plen @ (GHC.Prim.Any *) } in
                             let {
                               lq_anf__dhiA :: GHC.Ptr.Ptr (GHC.Prim.Any *)
                               [LclId]
                               lq_anf__dhiA =
                                 GHC.Ptr.plusPtr @ GHC.Word.Word8 @ (GHC.Prim.Any *) ptr off } in
                             let {
                               lq_anf__dhiB :: GHC.Types.Int
                               [LclId]
                               lq_anf__dhiB =
                                 GHC.Base.$
                                   @ (GHC.Ptr.Ptr (GHC.Prim.Any *))
                                   @ GHC.Types.Int
                                   lq_anf__dhiz
                                   lq_anf__dhiA } in
                             let {
                               lq_anf__dhiC :: GHC.Ptr.Ptr GHC.Word.Word8
                               [LclId]
                               lq_anf__dhiC =
                                 GHC.Ptr.plusPtr @ GHC.Word.Word8 @ GHC.Word.Word8 ptr off } in
                             loop lq_anf__dhiB lq_anf__dhiC } in
                       GHC.Base.$
                         @ (GHC.Ptr.Ptr Foreign.C.Types.CSize
                            -> GHC.Types.IO Data.Text.Internal.Text)
                         @ (GHC.Types.IO Data.Text.Internal.Text)
                         lq_anf__dhhU
                         lq_anf__dhiD } in
                 GHC.Base.$
                   @ (GHC.Ptr.Ptr GHC.Word.Word8
                      -> GHC.Types.IO Data.Text.Internal.Text)
                   @ (GHC.Types.IO Data.Text.Internal.Text)
                   lq_anf__dhhR
                   lq_anf__dhiE } in
           let {
             lq_anf__dhiF :: GHC.Base.Monad (GHC.ST.ST s)
             [LclId]
             lq_anf__dhiF = GHC.ST.$fMonadST @ s } in
           let {
             lq_anf__dhiG
               :: GHC.Types.IO Data.Text.Internal.Text
                  -> GHC.ST.ST s Data.Text.Internal.Text
             [LclId]
             lq_anf__dhiG =
               GHC.IO.unsafeIOToST @ Data.Text.Internal.Text @ s } in
           let {
             lq_anf__dhiH
               :: Data.Text.Array.MArray s -> GHC.ST.ST s Data.Text.Internal.Text
             [LclId]
             lq_anf__dhiH =
               GHC.Base..
                 @ (GHC.Types.IO Data.Text.Internal.Text)
                 @ (GHC.ST.ST s Data.Text.Internal.Text)
                 @ (Data.Text.Array.MArray s)
                 lq_anf__dhiG
                 go } in
           let {
             lq_anf__dhiI :: GHC.ST.ST s (Data.Text.Array.MArray s)
             [LclId]
             lq_anf__dhiI = Data.Text.Array.new @ s len } in
           Control.Monad.=<<
             @ (Data.Text.Array.MArray s)
             @ (GHC.ST.ST s)
             @ Data.Text.Internal.Text
             lq_anf__dhiF
             lq_anf__dhiH
             lq_anf__dhiI } in
     GHC.Base.$
       @ (forall s.
          (Data.Text.Array.MArray s
           -> GHC.Types.Int -> GHC.ST.ST s Data.Text.Internal.Text)
          -> GHC.ST.ST s Data.Text.Internal.Text)
       @ Data.Text.Internal.Text
       Data.Text.Private.runText
       lq_anf__dhiJ
     },
 Data.Text.Encoding.strictDecode
   :: forall s.
      GHC.Base.String
      -> Data.Maybe.Maybe GHC.Word.Word8
      -> Data.Text.Array.MArray s
      -> GHC.Types.Int
      -> Data.Maybe.Maybe GHC.Types.Char
 [LclIdX]
 Data.Text.Encoding.strictDecode =
   \ (@ s)
     (desc :: GHC.Base.String)
     (c :: Data.Maybe.Maybe GHC.Word.Word8)
     _
     _ ->
     let {
       lq_anf__dhiK :: Data.Text.Encoding.Error.UnicodeException
       [LclId]
       lq_anf__dhiK = Data.Text.Encoding.Error.DecodeError desc c } in
     GHC.Exception.throw
       @ Data.Text.Encoding.Error.UnicodeException
       @ (Data.Maybe.Maybe GHC.Types.Char)
       Data.Text.Encoding.Error.$fExceptionUnicodeException
       lq_anf__dhiK,
 Data.Text.Encoding.decodeUtf8 [InlPrag=INLINE[0] (sat-args=0)]
   :: Data.ByteString.Internal.ByteString -> Data.Text.Internal.Text
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=0, Value=False,
          ConLike=False, WorkFree=False, Expandable=False,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= scc<CAF>
                (scc<CAF> Data.Text.Encoding.decodeUtf8With)
                  (scc<CAF> Data.Text.Encoding.strictDecode)}]
 Data.Text.Encoding.decodeUtf8 =
   Data.Text.Encoding.decodeUtf8With Data.Text.Encoding.strictDecode,
 Data.Text.Encoding.decodeASCII
   :: Data.ByteString.Internal.ByteString -> Data.Text.Internal.Text
 [LclIdX]
 Data.Text.Encoding.decodeASCII = Data.Text.Encoding.decodeUtf8,
 Data.Text.Encoding.decodeUtf8' [InlPrag=INLINE (sat-args=0)]
   :: Data.ByteString.Internal.ByteString
      -> Data.Either.Either
           Data.Text.Encoding.Error.UnicodeException Data.Text.Internal.Text
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=0, Value=False,
          ConLike=False, WorkFree=False, Expandable=False,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= scc<CAF>
                (scc<CAF>
                 GHC.Base..
                   @ (GHC.Types.IO
                        (Data.Either.Either
                           Data.Text.Encoding.Error.UnicodeException Data.Text.Internal.Text))
                   @ (Data.Either.Either
                        Data.Text.Encoding.Error.UnicodeException Data.Text.Internal.Text)
                   @ Data.ByteString.Internal.ByteString)
                  (scc<CAF>
                   GHC.IO.unsafePerformIO
                     @ (Data.Either.Either
                          Data.Text.Encoding.Error.UnicodeException Data.Text.Internal.Text))
                  (scc<CAF>
                   (scc<CAF>
                    GHC.Base..
                      @ (GHC.Types.IO Data.Text.Internal.Text)
                      @ (GHC.Types.IO
                           (Data.Either.Either
                              Data.Text.Encoding.Error.UnicodeException Data.Text.Internal.Text))
                      @ Data.ByteString.Internal.ByteString)
                     (scc<CAF>
                      Control.Exception.Base.try
                        @ Data.Text.Internal.Text
                        @ Data.Text.Encoding.Error.UnicodeException
                        Data.Text.Encoding.Error.$fExceptionUnicodeException)
                     (scc<CAF>
                      (scc<CAF>
                       GHC.Base..
                         @ Data.Text.Internal.Text
                         @ (GHC.Types.IO Data.Text.Internal.Text)
                         @ Data.ByteString.Internal.ByteString)
                        (scc<CAF> GHC.IO.evaluate @ Data.Text.Internal.Text)
                        (scc<CAF>
                         (scc<CAF> Data.Text.Encoding.decodeUtf8With)
                           (scc<CAF> Data.Text.Encoding.strictDecode))))}]
 Data.Text.Encoding.decodeUtf8' =
   let {
     lq_anf__dhiL
       :: GHC.Types.IO
            (Data.Either.Either
               Data.Text.Encoding.Error.UnicodeException Data.Text.Internal.Text)
          -> Data.Either.Either
               Data.Text.Encoding.Error.UnicodeException Data.Text.Internal.Text
     [LclId]
     lq_anf__dhiL =
       GHC.IO.unsafePerformIO
         @ (Data.Either.Either
              Data.Text.Encoding.Error.UnicodeException
              Data.Text.Internal.Text) } in
   let {
     lq_anf__dhiM
       :: GHC.Types.IO Data.Text.Internal.Text
          -> GHC.Types.IO
               (Data.Either.Either
                  Data.Text.Encoding.Error.UnicodeException Data.Text.Internal.Text)
     [LclId]
     lq_anf__dhiM =
       Control.Exception.Base.try
         @ Data.Text.Internal.Text
         @ Data.Text.Encoding.Error.UnicodeException
         Data.Text.Encoding.Error.$fExceptionUnicodeException } in
   let {
     lq_anf__dhiN
       :: Data.Text.Internal.Text -> GHC.Types.IO Data.Text.Internal.Text
     [LclId]
     lq_anf__dhiN = GHC.IO.evaluate @ Data.Text.Internal.Text } in
   let {
     lq_anf__dhiO
       :: Data.ByteString.Internal.ByteString -> Data.Text.Internal.Text
     [LclId]
     lq_anf__dhiO =
       Data.Text.Encoding.decodeUtf8With
         Data.Text.Encoding.strictDecode } in
   let {
     lq_anf__dhiP
       :: Data.ByteString.Internal.ByteString
          -> GHC.Types.IO Data.Text.Internal.Text
     [LclId]
     lq_anf__dhiP =
       GHC.Base..
         @ Data.Text.Internal.Text
         @ (GHC.Types.IO Data.Text.Internal.Text)
         @ Data.ByteString.Internal.ByteString
         lq_anf__dhiN
         lq_anf__dhiO } in
   let {
     lq_anf__dhiQ
       :: Data.ByteString.Internal.ByteString
          -> GHC.Types.IO
               (Data.Either.Either
                  Data.Text.Encoding.Error.UnicodeException Data.Text.Internal.Text)
     [LclId]
     lq_anf__dhiQ =
       GHC.Base..
         @ (GHC.Types.IO Data.Text.Internal.Text)
         @ (GHC.Types.IO
              (Data.Either.Either
                 Data.Text.Encoding.Error.UnicodeException Data.Text.Internal.Text))
         @ Data.ByteString.Internal.ByteString
         lq_anf__dhiM
         lq_anf__dhiP } in
   GHC.Base..
     @ (GHC.Types.IO
          (Data.Either.Either
             Data.Text.Encoding.Error.UnicodeException Data.Text.Internal.Text))
     @ (Data.Either.Either
          Data.Text.Encoding.Error.UnicodeException Data.Text.Internal.Text)
     @ Data.ByteString.Internal.ByteString
     lq_anf__dhiL
     lq_anf__dhiQ,
 Data.Text.Encoding.encodeUtf8
   :: Data.Text.Internal.Text -> Data.ByteString.Internal.ByteString
 [LclIdX]
 Data.Text.Encoding.encodeUtf8 =
   \ (ds_dhgB :: Data.Text.Internal.Text) ->
     case ds_dhgB
     of lq_anf__dhiR { Data.Text.Internal.Text arr off len ->
     let {
       offLen :: GHC.Types.Int
       [LclId]
       offLen = GHC.Num.+ @ GHC.Types.Int GHC.Num.$fNumInt off len } in
     letrec {
       start [Occ=LoopBreaker]
         :: GHC.Types.Int
            -> GHC.Types.Int
            -> GHC.Types.Int
            -> GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
            -> GHC.Types.IO Data.ByteString.Internal.ByteString
       [LclId]
       start =
         \ (size :: GHC.Types.Int)
           (n0 :: GHC.Types.Int)
           (m0 :: GHC.Types.Int)
           (fp :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8) ->
           let {
             loop
               :: GHC.Types.Int
                  -> GHC.Types.Int
                  -> GHC.Ptr.Ptr GHC.Word.Word8
                  -> GHC.Types.IO Data.ByteString.Internal.ByteString
             [LclId]
             loop =
               \ (n1 :: GHC.Types.Int)
                 (m1 :: GHC.Types.Int)
                 (ptr :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                 letrec {
                   go [Occ=LoopBreaker]
                     :: GHC.Types.Int
                        -> GHC.Types.Int
                        -> GHC.Types.Int
                        -> GHC.Types.IO Data.ByteString.Internal.ByteString
                   [LclId]
                   go =
                     \ (ds_dhh2 :: GHC.Types.Int)
                       (n :: GHC.Types.Int)
                       (m :: GHC.Types.Int) ->
                       case n of lq_anf__dhiS { GHC.Types.I# lq_anf__dhm2 ->
                       case m of lq_anf__dhiT { GHC.Types.I# lq_anf__dhm1 ->
                       let {
                         lq_anf__dhiU :: GHC.Types.Bool
                         [LclId]
                         lq_anf__dhiU =
                           GHC.Classes.==
                             @ GHC.Types.Int GHC.Classes.$fEqInt lq_anf__dhiS offLen } in
                       case lq_anf__dhiU of lq_anf__dhiV {
                         GHC.Types.False ->
                           let {
                             ensure
                               :: GHC.Types.Int
                                  -> (GHC.Ptr.Ptr GHC.Word.Word8
                                      -> GHC.Types.IO Data.ByteString.Internal.ByteString)
                                  -> GHC.Types.IO Data.ByteString.Internal.ByteString
                             [LclId]
                             ensure =
                               \ (k :: GHC.Types.Int)
                                 (ds_dhgX
                                    :: GHC.Ptr.Ptr GHC.Word.Word8
                                       -> GHC.Types.IO Data.ByteString.Internal.ByteString) ->
                                 let {
                                   lq_anf__dhiW :: GHC.Types.Int
                                   [LclId]
                                   lq_anf__dhiW =
                                     GHC.Num.-
                                       @ GHC.Types.Int GHC.Num.$fNumInt size lq_anf__dhiT } in
                                 let {
                                   lq_anf__dhiX :: GHC.Types.Bool
                                   [LclId]
                                   lq_anf__dhiX =
                                     GHC.Classes.>=
                                       @ GHC.Types.Int GHC.Classes.$fOrdInt lq_anf__dhiW k } in
                                 case lq_anf__dhiX of lq_anf__dhiY {
                                   GHC.Types.False ->
                                     let {
                                       lq_anf__dhiZ :: GHC.Types.Int
                                       [LclId]
                                       lq_anf__dhiZ = GHC.Types.I# 2 } in
                                     let {
                                       newSize :: GHC.Types.Int
                                       [LclId]
                                       newSize =
                                         GHC.Num.*
                                           @ GHC.Types.Int GHC.Num.$fNumInt size lq_anf__dhiZ } in
                                     let {
                                       lq_anf__dhj0
                                         :: GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                       [LclId]
                                       lq_anf__dhj0 =
                                         Data.ByteString.Internal.mallocByteString
                                           @ GHC.Word.Word8 newSize } in
                                     let {
                                       lq_anf__dhj6
                                         :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
                                            -> GHC.Types.IO Data.ByteString.Internal.ByteString
                                       [LclId]
                                       lq_anf__dhj6 =
                                         \ (fp' :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8) ->
                                           let {
                                             lq_anf__dhj1
                                               :: (GHC.Ptr.Ptr GHC.Word.Word8 -> GHC.Types.IO ())
                                                  -> GHC.Types.IO ()
                                             [LclId]
                                             lq_anf__dhj1 =
                                               Foreign.ForeignPtr.Imp.withForeignPtr
                                                 @ GHC.Word.Word8 @ () fp' } in
                                           let {
                                             lq_anf__dhj3
                                               :: GHC.Ptr.Ptr GHC.Word.Word8 -> GHC.Types.IO ()
                                             [LclId]
                                             lq_anf__dhj3 =
                                               \ (ptr' :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                                                 let {
                                                   lq_anf__dhj2 :: Foreign.C.Types.CSize
                                                   [LclId]
                                                   lq_anf__dhj2 =
                                                     GHC.Real.fromIntegral
                                                       @ GHC.Types.Int
                                                       @ Foreign.C.Types.CSize
                                                       GHC.Real.$fIntegralInt
                                                       Foreign.C.Types.$fNumCSize
                                                       lq_anf__dhiT } in
                                                 Data.ByteString.Internal.memcpy
                                                   ptr' ptr lq_anf__dhj2 } in
                                           let {
                                             lq_anf__dhj4 :: GHC.Types.IO ()
                                             [LclId]
                                             lq_anf__dhj4 =
                                               GHC.Base.$
                                                 @ (GHC.Ptr.Ptr GHC.Word.Word8 -> GHC.Types.IO ())
                                                 @ (GHC.Types.IO ())
                                                 lq_anf__dhj1
                                                 lq_anf__dhj3 } in
                                           let {
                                             lq_anf__dhj5
                                               :: GHC.Types.IO Data.ByteString.Internal.ByteString
                                             [LclId]
                                             lq_anf__dhj5 =
                                               start newSize lq_anf__dhiS lq_anf__dhiT fp' } in
                                           GHC.Base.>>
                                             @ GHC.Types.IO
                                             GHC.Base.$fMonadIO
                                             @ ()
                                             @ Data.ByteString.Internal.ByteString
                                             lq_anf__dhj4
                                             lq_anf__dhj5 } in
                                     GHC.Base.>>=
                                       @ GHC.Types.IO
                                       GHC.Base.$fMonadIO
                                       @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                       @ Data.ByteString.Internal.ByteString
                                       lq_anf__dhj0
                                       lq_anf__dhj6;
                                   GHC.Types.True -> ds_dhgX ptr
                                 } } in
                           let {
                             poke8
                               :: forall a.
                                  GHC.Real.Integral a =>
                                  GHC.Types.Int -> a -> GHC.Types.IO ()
                             [LclId]
                             poke8 =
                               \ (@ a)
                                 ($dIntegral :: GHC.Real.Integral a)
                                 (k :: GHC.Types.Int)
                                 (v :: a) ->
                                 let {
                                   lq_anf__dhj7 :: GHC.Ptr.Ptr GHC.Word.Word8
                                   [LclId]
                                   lq_anf__dhj7 =
                                     GHC.Ptr.plusPtr @ GHC.Word.Word8 @ GHC.Word.Word8 ptr k } in
                                 let {
                                   lq_anf__dhj8 :: GHC.Word.Word8
                                   [LclId]
                                   lq_anf__dhj8 =
                                     GHC.Real.fromIntegral
                                       @ a @ GHC.Word.Word8 $dIntegral GHC.Word.$fNumWord8 v } in
                                 Foreign.Storable.poke
                                   @ GHC.Word.Word8
                                   Foreign.Storable.$fStorableWord8
                                   lq_anf__dhj7
                                   lq_anf__dhj8 } in
                           let {
                             w :: GHC.Word.Word16
                             [LclId]
                             w = Data.Text.Array.unsafeIndexF arr off len lq_anf__dhiS } in
                           let {
                             lq_anf__dhj9 :: GHC.Integer.Type.Integer
                             [LclId]
                             lq_anf__dhj9 = __integer 127 } in
                           let {
                             lq_anf__dhja :: GHC.Word.Word16
                             [LclId]
                             lq_anf__dhja =
                               GHC.Num.fromInteger
                                 @ GHC.Word.Word16 GHC.Word.$fNumWord16 lq_anf__dhj9 } in
                           let {
                             lq_anf__dhjb :: GHC.Types.Bool
                             [LclId]
                             lq_anf__dhjb =
                               GHC.Classes.<=
                                 @ GHC.Word.Word16 GHC.Word.$fOrdWord16 w lq_anf__dhja } in
                           case lq_anf__dhjb of lq_anf__dhjc {
                             GHC.Types.False ->
                               let {
                                 lq_anf__dhjd :: GHC.Integer.Type.Integer
                                 [LclId]
                                 lq_anf__dhjd = __integer 2047 } in
                               let {
                                 lq_anf__dhje :: GHC.Word.Word16
                                 [LclId]
                                 lq_anf__dhje =
                                   GHC.Num.fromInteger
                                     @ GHC.Word.Word16 GHC.Word.$fNumWord16 lq_anf__dhjd } in
                               let {
                                 lq_anf__dhjf :: GHC.Types.Bool
                                 [LclId]
                                 lq_anf__dhjf =
                                   GHC.Classes.<=
                                     @ GHC.Word.Word16 GHC.Word.$fOrdWord16 w lq_anf__dhje } in
                               case lq_anf__dhjf of lq_anf__dhjg {
                                 GHC.Types.False ->
                                   let {
                                     lq_anf__dhjh :: GHC.Integer.Type.Integer
                                     [LclId]
                                     lq_anf__dhjh = __integer 55296 } in
                                   let {
                                     lq_anf__dhji :: GHC.Word.Word16
                                     [LclId]
                                     lq_anf__dhji =
                                       GHC.Num.fromInteger
                                         @ GHC.Word.Word16 GHC.Word.$fNumWord16 lq_anf__dhjh } in
                                   let {
                                     lq_anf__dhjj :: GHC.Types.Bool
                                     [LclId]
                                     lq_anf__dhjj =
                                       GHC.Classes.<=
                                         @ GHC.Word.Word16 GHC.Word.$fOrdWord16 lq_anf__dhji w } in
                                   let {
                                     lq_anf__dhjk :: GHC.Integer.Type.Integer
                                     [LclId]
                                     lq_anf__dhjk = __integer 56319 } in
                                   let {
                                     lq_anf__dhjl :: GHC.Word.Word16
                                     [LclId]
                                     lq_anf__dhjl =
                                       GHC.Num.fromInteger
                                         @ GHC.Word.Word16 GHC.Word.$fNumWord16 lq_anf__dhjk } in
                                   let {
                                     lq_anf__dhjm :: GHC.Types.Bool
                                     [LclId]
                                     lq_anf__dhjm =
                                       GHC.Classes.<=
                                         @ GHC.Word.Word16 GHC.Word.$fOrdWord16 w lq_anf__dhjl } in
                                   let {
                                     lq_anf__dhjn :: GHC.Types.Bool
                                     [LclId]
                                     lq_anf__dhjn = GHC.Classes.&& lq_anf__dhjj lq_anf__dhjm } in
                                   case lq_anf__dhjn of lq_anf__dhjo {
                                     GHC.Types.False ->
                                       let {
                                         lq_anf__dhjp :: GHC.Types.Int
                                         [LclId]
                                         lq_anf__dhjp = GHC.Types.I# 3 } in
                                       let {
                                         lq_anf__dhjq
                                           :: (GHC.Ptr.Ptr GHC.Word.Word8
                                               -> GHC.Types.IO Data.ByteString.Internal.ByteString)
                                              -> GHC.Types.IO Data.ByteString.Internal.ByteString
                                         [LclId]
                                         lq_anf__dhjq = ensure lq_anf__dhjp } in
                                       let {
                                         lq_anf__dhk4
                                           :: GHC.Ptr.Ptr GHC.Word.Word8
                                              -> GHC.Types.IO Data.ByteString.Internal.ByteString
                                         [LclId]
                                         lq_anf__dhk4 =
                                           \ _ ->
                                             let {
                                               lq_anf__dhjr :: GHC.Word.Word16 -> GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhjr =
                                                 poke8
                                                   @ GHC.Word.Word16
                                                   GHC.Word.$fIntegralWord16
                                                   lq_anf__dhiT } in
                                             let {
                                               lq_anf__dhjs :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhjs = GHC.Types.I# 12 } in
                                             let {
                                               lq_anf__dhjt :: GHC.Word.Word16
                                               [LclId]
                                               lq_anf__dhjt =
                                                 Data.Text.UnsafeShift.shiftR
                                                   @ GHC.Word.Word16
                                                   Data.Text.UnsafeShift.$fUnsafeShiftWord16
                                                   w
                                                   lq_anf__dhjs } in
                                             let {
                                               lq_anf__dhju :: GHC.Integer.Type.Integer
                                               [LclId]
                                               lq_anf__dhju = __integer 224 } in
                                             let {
                                               lq_anf__dhjv :: GHC.Word.Word16
                                               [LclId]
                                               lq_anf__dhjv =
                                                 GHC.Num.fromInteger
                                                   @ GHC.Word.Word16
                                                   GHC.Word.$fNumWord16
                                                   lq_anf__dhju } in
                                             let {
                                               lq_anf__dhjw :: GHC.Word.Word16
                                               [LclId]
                                               lq_anf__dhjw =
                                                 GHC.Num.+
                                                   @ GHC.Word.Word16
                                                   GHC.Word.$fNumWord16
                                                   lq_anf__dhjt
                                                   lq_anf__dhjv } in
                                             let {
                                               lq_anf__dhjx :: GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhjx =
                                                 GHC.Base.$
                                                   @ GHC.Word.Word16
                                                   @ (GHC.Types.IO ())
                                                   lq_anf__dhjr
                                                   lq_anf__dhjw } in
                                             let {
                                               lq_anf__dhjy :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhjy = GHC.Types.I# 1 } in
                                             let {
                                               lq_anf__dhjz :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhjz =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhiT
                                                   lq_anf__dhjy } in
                                             let {
                                               lq_anf__dhjA :: GHC.Word.Word16 -> GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhjA =
                                                 poke8
                                                   @ GHC.Word.Word16
                                                   GHC.Word.$fIntegralWord16
                                                   lq_anf__dhjz } in
                                             let {
                                               lq_anf__dhjB :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhjB = GHC.Types.I# 6 } in
                                             let {
                                               lq_anf__dhjC :: GHC.Word.Word16
                                               [LclId]
                                               lq_anf__dhjC =
                                                 Data.Text.UnsafeShift.shiftR
                                                   @ GHC.Word.Word16
                                                   Data.Text.UnsafeShift.$fUnsafeShiftWord16
                                                   w
                                                   lq_anf__dhjB } in
                                             let {
                                               lq_anf__dhjD :: GHC.Integer.Type.Integer
                                               [LclId]
                                               lq_anf__dhjD = __integer 63 } in
                                             let {
                                               lq_anf__dhjE :: GHC.Word.Word16
                                               [LclId]
                                               lq_anf__dhjE =
                                                 GHC.Num.fromInteger
                                                   @ GHC.Word.Word16
                                                   GHC.Word.$fNumWord16
                                                   lq_anf__dhjD } in
                                             let {
                                               lq_anf__dhjF :: GHC.Word.Word16
                                               [LclId]
                                               lq_anf__dhjF =
                                                 Data.Bits..&.
                                                   @ GHC.Word.Word16
                                                   GHC.Word.$fBitsWord16
                                                   lq_anf__dhjC
                                                   lq_anf__dhjE } in
                                             let {
                                               lq_anf__dhjG :: GHC.Integer.Type.Integer
                                               [LclId]
                                               lq_anf__dhjG = __integer 128 } in
                                             let {
                                               lq_anf__dhjH :: GHC.Word.Word16
                                               [LclId]
                                               lq_anf__dhjH =
                                                 GHC.Num.fromInteger
                                                   @ GHC.Word.Word16
                                                   GHC.Word.$fNumWord16
                                                   lq_anf__dhjG } in
                                             let {
                                               lq_anf__dhjI :: GHC.Word.Word16
                                               [LclId]
                                               lq_anf__dhjI =
                                                 GHC.Num.+
                                                   @ GHC.Word.Word16
                                                   GHC.Word.$fNumWord16
                                                   lq_anf__dhjF
                                                   lq_anf__dhjH } in
                                             let {
                                               lq_anf__dhjJ :: GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhjJ =
                                                 GHC.Base.$
                                                   @ GHC.Word.Word16
                                                   @ (GHC.Types.IO ())
                                                   lq_anf__dhjA
                                                   lq_anf__dhjI } in
                                             let {
                                               lq_anf__dhjK :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhjK = GHC.Types.I# 2 } in
                                             let {
                                               lq_anf__dhjL :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhjL =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhiT
                                                   lq_anf__dhjK } in
                                             let {
                                               lq_anf__dhjM :: GHC.Word.Word16 -> GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhjM =
                                                 poke8
                                                   @ GHC.Word.Word16
                                                   GHC.Word.$fIntegralWord16
                                                   lq_anf__dhjL } in
                                             let {
                                               lq_anf__dhjN :: GHC.Integer.Type.Integer
                                               [LclId]
                                               lq_anf__dhjN = __integer 63 } in
                                             let {
                                               lq_anf__dhjO :: GHC.Word.Word16
                                               [LclId]
                                               lq_anf__dhjO =
                                                 GHC.Num.fromInteger
                                                   @ GHC.Word.Word16
                                                   GHC.Word.$fNumWord16
                                                   lq_anf__dhjN } in
                                             let {
                                               lq_anf__dhjP :: GHC.Word.Word16
                                               [LclId]
                                               lq_anf__dhjP =
                                                 Data.Bits..&.
                                                   @ GHC.Word.Word16
                                                   GHC.Word.$fBitsWord16
                                                   w
                                                   lq_anf__dhjO } in
                                             let {
                                               lq_anf__dhjQ :: GHC.Integer.Type.Integer
                                               [LclId]
                                               lq_anf__dhjQ = __integer 128 } in
                                             let {
                                               lq_anf__dhjR :: GHC.Word.Word16
                                               [LclId]
                                               lq_anf__dhjR =
                                                 GHC.Num.fromInteger
                                                   @ GHC.Word.Word16
                                                   GHC.Word.$fNumWord16
                                                   lq_anf__dhjQ } in
                                             let {
                                               lq_anf__dhjS :: GHC.Word.Word16
                                               [LclId]
                                               lq_anf__dhjS =
                                                 GHC.Num.+
                                                   @ GHC.Word.Word16
                                                   GHC.Word.$fNumWord16
                                                   lq_anf__dhjP
                                                   lq_anf__dhjR } in
                                             let {
                                               lq_anf__dhjT :: GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhjT =
                                                 GHC.Base.$
                                                   @ GHC.Word.Word16
                                                   @ (GHC.Types.IO ())
                                                   lq_anf__dhjM
                                                   lq_anf__dhjS } in
                                             let {
                                               lq_anf__dhjU :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhjU = GHC.Types.I# 1 } in
                                             let {
                                               lq_anf__dhjV :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhjV =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhiS
                                                   lq_anf__dhjU } in
                                             let {
                                               lq_anf__dhjW :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhjW =
                                                 GHC.Num.-
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   offLen
                                                   lq_anf__dhjV } in
                                             let {
                                               lq_anf__dhjX :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhjX = GHC.Types.I# 1 } in
                                             let {
                                               lq_anf__dhjY :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhjY =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhiS
                                                   lq_anf__dhjX } in
                                             let {
                                               lq_anf__dhjZ :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhjZ = GHC.Types.I# 3 } in
                                             let {
                                               lq_anf__dhk0 :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhk0 =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhiT
                                                   lq_anf__dhjZ } in
                                             let {
                                               lq_anf__dhk1
                                                 :: GHC.Types.IO Data.ByteString.Internal.ByteString
                                               [LclId]
                                               lq_anf__dhk1 =
                                                 go lq_anf__dhjW lq_anf__dhjY lq_anf__dhk0 } in
                                             let {
                                               lq_anf__dhk2
                                                 :: GHC.Types.IO Data.ByteString.Internal.ByteString
                                               [LclId]
                                               lq_anf__dhk2 =
                                                 GHC.Base.>>
                                                   @ GHC.Types.IO
                                                   GHC.Base.$fMonadIO
                                                   @ ()
                                                   @ Data.ByteString.Internal.ByteString
                                                   lq_anf__dhjT
                                                   lq_anf__dhk1 } in
                                             let {
                                               lq_anf__dhk3
                                                 :: GHC.Types.IO Data.ByteString.Internal.ByteString
                                               [LclId]
                                               lq_anf__dhk3 =
                                                 GHC.Base.>>
                                                   @ GHC.Types.IO
                                                   GHC.Base.$fMonadIO
                                                   @ ()
                                                   @ Data.ByteString.Internal.ByteString
                                                   lq_anf__dhjJ
                                                   lq_anf__dhk2 } in
                                             GHC.Base.>>
                                               @ GHC.Types.IO
                                               GHC.Base.$fMonadIO
                                               @ ()
                                               @ Data.ByteString.Internal.ByteString
                                               lq_anf__dhjx
                                               lq_anf__dhk3 } in
                                       GHC.Base.$
                                         @ (GHC.Ptr.Ptr GHC.Word.Word8
                                            -> GHC.Types.IO Data.ByteString.Internal.ByteString)
                                         @ (GHC.Types.IO Data.ByteString.Internal.ByteString)
                                         lq_anf__dhjq
                                         lq_anf__dhk4;
                                     GHC.Types.True ->
                                       let {
                                         lq_anf__dhk5 :: GHC.Types.Int
                                         [LclId]
                                         lq_anf__dhk5 = GHC.Types.I# 4 } in
                                       let {
                                         lq_anf__dhk6
                                           :: (GHC.Ptr.Ptr GHC.Word.Word8
                                               -> GHC.Types.IO Data.ByteString.Internal.ByteString)
                                              -> GHC.Types.IO Data.ByteString.Internal.ByteString
                                         [LclId]
                                         lq_anf__dhk6 = ensure lq_anf__dhk5 } in
                                       let {
                                         lq_anf__dhkU
                                           :: GHC.Ptr.Ptr GHC.Word.Word8
                                              -> GHC.Types.IO Data.ByteString.Internal.ByteString
                                         [LclId]
                                         lq_anf__dhkU =
                                           \ _ ->
                                             let {
                                               lq_anf__dhk7 :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhk7 = GHC.Types.I# 1 } in
                                             let {
                                               lq_anf__dhk8 :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhk8 =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhiS
                                                   lq_anf__dhk7 } in
                                             let {
                                               lq_anf__dhk9 :: GHC.Word.Word16
                                               [LclId]
                                               lq_anf__dhk9 =
                                                 Data.Text.Array.unsafeIndex arr lq_anf__dhk8 } in
                                             let {
                                               lq_anf__dhka :: GHC.Types.Char
                                               [LclId]
                                               lq_anf__dhka =
                                                 Data.Text.Encoding.Utf16.chr2 w lq_anf__dhk9 } in
                                             let {
                                               c :: GHC.Types.Int
                                               [LclId]
                                               c =
                                                 GHC.Base.$
                                                   @ GHC.Types.Char
                                                   @ GHC.Types.Int
                                                   Data.Text.UnsafeChar.ord
                                                   lq_anf__dhka } in
                                             let {
                                               lq_anf__dhkb :: GHC.Types.Int -> GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhkb =
                                                 poke8
                                                   @ GHC.Types.Int
                                                   GHC.Real.$fIntegralInt
                                                   lq_anf__dhiT } in
                                             let {
                                               lq_anf__dhkc :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkc = GHC.Types.I# 18 } in
                                             let {
                                               lq_anf__dhkd :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkd =
                                                 Data.Text.UnsafeShift.shiftR
                                                   @ GHC.Types.Int
                                                   Data.Text.UnsafeShift.$fUnsafeShiftInt
                                                   c
                                                   lq_anf__dhkc } in
                                             let {
                                               lq_anf__dhke :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhke = GHC.Types.I# 240 } in
                                             let {
                                               lq_anf__dhkf :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkf =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhkd
                                                   lq_anf__dhke } in
                                             let {
                                               lq_anf__dhkg :: GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhkg =
                                                 GHC.Base.$
                                                   @ GHC.Types.Int
                                                   @ (GHC.Types.IO ())
                                                   lq_anf__dhkb
                                                   lq_anf__dhkf } in
                                             let {
                                               lq_anf__dhkh :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkh = GHC.Types.I# 1 } in
                                             let {
                                               lq_anf__dhki :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhki =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhiT
                                                   lq_anf__dhkh } in
                                             let {
                                               lq_anf__dhkj :: GHC.Types.Int -> GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhkj =
                                                 poke8
                                                   @ GHC.Types.Int
                                                   GHC.Real.$fIntegralInt
                                                   lq_anf__dhki } in
                                             let {
                                               lq_anf__dhkk :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkk = GHC.Types.I# 12 } in
                                             let {
                                               lq_anf__dhkl :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkl =
                                                 Data.Text.UnsafeShift.shiftR
                                                   @ GHC.Types.Int
                                                   Data.Text.UnsafeShift.$fUnsafeShiftInt
                                                   c
                                                   lq_anf__dhkk } in
                                             let {
                                               lq_anf__dhkm :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkm = GHC.Types.I# 63 } in
                                             let {
                                               lq_anf__dhkn :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkn =
                                                 Data.Bits..&.
                                                   @ GHC.Types.Int
                                                   Data.Bits.$fBitsInt
                                                   lq_anf__dhkl
                                                   lq_anf__dhkm } in
                                             let {
                                               lq_anf__dhko :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhko = GHC.Types.I# 128 } in
                                             let {
                                               lq_anf__dhkp :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkp =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhkn
                                                   lq_anf__dhko } in
                                             let {
                                               lq_anf__dhkq :: GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhkq =
                                                 GHC.Base.$
                                                   @ GHC.Types.Int
                                                   @ (GHC.Types.IO ())
                                                   lq_anf__dhkj
                                                   lq_anf__dhkp } in
                                             let {
                                               lq_anf__dhkr :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkr = GHC.Types.I# 2 } in
                                             let {
                                               lq_anf__dhks :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhks =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhiT
                                                   lq_anf__dhkr } in
                                             let {
                                               lq_anf__dhkt :: GHC.Types.Int -> GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhkt =
                                                 poke8
                                                   @ GHC.Types.Int
                                                   GHC.Real.$fIntegralInt
                                                   lq_anf__dhks } in
                                             let {
                                               lq_anf__dhku :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhku = GHC.Types.I# 6 } in
                                             let {
                                               lq_anf__dhkv :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkv =
                                                 Data.Text.UnsafeShift.shiftR
                                                   @ GHC.Types.Int
                                                   Data.Text.UnsafeShift.$fUnsafeShiftInt
                                                   c
                                                   lq_anf__dhku } in
                                             let {
                                               lq_anf__dhkw :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkw = GHC.Types.I# 63 } in
                                             let {
                                               lq_anf__dhkx :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkx =
                                                 Data.Bits..&.
                                                   @ GHC.Types.Int
                                                   Data.Bits.$fBitsInt
                                                   lq_anf__dhkv
                                                   lq_anf__dhkw } in
                                             let {
                                               lq_anf__dhky :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhky = GHC.Types.I# 128 } in
                                             let {
                                               lq_anf__dhkz :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkz =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhkx
                                                   lq_anf__dhky } in
                                             let {
                                               lq_anf__dhkA :: GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhkA =
                                                 GHC.Base.$
                                                   @ GHC.Types.Int
                                                   @ (GHC.Types.IO ())
                                                   lq_anf__dhkt
                                                   lq_anf__dhkz } in
                                             let {
                                               lq_anf__dhkB :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkB = GHC.Types.I# 3 } in
                                             let {
                                               lq_anf__dhkC :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkC =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhiT
                                                   lq_anf__dhkB } in
                                             let {
                                               lq_anf__dhkD :: GHC.Types.Int -> GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhkD =
                                                 poke8
                                                   @ GHC.Types.Int
                                                   GHC.Real.$fIntegralInt
                                                   lq_anf__dhkC } in
                                             let {
                                               lq_anf__dhkE :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkE = GHC.Types.I# 63 } in
                                             let {
                                               lq_anf__dhkF :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkF =
                                                 Data.Bits..&.
                                                   @ GHC.Types.Int
                                                   Data.Bits.$fBitsInt
                                                   c
                                                   lq_anf__dhkE } in
                                             let {
                                               lq_anf__dhkG :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkG = GHC.Types.I# 128 } in
                                             let {
                                               lq_anf__dhkH :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkH =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhkF
                                                   lq_anf__dhkG } in
                                             let {
                                               lq_anf__dhkI :: GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhkI =
                                                 GHC.Base.$
                                                   @ GHC.Types.Int
                                                   @ (GHC.Types.IO ())
                                                   lq_anf__dhkD
                                                   lq_anf__dhkH } in
                                             let {
                                               lq_anf__dhkJ :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkJ = GHC.Types.I# 2 } in
                                             let {
                                               lq_anf__dhkK :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkK =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhiS
                                                   lq_anf__dhkJ } in
                                             let {
                                               lq_anf__dhkL :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkL =
                                                 GHC.Num.-
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   offLen
                                                   lq_anf__dhkK } in
                                             let {
                                               lq_anf__dhkM :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkM = GHC.Types.I# 2 } in
                                             let {
                                               lq_anf__dhkN :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkN =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhiS
                                                   lq_anf__dhkM } in
                                             let {
                                               lq_anf__dhkO :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkO = GHC.Types.I# 4 } in
                                             let {
                                               lq_anf__dhkP :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkP =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhiT
                                                   lq_anf__dhkO } in
                                             let {
                                               lq_anf__dhkQ
                                                 :: GHC.Types.IO Data.ByteString.Internal.ByteString
                                               [LclId]
                                               lq_anf__dhkQ =
                                                 go lq_anf__dhkL lq_anf__dhkN lq_anf__dhkP } in
                                             let {
                                               lq_anf__dhkR
                                                 :: GHC.Types.IO Data.ByteString.Internal.ByteString
                                               [LclId]
                                               lq_anf__dhkR =
                                                 GHC.Base.>>
                                                   @ GHC.Types.IO
                                                   GHC.Base.$fMonadIO
                                                   @ ()
                                                   @ Data.ByteString.Internal.ByteString
                                                   lq_anf__dhkI
                                                   lq_anf__dhkQ } in
                                             let {
                                               lq_anf__dhkS
                                                 :: GHC.Types.IO Data.ByteString.Internal.ByteString
                                               [LclId]
                                               lq_anf__dhkS =
                                                 GHC.Base.>>
                                                   @ GHC.Types.IO
                                                   GHC.Base.$fMonadIO
                                                   @ ()
                                                   @ Data.ByteString.Internal.ByteString
                                                   lq_anf__dhkA
                                                   lq_anf__dhkR } in
                                             let {
                                               lq_anf__dhkT
                                                 :: GHC.Types.IO Data.ByteString.Internal.ByteString
                                               [LclId]
                                               lq_anf__dhkT =
                                                 GHC.Base.>>
                                                   @ GHC.Types.IO
                                                   GHC.Base.$fMonadIO
                                                   @ ()
                                                   @ Data.ByteString.Internal.ByteString
                                                   lq_anf__dhkq
                                                   lq_anf__dhkS } in
                                             GHC.Base.>>
                                               @ GHC.Types.IO
                                               GHC.Base.$fMonadIO
                                               @ ()
                                               @ Data.ByteString.Internal.ByteString
                                               lq_anf__dhkg
                                               lq_anf__dhkT } in
                                       GHC.Base.$
                                         @ (GHC.Ptr.Ptr GHC.Word.Word8
                                            -> GHC.Types.IO Data.ByteString.Internal.ByteString)
                                         @ (GHC.Types.IO Data.ByteString.Internal.ByteString)
                                         lq_anf__dhk6
                                         lq_anf__dhkU
                                   };
                                 GHC.Types.True ->
                                   let {
                                     lq_anf__dhkV :: GHC.Types.Int
                                     [LclId]
                                     lq_anf__dhkV = GHC.Types.I# 2 } in
                                   let {
                                     lq_anf__dhkW
                                       :: (GHC.Ptr.Ptr GHC.Word.Word8
                                           -> GHC.Types.IO Data.ByteString.Internal.ByteString)
                                          -> GHC.Types.IO Data.ByteString.Internal.ByteString
                                     [LclId]
                                     lq_anf__dhkW = ensure lq_anf__dhkV } in
                                   let {
                                     lq_anf__dhln
                                       :: GHC.Ptr.Ptr GHC.Word.Word8
                                          -> GHC.Types.IO Data.ByteString.Internal.ByteString
                                     [LclId]
                                     lq_anf__dhln =
                                       \ _ ->
                                         let {
                                           lq_anf__dhkX :: GHC.Word.Word16 -> GHC.Types.IO ()
                                           [LclId]
                                           lq_anf__dhkX =
                                             poke8
                                               @ GHC.Word.Word16
                                               GHC.Word.$fIntegralWord16
                                               lq_anf__dhiT } in
                                         let {
                                           lq_anf__dhkY :: GHC.Types.Int
                                           [LclId]
                                           lq_anf__dhkY = GHC.Types.I# 6 } in
                                         let {
                                           lq_anf__dhkZ :: GHC.Word.Word16
                                           [LclId]
                                           lq_anf__dhkZ =
                                             Data.Text.UnsafeShift.shiftR
                                               @ GHC.Word.Word16
                                               Data.Text.UnsafeShift.$fUnsafeShiftWord16
                                               w
                                               lq_anf__dhkY } in
                                         let {
                                           lq_anf__dhl0 :: GHC.Integer.Type.Integer
                                           [LclId]
                                           lq_anf__dhl0 = __integer 192 } in
                                         let {
                                           lq_anf__dhl1 :: GHC.Word.Word16
                                           [LclId]
                                           lq_anf__dhl1 =
                                             GHC.Num.fromInteger
                                               @ GHC.Word.Word16
                                               GHC.Word.$fNumWord16
                                               lq_anf__dhl0 } in
                                         let {
                                           lq_anf__dhl2 :: GHC.Word.Word16
                                           [LclId]
                                           lq_anf__dhl2 =
                                             GHC.Num.+
                                               @ GHC.Word.Word16
                                               GHC.Word.$fNumWord16
                                               lq_anf__dhkZ
                                               lq_anf__dhl1 } in
                                         let {
                                           lq_anf__dhl3 :: GHC.Types.IO ()
                                           [LclId]
                                           lq_anf__dhl3 =
                                             GHC.Base.$
                                               @ GHC.Word.Word16
                                               @ (GHC.Types.IO ())
                                               lq_anf__dhkX
                                               lq_anf__dhl2 } in
                                         let {
                                           lq_anf__dhl4 :: GHC.Types.Int
                                           [LclId]
                                           lq_anf__dhl4 = GHC.Types.I# 1 } in
                                         let {
                                           lq_anf__dhl5 :: GHC.Types.Int
                                           [LclId]
                                           lq_anf__dhl5 =
                                             GHC.Num.+
                                               @ GHC.Types.Int
                                               GHC.Num.$fNumInt
                                               lq_anf__dhiT
                                               lq_anf__dhl4 } in
                                         let {
                                           lq_anf__dhl6 :: GHC.Word.Word16 -> GHC.Types.IO ()
                                           [LclId]
                                           lq_anf__dhl6 =
                                             poke8
                                               @ GHC.Word.Word16
                                               GHC.Word.$fIntegralWord16
                                               lq_anf__dhl5 } in
                                         let {
                                           lq_anf__dhl7 :: GHC.Integer.Type.Integer
                                           [LclId]
                                           lq_anf__dhl7 = __integer 63 } in
                                         let {
                                           lq_anf__dhl8 :: GHC.Word.Word16
                                           [LclId]
                                           lq_anf__dhl8 =
                                             GHC.Num.fromInteger
                                               @ GHC.Word.Word16
                                               GHC.Word.$fNumWord16
                                               lq_anf__dhl7 } in
                                         let {
                                           lq_anf__dhl9 :: GHC.Word.Word16
                                           [LclId]
                                           lq_anf__dhl9 =
                                             Data.Bits..&.
                                               @ GHC.Word.Word16
                                               GHC.Word.$fBitsWord16
                                               w
                                               lq_anf__dhl8 } in
                                         let {
                                           lq_anf__dhla :: GHC.Integer.Type.Integer
                                           [LclId]
                                           lq_anf__dhla = __integer 128 } in
                                         let {
                                           lq_anf__dhlb :: GHC.Word.Word16
                                           [LclId]
                                           lq_anf__dhlb =
                                             GHC.Num.fromInteger
                                               @ GHC.Word.Word16
                                               GHC.Word.$fNumWord16
                                               lq_anf__dhla } in
                                         let {
                                           lq_anf__dhlc :: GHC.Word.Word16
                                           [LclId]
                                           lq_anf__dhlc =
                                             GHC.Num.+
                                               @ GHC.Word.Word16
                                               GHC.Word.$fNumWord16
                                               lq_anf__dhl9
                                               lq_anf__dhlb } in
                                         let {
                                           lq_anf__dhld :: GHC.Types.IO ()
                                           [LclId]
                                           lq_anf__dhld =
                                             GHC.Base.$
                                               @ GHC.Word.Word16
                                               @ (GHC.Types.IO ())
                                               lq_anf__dhl6
                                               lq_anf__dhlc } in
                                         let {
                                           lq_anf__dhle :: GHC.Types.Int
                                           [LclId]
                                           lq_anf__dhle = GHC.Types.I# 1 } in
                                         let {
                                           lq_anf__dhlf :: GHC.Types.Int
                                           [LclId]
                                           lq_anf__dhlf =
                                             GHC.Num.+
                                               @ GHC.Types.Int
                                               GHC.Num.$fNumInt
                                               lq_anf__dhiS
                                               lq_anf__dhle } in
                                         let {
                                           lq_anf__dhlg :: GHC.Types.Int
                                           [LclId]
                                           lq_anf__dhlg =
                                             GHC.Num.-
                                               @ GHC.Types.Int
                                               GHC.Num.$fNumInt
                                               offLen
                                               lq_anf__dhlf } in
                                         let {
                                           lq_anf__dhlh :: GHC.Types.Int
                                           [LclId]
                                           lq_anf__dhlh = GHC.Types.I# 1 } in
                                         let {
                                           lq_anf__dhli :: GHC.Types.Int
                                           [LclId]
                                           lq_anf__dhli =
                                             GHC.Num.+
                                               @ GHC.Types.Int
                                               GHC.Num.$fNumInt
                                               lq_anf__dhiS
                                               lq_anf__dhlh } in
                                         let {
                                           lq_anf__dhlj :: GHC.Types.Int
                                           [LclId]
                                           lq_anf__dhlj = GHC.Types.I# 2 } in
                                         let {
                                           lq_anf__dhlk :: GHC.Types.Int
                                           [LclId]
                                           lq_anf__dhlk =
                                             GHC.Num.+
                                               @ GHC.Types.Int
                                               GHC.Num.$fNumInt
                                               lq_anf__dhiT
                                               lq_anf__dhlj } in
                                         let {
                                           lq_anf__dhll
                                             :: GHC.Types.IO Data.ByteString.Internal.ByteString
                                           [LclId]
                                           lq_anf__dhll =
                                             go lq_anf__dhlg lq_anf__dhli lq_anf__dhlk } in
                                         let {
                                           lq_anf__dhlm
                                             :: GHC.Types.IO Data.ByteString.Internal.ByteString
                                           [LclId]
                                           lq_anf__dhlm =
                                             GHC.Base.>>
                                               @ GHC.Types.IO
                                               GHC.Base.$fMonadIO
                                               @ ()
                                               @ Data.ByteString.Internal.ByteString
                                               lq_anf__dhld
                                               lq_anf__dhll } in
                                         GHC.Base.>>
                                           @ GHC.Types.IO
                                           GHC.Base.$fMonadIO
                                           @ ()
                                           @ Data.ByteString.Internal.ByteString
                                           lq_anf__dhl3
                                           lq_anf__dhlm } in
                                   GHC.Base.$
                                     @ (GHC.Ptr.Ptr GHC.Word.Word8
                                        -> GHC.Types.IO Data.ByteString.Internal.ByteString)
                                     @ (GHC.Types.IO Data.ByteString.Internal.ByteString)
                                     lq_anf__dhkW
                                     lq_anf__dhln
                               };
                             GHC.Types.True ->
                               let {
                                 lq_anf__dhlo :: GHC.Types.Int
                                 [LclId]
                                 lq_anf__dhlo = GHC.Types.I# 1 } in
                               let {
                                 lq_anf__dhlp
                                   :: (GHC.Ptr.Ptr GHC.Word.Word8
                                       -> GHC.Types.IO Data.ByteString.Internal.ByteString)
                                      -> GHC.Types.IO Data.ByteString.Internal.ByteString
                                 [LclId]
                                 lq_anf__dhlp = ensure lq_anf__dhlo } in
                               let {
                                 lq_anf__dhlY
                                   :: GHC.Ptr.Ptr GHC.Word.Word8
                                      -> GHC.Types.IO Data.ByteString.Internal.ByteString
                                 [LclId]
                                 lq_anf__dhlY =
                                   \ (ptr :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                                     let {
                                       lq_anf__dhlq :: GHC.Ptr.Ptr GHC.Word.Word8
                                       [LclId]
                                       lq_anf__dhlq =
                                         GHC.Ptr.plusPtr
                                           @ GHC.Word.Word8 @ GHC.Word.Word8 ptr lq_anf__dhiT } in
                                     let {
                                       lq_anf__dhlr :: GHC.Word.Word8
                                       [LclId]
                                       lq_anf__dhlr =
                                         GHC.Real.fromIntegral
                                           @ GHC.Word.Word16
                                           @ GHC.Word.Word8
                                           GHC.Word.$fIntegralWord16
                                           GHC.Word.$fNumWord8
                                           w } in
                                     let {
                                       lq_anf__dhls :: GHC.Types.IO ()
                                       [LclId]
                                       lq_anf__dhls =
                                         Foreign.Storable.poke
                                           @ GHC.Word.Word8
                                           Foreign.Storable.$fStorableWord8
                                           lq_anf__dhlq
                                           lq_anf__dhlr } in
                                     let {
                                       end :: GHC.Ptr.Ptr GHC.Word.Word8
                                       [LclId]
                                       end =
                                         GHC.Ptr.plusPtr
                                           @ GHC.Word.Word8 @ GHC.Word.Word8 ptr size } in
                                     letrec {
                                       ascii [Occ=LoopBreaker]
                                         :: GHC.Types.Int
                                            -> GHC.Types.Int
                                            -> GHC.Ptr.Ptr GHC.Word.Word8
                                            -> GHC.Types.IO Data.ByteString.Internal.ByteString
                                       [LclId]
                                       ascii =
                                         \ (ds_dhgF :: GHC.Types.Int)
                                           (t :: GHC.Types.Int)
                                           (u :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                                           case t of lq_anf__dhlt { GHC.Types.I# lq_anf__dhlP ->
                                           case u of lq_anf__dhlu { GHC.Ptr.Ptr lq_anf__dhlO ->
                                           let {
                                             lq_anf__dhlv :: GHC.Types.Bool
                                             [LclId]
                                             lq_anf__dhlv =
                                               GHC.Classes.==
                                                 @ GHC.Types.Int
                                                 GHC.Classes.$fEqInt
                                                 lq_anf__dhlt
                                                 offLen } in
                                           let {
                                             lq_anf__dhlw :: GHC.Types.Bool
                                             [LclId]
                                             lq_anf__dhlw =
                                               Language.Haskell.Liquid.Foreign.eqPtr
                                                 @ GHC.Word.Word8 lq_anf__dhlu end } in
                                           let {
                                             lq_anf__dhlx :: GHC.Types.Bool
                                             [LclId]
                                             lq_anf__dhlx =
                                               GHC.Classes.|| lq_anf__dhlv lq_anf__dhlw } in
                                           case lq_anf__dhlx of lq_anf__dhly {
                                             GHC.Types.False ->
                                               let {
                                                 v :: GHC.Word.Word16
                                                 [LclId]
                                                 v =
                                                   Data.Text.Array.unsafeIndex arr lq_anf__dhlt } in
                                               let {
                                                 lq_anf__dhlz :: GHC.Integer.Type.Integer
                                                 [LclId]
                                                 lq_anf__dhlz = __integer 128 } in
                                               let {
                                                 lq_anf__dhlA :: GHC.Word.Word16
                                                 [LclId]
                                                 lq_anf__dhlA =
                                                   GHC.Num.fromInteger
                                                     @ GHC.Word.Word16
                                                     GHC.Word.$fNumWord16
                                                     lq_anf__dhlz } in
                                               let {
                                                 lq_anf__dhlB :: GHC.Types.Bool
                                                 [LclId]
                                                 lq_anf__dhlB =
                                                   GHC.Classes.>=
                                                     @ GHC.Word.Word16
                                                     GHC.Word.$fOrdWord16
                                                     v
                                                     lq_anf__dhlA } in
                                               case lq_anf__dhlB of lq_anf__dhlC {
                                                 GHC.Types.False ->
                                                   let {
                                                     lq_anf__dhlD :: GHC.Word.Word8
                                                     [LclId]
                                                     lq_anf__dhlD =
                                                       GHC.Real.fromIntegral
                                                         @ GHC.Word.Word16
                                                         @ GHC.Word.Word8
                                                         GHC.Word.$fIntegralWord16
                                                         GHC.Word.$fNumWord8
                                                         v } in
                                                   let {
                                                     lq_anf__dhlE :: GHC.Types.IO ()
                                                     [LclId]
                                                     lq_anf__dhlE =
                                                       Foreign.Storable.poke
                                                         @ GHC.Word.Word8
                                                         Foreign.Storable.$fStorableWord8
                                                         lq_anf__dhlu
                                                         lq_anf__dhlD } in
                                                   let {
                                                     lq_anf__dhlF :: GHC.Types.Int
                                                     [LclId]
                                                     lq_anf__dhlF = GHC.Types.I# 1 } in
                                                   let {
                                                     lq_anf__dhlG :: GHC.Types.Int
                                                     [LclId]
                                                     lq_anf__dhlG =
                                                       GHC.Num.-
                                                         @ GHC.Types.Int
                                                         GHC.Num.$fNumInt
                                                         ds_dhgF
                                                         lq_anf__dhlF } in
                                                   let {
                                                     lq_anf__dhlH :: GHC.Types.Int
                                                     [LclId]
                                                     lq_anf__dhlH = GHC.Types.I# 1 } in
                                                   let {
                                                     lq_anf__dhlI :: GHC.Types.Int
                                                     [LclId]
                                                     lq_anf__dhlI =
                                                       GHC.Num.+
                                                         @ GHC.Types.Int
                                                         GHC.Num.$fNumInt
                                                         lq_anf__dhlt
                                                         lq_anf__dhlH } in
                                                   let {
                                                     lq_anf__dhlJ :: GHC.Types.Int
                                                     [LclId]
                                                     lq_anf__dhlJ = GHC.Types.I# 1 } in
                                                   let {
                                                     lq_anf__dhlK :: GHC.Ptr.Ptr GHC.Word.Word8
                                                     [LclId]
                                                     lq_anf__dhlK =
                                                       GHC.Ptr.plusPtr
                                                         @ GHC.Word.Word8
                                                         @ GHC.Word.Word8
                                                         lq_anf__dhlu
                                                         lq_anf__dhlJ } in
                                                   let {
                                                     lq_anf__dhlL
                                                       :: GHC.Types.IO
                                                            Data.ByteString.Internal.ByteString
                                                     [LclId]
                                                     lq_anf__dhlL =
                                                       ascii
                                                         lq_anf__dhlG lq_anf__dhlI lq_anf__dhlK } in
                                                   GHC.Base.>>
                                                     @ GHC.Types.IO
                                                     GHC.Base.$fMonadIO
                                                     @ ()
                                                     @ Data.ByteString.Internal.ByteString
                                                     lq_anf__dhlE
                                                     lq_anf__dhlL;
                                                 GHC.Types.True ->
                                                   let {
                                                     lq_anf__dhlM :: GHC.Types.Int
                                                     [LclId]
                                                     lq_anf__dhlM =
                                                       GHC.Ptr.minusPtr
                                                         @ GHC.Word.Word8
                                                         @ GHC.Word.Word8
                                                         lq_anf__dhlu
                                                         ptr } in
                                                   go ds_dhgF lq_anf__dhlt lq_anf__dhlM
                                               };
                                             GHC.Types.True ->
                                               let {
                                                 lq_anf__dhlN :: GHC.Types.Int
                                                 [LclId]
                                                 lq_anf__dhlN =
                                                   GHC.Ptr.minusPtr
                                                     @ GHC.Word.Word8
                                                     @ GHC.Word.Word8
                                                     lq_anf__dhlu
                                                     ptr } in
                                               go ds_dhgF lq_anf__dhlt lq_anf__dhlN
                                           }
                                           }
                                           }; } in
                                     let {
                                       ascii
                                         :: GHC.Types.Int
                                            -> GHC.Types.Int
                                            -> GHC.Ptr.Ptr GHC.Word.Word8
                                            -> GHC.Types.IO Data.ByteString.Internal.ByteString
                                       [LclId]
                                       ascii = ascii } in
                                     let {
                                       lq_anf__dhlQ :: GHC.Types.Int
                                       [LclId]
                                       lq_anf__dhlQ = GHC.Types.I# 1 } in
                                     let {
                                       lq_anf__dhlR :: GHC.Types.Int
                                       [LclId]
                                       lq_anf__dhlR =
                                         GHC.Num.-
                                           @ GHC.Types.Int
                                           GHC.Num.$fNumInt
                                           ds_dhh2
                                           lq_anf__dhlQ } in
                                     let {
                                       lq_anf__dhlS :: GHC.Types.Int
                                       [LclId]
                                       lq_anf__dhlS = GHC.Types.I# 1 } in
                                     let {
                                       lq_anf__dhlT :: GHC.Types.Int
                                       [LclId]
                                       lq_anf__dhlT =
                                         GHC.Num.+
                                           @ GHC.Types.Int
                                           GHC.Num.$fNumInt
                                           lq_anf__dhiS
                                           lq_anf__dhlS } in
                                     let {
                                       lq_anf__dhlU :: GHC.Types.Int
                                       [LclId]
                                       lq_anf__dhlU = GHC.Types.I# 1 } in
                                     let {
                                       lq_anf__dhlV :: GHC.Types.Int
                                       [LclId]
                                       lq_anf__dhlV =
                                         GHC.Num.+
                                           @ GHC.Types.Int
                                           GHC.Num.$fNumInt
                                           lq_anf__dhiT
                                           lq_anf__dhlU } in
                                     let {
                                       lq_anf__dhlW :: GHC.Ptr.Ptr GHC.Word.Word8
                                       [LclId]
                                       lq_anf__dhlW =
                                         GHC.Ptr.plusPtr
                                           @ GHC.Word.Word8 @ GHC.Word.Word8 ptr lq_anf__dhlV } in
                                     let {
                                       lq_anf__dhlX
                                         :: GHC.Types.IO Data.ByteString.Internal.ByteString
                                       [LclId]
                                       lq_anf__dhlX =
                                         ascii lq_anf__dhlR lq_anf__dhlT lq_anf__dhlW } in
                                     GHC.Base.>>
                                       @ GHC.Types.IO
                                       GHC.Base.$fMonadIO
                                       @ ()
                                       @ Data.ByteString.Internal.ByteString
                                       lq_anf__dhls
                                       lq_anf__dhlX } in
                               GHC.Base.$
                                 @ (GHC.Ptr.Ptr GHC.Word.Word8
                                    -> GHC.Types.IO Data.ByteString.Internal.ByteString)
                                 @ (GHC.Types.IO Data.ByteString.Internal.ByteString)
                                 lq_anf__dhlp
                                 lq_anf__dhlY
                           };
                         GHC.Types.True ->
                           let {
                             lq_anf__dhlZ :: GHC.Types.Int
                             [LclId]
                             lq_anf__dhlZ = GHC.Types.I# 0 } in
                           let {
                             lq_anf__dhm0 :: Data.ByteString.Internal.ByteString
                             [LclId]
                             lq_anf__dhm0 =
                               Data.ByteString.Internal.$WPS fp lq_anf__dhlZ lq_anf__dhiT } in
                           GHC.Base.return
                             @ GHC.Types.IO
                             GHC.Base.$fMonadIO
                             @ Data.ByteString.Internal.ByteString
                             lq_anf__dhm0
                       }
                       }
                       }; } in
                 let {
                   go
                     :: GHC.Types.Int
                        -> GHC.Types.Int
                        -> GHC.Types.Int
                        -> GHC.Types.IO Data.ByteString.Internal.ByteString
                   [LclId]
                   go = go } in
                 let {
                   lq_anf__dhm3 :: GHC.Types.Int
                   [LclId]
                   lq_anf__dhm3 =
                     GHC.Num.- @ GHC.Types.Int GHC.Num.$fNumInt offLen n1 } in
                 go lq_anf__dhm3 n1 m1 } in
           let {
             lq_anf__dhm4
               :: (GHC.Ptr.Ptr GHC.Word.Word8
                   -> GHC.Types.IO Data.ByteString.Internal.ByteString)
                  -> GHC.Types.IO Data.ByteString.Internal.ByteString
             [LclId]
             lq_anf__dhm4 =
               Foreign.ForeignPtr.Imp.withForeignPtr
                 @ GHC.Word.Word8 @ Data.ByteString.Internal.ByteString fp } in
           let {
             lq_anf__dhm5
               :: GHC.Ptr.Ptr GHC.Word.Word8
                  -> GHC.Types.IO Data.ByteString.Internal.ByteString
             [LclId]
             lq_anf__dhm5 = loop n0 m0 } in
           GHC.Base.$
             @ (GHC.Ptr.Ptr GHC.Word.Word8
                -> GHC.Types.IO Data.ByteString.Internal.ByteString)
             @ (GHC.Types.IO Data.ByteString.Internal.ByteString)
             lq_anf__dhm4
             lq_anf__dhm5; } in
     let {
       start
         :: GHC.Types.Int
            -> GHC.Types.Int
            -> GHC.Types.Int
            -> GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
            -> GHC.Types.IO Data.ByteString.Internal.ByteString
       [LclId]
       start = start } in
     let {
       lq_anf__dhm6
         :: GHC.Types.IO Data.ByteString.Internal.ByteString
            -> Data.ByteString.Internal.ByteString
       [LclId]
       lq_anf__dhm6 =
         GHC.IO.unsafePerformIO @ Data.ByteString.Internal.ByteString } in
     let {
       lq_anf__dhm7 :: GHC.Types.Int
       [LclId]
       lq_anf__dhm7 = GHC.Types.I# 4 } in
     let {
       size0 :: GHC.Types.Int
       [LclId]
       size0 =
         GHC.Classes.max
           @ GHC.Types.Int GHC.Classes.$fOrdInt len lq_anf__dhm7 } in
     let {
       lq_anf__dhm8
         :: GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
       [LclId]
       lq_anf__dhm8 =
         Data.ByteString.Internal.mallocByteString
           @ GHC.Word.Word8 size0 } in
     let {
       lq_anf__dhm9 :: GHC.Types.Int
       [LclId]
       lq_anf__dhm9 = GHC.Types.I# 0 } in
     let {
       lq_anf__dhma
         :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
            -> GHC.Types.IO Data.ByteString.Internal.ByteString
       [LclId]
       lq_anf__dhma = start size0 off lq_anf__dhm9 } in
     let {
       lq_anf__dhmb :: GHC.Types.IO Data.ByteString.Internal.ByteString
       [LclId]
       lq_anf__dhmb =
         GHC.Base.>>=
           @ GHC.Types.IO
           GHC.Base.$fMonadIO
           @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
           @ Data.ByteString.Internal.ByteString
           lq_anf__dhm8
           lq_anf__dhma } in
     GHC.Base.$
       @ (GHC.Types.IO Data.ByteString.Internal.ByteString)
       @ Data.ByteString.Internal.ByteString
       lq_anf__dhm6
       lq_anf__dhmb
     }]
[1;94m
**** DONE:  transformRecExpr ***************************************************
[0m[1;90m 
[0m*************** Transform Rec Expr CoreBinds *****************
[Data.Text.Encoding.c_decode_utf8
   :: forall s.
      Data.Text.Array.MArray s
      -> GHC.Ptr.Ptr Foreign.C.Types.CSize
      -> GHC.Ptr.Ptr GHC.Word.Word8
      -> GHC.Ptr.Ptr GHC.Word.Word8
      -> GHC.Types.IO (GHC.Ptr.Ptr GHC.Word.Word8)
 [LclIdX]
 Data.Text.Encoding.c_decode_utf8 =
   \ (@ s) ->
     GHC.Err.undefined
       @ (Data.Text.Array.MArray s
          -> GHC.Ptr.Ptr Foreign.C.Types.CSize
          -> GHC.Ptr.Ptr GHC.Word.Word8
          -> GHC.Ptr.Ptr GHC.Word.Word8
          -> GHC.Types.IO (GHC.Ptr.Ptr GHC.Word.Word8)),
 Data.Text.Encoding.encodeUtf32BE [InlPrag=INLINE (sat-args=1)]
   :: Data.Text.Internal.Text -> Data.ByteString.Internal.ByteString
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=1, Value=True,
          ConLike=True, WorkFree=True, Expandable=True,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= \ (txt [Occ=OnceL] :: Data.Text.Internal.Text) ->
                  scc<CAF>
                  (scc<CAF> Data.Text.Encoding.Fusion.unstream)
                    (scc<CAF>
                     scc<CAF>
                     (scc<CAF> Data.Text.Encoding.Fusion.Common.restreamUtf32BE)
                       (scc<CAF>
                        scc<CAF> (scc<CAF> Data.Text.Fusion.stream) (scc<CAF> txt)))}]
 Data.Text.Encoding.encodeUtf32BE =
   \ (eta_B1 :: Data.Text.Internal.Text) ->
     (\ (txt :: Data.Text.Internal.Text) ->
        let {
          lq_anf__dhhE :: Data.Text.Fusion.Internal.Stream GHC.Types.Char
          [LclId]
          lq_anf__dhhE = Data.Text.Fusion.stream txt } in
        let {
          lq_anf__dhhF :: Data.Text.Fusion.Internal.Stream GHC.Word.Word8
          [LclId]
          lq_anf__dhhF =
            Data.Text.Encoding.Fusion.Common.restreamUtf32BE lq_anf__dhhE } in
        Data.Text.Encoding.Fusion.unstream lq_anf__dhhF)
       eta_B1,
 Data.Text.Encoding.encodeUtf32LE [InlPrag=INLINE (sat-args=1)]
   :: Data.Text.Internal.Text -> Data.ByteString.Internal.ByteString
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=1, Value=True,
          ConLike=True, WorkFree=True, Expandable=True,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= \ (txt [Occ=OnceL] :: Data.Text.Internal.Text) ->
                  scc<CAF>
                  (scc<CAF> Data.Text.Encoding.Fusion.unstream)
                    (scc<CAF>
                     scc<CAF>
                     (scc<CAF> Data.Text.Encoding.Fusion.Common.restreamUtf32LE)
                       (scc<CAF>
                        scc<CAF> (scc<CAF> Data.Text.Fusion.stream) (scc<CAF> txt)))}]
 Data.Text.Encoding.encodeUtf32LE =
   \ (eta_B1 :: Data.Text.Internal.Text) ->
     (\ (txt :: Data.Text.Internal.Text) ->
        let {
          lq_anf__dhhG :: Data.Text.Fusion.Internal.Stream GHC.Types.Char
          [LclId]
          lq_anf__dhhG = Data.Text.Fusion.stream txt } in
        let {
          lq_anf__dhhH :: Data.Text.Fusion.Internal.Stream GHC.Word.Word8
          [LclId]
          lq_anf__dhhH =
            Data.Text.Encoding.Fusion.Common.restreamUtf32LE lq_anf__dhhG } in
        Data.Text.Encoding.Fusion.unstream lq_anf__dhhH)
       eta_B1,
 Data.Text.Encoding.decodeUtf32BEWith [InlPrag=INLINE (sat-args=2)]
   :: Data.Text.Encoding.Error.OnDecodeError
      -> Data.ByteString.Internal.ByteString -> Data.Text.Internal.Text
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=2, Value=True,
          ConLike=True, WorkFree=True, Expandable=True,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= \ (onErr [Occ=OnceL]
                     :: Data.Text.Encoding.Error.OnDecodeError)
                  (bs [Occ=OnceL] :: Data.ByteString.Internal.ByteString) ->
                  scc<CAF>
                  (scc<CAF> Data.Text.Fusion.unstream)
                    (scc<CAF>
                     scc<CAF>
                     (scc<CAF>
                      (scc<CAF> Data.Text.Encoding.Fusion.streamUtf32BE)
                        (scc<CAF> onErr))
                       (scc<CAF> bs))}]
 Data.Text.Encoding.decodeUtf32BEWith =
   \ (eta_B2 :: Data.Text.Encoding.Error.OnDecodeError)
     (eta_B1 :: Data.ByteString.Internal.ByteString) ->
     (\ (onErr :: Data.Text.Encoding.Error.OnDecodeError)
        (bs :: Data.ByteString.Internal.ByteString) ->
        let {
          lq_anf__dhhI :: Data.Text.Fusion.Internal.Stream GHC.Types.Char
          [LclId]
          lq_anf__dhhI =
            Data.Text.Encoding.Fusion.streamUtf32BE onErr bs } in
        Data.Text.Fusion.unstream lq_anf__dhhI)
       eta_B2 eta_B1,
 Data.Text.Encoding.decodeUtf32BE [InlPrag=INLINE (sat-args=0)]
   :: Data.ByteString.Internal.ByteString -> Data.Text.Internal.Text
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=0, Value=False,
          ConLike=False, WorkFree=False, Expandable=False,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= scc<CAF>
                (scc<CAF> Data.Text.Encoding.decodeUtf32BEWith)
                  (scc<CAF> Data.Text.Encoding.Error.strictDecode)}]
 Data.Text.Encoding.decodeUtf32BE =
   Data.Text.Encoding.decodeUtf32BEWith
     Data.Text.Encoding.Error.strictDecode,
 Data.Text.Encoding.decodeUtf32LEWith [InlPrag=INLINE (sat-args=2)]
   :: Data.Text.Encoding.Error.OnDecodeError
      -> Data.ByteString.Internal.ByteString -> Data.Text.Internal.Text
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=2, Value=True,
          ConLike=True, WorkFree=True, Expandable=True,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= \ (onErr [Occ=OnceL]
                     :: Data.Text.Encoding.Error.OnDecodeError)
                  (bs [Occ=OnceL] :: Data.ByteString.Internal.ByteString) ->
                  scc<CAF>
                  (scc<CAF> Data.Text.Fusion.unstream)
                    (scc<CAF>
                     scc<CAF>
                     (scc<CAF>
                      (scc<CAF> Data.Text.Encoding.Fusion.streamUtf32LE)
                        (scc<CAF> onErr))
                       (scc<CAF> bs))}]
 Data.Text.Encoding.decodeUtf32LEWith =
   \ (eta_B2 :: Data.Text.Encoding.Error.OnDecodeError)
     (eta_B1 :: Data.ByteString.Internal.ByteString) ->
     (\ (onErr :: Data.Text.Encoding.Error.OnDecodeError)
        (bs :: Data.ByteString.Internal.ByteString) ->
        let {
          lq_anf__dhhJ :: Data.Text.Fusion.Internal.Stream GHC.Types.Char
          [LclId]
          lq_anf__dhhJ =
            Data.Text.Encoding.Fusion.streamUtf32LE onErr bs } in
        Data.Text.Fusion.unstream lq_anf__dhhJ)
       eta_B2 eta_B1,
 Data.Text.Encoding.decodeUtf32LE [InlPrag=INLINE (sat-args=0)]
   :: Data.ByteString.Internal.ByteString -> Data.Text.Internal.Text
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=0, Value=False,
          ConLike=False, WorkFree=False, Expandable=False,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= scc<CAF>
                (scc<CAF> Data.Text.Encoding.decodeUtf32LEWith)
                  (scc<CAF> Data.Text.Encoding.Error.strictDecode)}]
 Data.Text.Encoding.decodeUtf32LE =
   Data.Text.Encoding.decodeUtf32LEWith
     Data.Text.Encoding.Error.strictDecode,
 Data.Text.Encoding.encodeUtf16BE [InlPrag=INLINE (sat-args=1)]
   :: Data.Text.Internal.Text -> Data.ByteString.Internal.ByteString
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=1, Value=True,
          ConLike=True, WorkFree=True, Expandable=True,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= \ (txt [Occ=OnceL] :: Data.Text.Internal.Text) ->
                  scc<CAF>
                  (scc<CAF> Data.Text.Encoding.Fusion.unstream)
                    (scc<CAF>
                     scc<CAF>
                     (scc<CAF> Data.Text.Encoding.Fusion.Common.restreamUtf16BE)
                       (scc<CAF>
                        scc<CAF> (scc<CAF> Data.Text.Fusion.stream) (scc<CAF> txt)))}]
 Data.Text.Encoding.encodeUtf16BE =
   \ (eta_B1 :: Data.Text.Internal.Text) ->
     (\ (txt :: Data.Text.Internal.Text) ->
        let {
          lq_anf__dhhK :: Data.Text.Fusion.Internal.Stream GHC.Types.Char
          [LclId]
          lq_anf__dhhK = Data.Text.Fusion.stream txt } in
        let {
          lq_anf__dhhL :: Data.Text.Fusion.Internal.Stream GHC.Word.Word8
          [LclId]
          lq_anf__dhhL =
            Data.Text.Encoding.Fusion.Common.restreamUtf16BE lq_anf__dhhK } in
        Data.Text.Encoding.Fusion.unstream lq_anf__dhhL)
       eta_B1,
 Data.Text.Encoding.encodeUtf16LE [InlPrag=INLINE (sat-args=1)]
   :: Data.Text.Internal.Text -> Data.ByteString.Internal.ByteString
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=1, Value=True,
          ConLike=True, WorkFree=True, Expandable=True,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= \ (txt [Occ=OnceL] :: Data.Text.Internal.Text) ->
                  scc<CAF>
                  (scc<CAF> Data.Text.Encoding.Fusion.unstream)
                    (scc<CAF>
                     scc<CAF>
                     (scc<CAF> Data.Text.Encoding.Fusion.Common.restreamUtf16LE)
                       (scc<CAF>
                        scc<CAF> (scc<CAF> Data.Text.Fusion.stream) (scc<CAF> txt)))}]
 Data.Text.Encoding.encodeUtf16LE =
   \ (eta_B1 :: Data.Text.Internal.Text) ->
     (\ (txt :: Data.Text.Internal.Text) ->
        let {
          lq_anf__dhhM :: Data.Text.Fusion.Internal.Stream GHC.Types.Char
          [LclId]
          lq_anf__dhhM = Data.Text.Fusion.stream txt } in
        let {
          lq_anf__dhhN :: Data.Text.Fusion.Internal.Stream GHC.Word.Word8
          [LclId]
          lq_anf__dhhN =
            Data.Text.Encoding.Fusion.Common.restreamUtf16LE lq_anf__dhhM } in
        Data.Text.Encoding.Fusion.unstream lq_anf__dhhN)
       eta_B1,
 Data.Text.Encoding.decodeUtf16BEWith [InlPrag=INLINE (sat-args=2)]
   :: Data.Text.Encoding.Error.OnDecodeError
      -> Data.ByteString.Internal.ByteString -> Data.Text.Internal.Text
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=2, Value=True,
          ConLike=True, WorkFree=True, Expandable=True,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= \ (onErr [Occ=OnceL]
                     :: Data.Text.Encoding.Error.OnDecodeError)
                  (bs [Occ=OnceL] :: Data.ByteString.Internal.ByteString) ->
                  scc<CAF>
                  (scc<CAF> Data.Text.Fusion.unstream)
                    (scc<CAF>
                     scc<CAF>
                     (scc<CAF>
                      (scc<CAF> Data.Text.Encoding.Fusion.streamUtf16BE)
                        (scc<CAF> onErr))
                       (scc<CAF> bs))}]
 Data.Text.Encoding.decodeUtf16BEWith =
   \ (eta_B2 :: Data.Text.Encoding.Error.OnDecodeError)
     (eta_B1 :: Data.ByteString.Internal.ByteString) ->
     (\ (onErr :: Data.Text.Encoding.Error.OnDecodeError)
        (bs :: Data.ByteString.Internal.ByteString) ->
        let {
          lq_anf__dhhO :: Data.Text.Fusion.Internal.Stream GHC.Types.Char
          [LclId]
          lq_anf__dhhO =
            Data.Text.Encoding.Fusion.streamUtf16BE onErr bs } in
        Data.Text.Fusion.unstream lq_anf__dhhO)
       eta_B2 eta_B1,
 Data.Text.Encoding.decodeUtf16BE [InlPrag=INLINE (sat-args=0)]
   :: Data.ByteString.Internal.ByteString -> Data.Text.Internal.Text
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=0, Value=False,
          ConLike=False, WorkFree=False, Expandable=False,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= scc<CAF>
                (scc<CAF> Data.Text.Encoding.decodeUtf16BEWith)
                  (scc<CAF> Data.Text.Encoding.Error.strictDecode)}]
 Data.Text.Encoding.decodeUtf16BE =
   Data.Text.Encoding.decodeUtf16BEWith
     Data.Text.Encoding.Error.strictDecode,
 Data.Text.Encoding.decodeUtf16LEWith [InlPrag=INLINE (sat-args=2)]
   :: Data.Text.Encoding.Error.OnDecodeError
      -> Data.ByteString.Internal.ByteString -> Data.Text.Internal.Text
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=2, Value=True,
          ConLike=True, WorkFree=True, Expandable=True,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= \ (onErr [Occ=OnceL]
                     :: Data.Text.Encoding.Error.OnDecodeError)
                  (bs [Occ=OnceL] :: Data.ByteString.Internal.ByteString) ->
                  scc<CAF>
                  (scc<CAF> Data.Text.Fusion.unstream)
                    (scc<CAF>
                     scc<CAF>
                     (scc<CAF>
                      (scc<CAF> Data.Text.Encoding.Fusion.streamUtf16LE)
                        (scc<CAF> onErr))
                       (scc<CAF> bs))}]
 Data.Text.Encoding.decodeUtf16LEWith =
   \ (eta_B2 :: Data.Text.Encoding.Error.OnDecodeError)
     (eta_B1 :: Data.ByteString.Internal.ByteString) ->
     (\ (onErr :: Data.Text.Encoding.Error.OnDecodeError)
        (bs :: Data.ByteString.Internal.ByteString) ->
        let {
          lq_anf__dhhP :: Data.Text.Fusion.Internal.Stream GHC.Types.Char
          [LclId]
          lq_anf__dhhP =
            Data.Text.Encoding.Fusion.streamUtf16LE onErr bs } in
        Data.Text.Fusion.unstream lq_anf__dhhP)
       eta_B2 eta_B1,
 Data.Text.Encoding.decodeUtf16LE [InlPrag=INLINE (sat-args=0)]
   :: Data.ByteString.Internal.ByteString -> Data.Text.Internal.Text
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=0, Value=False,
          ConLike=False, WorkFree=False, Expandable=False,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= scc<CAF>
                (scc<CAF> Data.Text.Encoding.decodeUtf16LEWith)
                  (scc<CAF> Data.Text.Encoding.Error.strictDecode)}]
 Data.Text.Encoding.decodeUtf16LE =
   Data.Text.Encoding.decodeUtf16LEWith
     Data.Text.Encoding.Error.strictDecode,
 Data.Text.Encoding.plen :: forall a. GHC.Ptr.Ptr a -> GHC.Types.Int
 [LclIdX]
 Data.Text.Encoding.plen =
   \ (@ a) -> GHC.Err.undefined @ (GHC.Ptr.Ptr a -> GHC.Types.Int),
 Data.Text.Encoding.withLIQUID
   :: forall s b.
      Foreign.C.Types.CSize
      -> Data.Text.Array.MArray s
      -> (GHC.Ptr.Ptr Foreign.C.Types.CSize -> GHC.Types.IO b)
      -> GHC.Types.IO b
 [LclIdX]
 Data.Text.Encoding.withLIQUID =
   \ (@ s) (@ b) ->
     GHC.Err.undefined
       @ (Foreign.C.Types.CSize
          -> Data.Text.Array.MArray s
          -> (GHC.Ptr.Ptr Foreign.C.Types.CSize -> GHC.Types.IO b)
          -> GHC.Types.IO b),
 Data.Text.Encoding.decodeUtf8With
   :: Data.Text.Encoding.OnDecodeError
      -> Data.ByteString.Internal.ByteString -> Data.Text.Internal.Text
 [LclIdX]
 Data.Text.Encoding.decodeUtf8With =
   \ (onErr :: Data.Text.Encoding.OnDecodeError)
     (ds_dhhi :: Data.ByteString.Internal.ByteString) ->
     case ds_dhhi
     of lq_anf__dhhQ { Data.ByteString.Internal.PS fp off len ->
     let {
       desc :: [GHC.Types.Char]
       [LclId]
       desc =
         GHC.CString.unpackCString#
           "Data.Text.Encoding.decodeUtf8: Invalid UTF-8 stream" } in
     let {
       lq_anf__dhiJ
         :: forall s.
            (Data.Text.Array.MArray s
             -> GHC.Types.Int -> GHC.ST.ST s Data.Text.Internal.Text)
            -> GHC.ST.ST s Data.Text.Internal.Text
       [LclId]
       lq_anf__dhiJ =
         \ (@ s)
           (done
              :: Data.Text.Array.MArray s
                 -> GHC.Types.Int -> GHC.ST.ST s Data.Text.Internal.Text) ->
           let {
             go
               :: Data.Text.Array.MArray s -> GHC.Types.IO Data.Text.Internal.Text
             [LclId]
             go =
               \ (dest :: Data.Text.Array.MArray s) ->
                 let {
                   lq_anf__dhhR
                     :: (GHC.Ptr.Ptr GHC.Word.Word8
                         -> GHC.Types.IO Data.Text.Internal.Text)
                        -> GHC.Types.IO Data.Text.Internal.Text
                   [LclId]
                   lq_anf__dhhR =
                     Foreign.ForeignPtr.Imp.withForeignPtr
                       @ GHC.Word.Word8 @ Data.Text.Internal.Text fp } in
                 let {
                   lq_anf__dhiE
                     :: GHC.Ptr.Ptr GHC.Word.Word8
                        -> GHC.Types.IO Data.Text.Internal.Text
                   [LclId]
                   lq_anf__dhiE =
                     \ (ptr :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                       let {
                         lq_anf__dhhS :: GHC.Integer.Type.Integer
                         [LclId]
                         lq_anf__dhhS = __integer 0 } in
                       let {
                         lq_anf__dhhT :: Foreign.C.Types.CSize
                         [LclId]
                         lq_anf__dhhT =
                           GHC.Num.fromInteger
                             @ Foreign.C.Types.CSize
                             Foreign.C.Types.$fNumCSize
                             lq_anf__dhhS } in
                       let {
                         lq_anf__dhhU
                           :: (GHC.Ptr.Ptr Foreign.C.Types.CSize
                               -> GHC.Types.IO Data.Text.Internal.Text)
                              -> GHC.Types.IO Data.Text.Internal.Text
                         [LclId]
                         lq_anf__dhhU =
                           Data.Text.Encoding.withLIQUID
                             @ s @ Data.Text.Internal.Text lq_anf__dhhT dest } in
                       let {
                         lq_anf__dhiD
                           :: GHC.Ptr.Ptr Foreign.C.Types.CSize
                              -> GHC.Types.IO Data.Text.Internal.Text
                         [LclId]
                         lq_anf__dhiD =
                           \ (destOffPtr :: GHC.Ptr.Ptr Foreign.C.Types.CSize) ->
                             let {
                               lq_anf__dhhV :: GHC.Types.Int
                               [LclId]
                               lq_anf__dhhV =
                                 GHC.Num.+ @ GHC.Types.Int GHC.Num.$fNumInt off len } in
                             let {
                               end :: GHC.Ptr.Ptr GHC.Word.Word8
                               [LclId]
                               end =
                                 GHC.Ptr.plusPtr
                                   @ GHC.Word.Word8 @ GHC.Word.Word8 ptr lq_anf__dhhV } in
                             letrec {
                               loop [Occ=LoopBreaker]
                                 :: GHC.Types.Int
                                    -> GHC.Ptr.Ptr GHC.Word.Word8
                                    -> GHC.Types.IO Data.Text.Internal.Text
                               [LclId]
                               loop =
                                 \ _ (curPtr :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                                   let {
                                     lq_anf__dhhW :: GHC.Types.IO (GHC.Ptr.Ptr GHC.Word.Word8)
                                     [LclId]
                                     lq_anf__dhhW =
                                       Data.Text.Encoding.c_decode_utf8
                                         @ s dest destOffPtr curPtr end } in
                                   let {
                                     lq_anf__dhiy
                                       :: GHC.Ptr.Ptr GHC.Word.Word8
                                          -> GHC.Types.IO Data.Text.Internal.Text
                                     [LclId]
                                     lq_anf__dhiy =
                                       \ (curPtr' :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                                         let {
                                           lq_anf__dhhX :: GHC.Types.Bool
                                           [LclId]
                                           lq_anf__dhhX =
                                             Language.Haskell.Liquid.Foreign.eqPtr
                                               @ GHC.Word.Word8 curPtr' end } in
                                         case lq_anf__dhhX of lq_anf__dhhY {
                                           GHC.Types.False ->
                                             let {
                                               lq_anf__dhhZ :: GHC.Types.IO GHC.Word.Word8
                                               [LclId]
                                               lq_anf__dhhZ =
                                                 Foreign.Storable.peek
                                                   @ GHC.Word.Word8
                                                   Foreign.Storable.$fStorableWord8
                                                   curPtr' } in
                                             let {
                                               lq_anf__dhit
                                                 :: GHC.Word.Word8
                                                    -> GHC.Types.IO Data.Text.Internal.Text
                                               [LclId]
                                               lq_anf__dhit =
                                                 \ (x :: GHC.Word.Word8) ->
                                                   let {
                                                     lq_anf__dhi0
                                                       :: GHC.Types.IO Foreign.C.Types.CSize
                                                     [LclId]
                                                     lq_anf__dhi0 =
                                                       Foreign.Storable.peek
                                                         @ Foreign.C.Types.CSize
                                                         Foreign.C.Types.$fStorableCSize
                                                         destOffPtr } in
                                                   let {
                                                     lq_anf__dhis
                                                       :: Foreign.C.Types.CSize
                                                          -> GHC.Types.IO Data.Text.Internal.Text
                                                     [LclId]
                                                     lq_anf__dhis =
                                                       \ (destOff :: Foreign.C.Types.CSize) ->
                                                         let {
                                                           lq_anf__dhi1
                                                             :: Data.Maybe.Maybe GHC.Word.Word8
                                                           [LclId]
                                                           lq_anf__dhi1 =
                                                             Data.Maybe.Just @ GHC.Word.Word8 x } in
                                                         let {
                                                           lq_anf__dhi2 :: GHC.Types.Int
                                                           [LclId]
                                                           lq_anf__dhi2 =
                                                             GHC.Real.fromIntegral
                                                               @ Foreign.C.Types.CSize
                                                               @ GHC.Types.Int
                                                               Foreign.C.Types.$fIntegralCSize
                                                               GHC.Num.$fNumInt
                                                               destOff } in
                                                         let {
                                                           lq_anf__dhi3
                                                             :: Data.Maybe.Maybe GHC.Types.Char
                                                           [LclId]
                                                           lq_anf__dhi3 =
                                                             onErr
                                                               @ s
                                                               desc
                                                               lq_anf__dhi1
                                                               dest
                                                               lq_anf__dhi2 } in
                                                         case lq_anf__dhi3 of lq_anf__dhi4 {
                                                           Data.Maybe.Nothing ->
                                                             let {
                                                               lq_anf__dhi5
                                                                 :: GHC.Ptr.Ptr (GHC.Prim.Any *)
                                                                    -> GHC.Types.Int
                                                               [LclId]
                                                               lq_anf__dhi5 =
                                                                 Data.Text.Encoding.plen
                                                                   @ (GHC.Prim.Any *) } in
                                                             let {
                                                               lq_anf__dhi6 :: GHC.Types.Int
                                                               [LclId]
                                                               lq_anf__dhi6 = GHC.Types.I# 1 } in
                                                             let {
                                                               lq_anf__dhi7
                                                                 :: GHC.Ptr.Ptr (GHC.Prim.Any *)
                                                               [LclId]
                                                               lq_anf__dhi7 =
                                                                 GHC.Ptr.plusPtr
                                                                   @ GHC.Word.Word8
                                                                   @ (GHC.Prim.Any *)
                                                                   curPtr'
                                                                   lq_anf__dhi6 } in
                                                             let {
                                                               lq_anf__dhi8 :: GHC.Types.Int
                                                               [LclId]
                                                               lq_anf__dhi8 =
                                                                 GHC.Base.$
                                                                   @ (GHC.Ptr.Ptr (GHC.Prim.Any *))
                                                                   @ GHC.Types.Int
                                                                   lq_anf__dhi5
                                                                   lq_anf__dhi7 } in
                                                             let {
                                                               lq_anf__dhi9
                                                                 :: GHC.Ptr.Ptr GHC.Word.Word8
                                                                    -> GHC.Types.IO
                                                                         Data.Text.Internal.Text
                                                               [LclId]
                                                               lq_anf__dhi9 = loop lq_anf__dhi8 } in
                                                             let {
                                                               lq_anf__dhia :: GHC.Types.Int
                                                               [LclId]
                                                               lq_anf__dhia = GHC.Types.I# 1 } in
                                                             let {
                                                               lq_anf__dhib
                                                                 :: GHC.Ptr.Ptr GHC.Word.Word8
                                                               [LclId]
                                                               lq_anf__dhib =
                                                                 GHC.Ptr.plusPtr
                                                                   @ GHC.Word.Word8
                                                                   @ GHC.Word.Word8
                                                                   curPtr'
                                                                   lq_anf__dhia } in
                                                             GHC.Base.$
                                                               @ (GHC.Ptr.Ptr GHC.Word.Word8)
                                                               @ (GHC.Types.IO
                                                                    Data.Text.Internal.Text)
                                                               lq_anf__dhi9
                                                               lq_anf__dhib;
                                                           Data.Maybe.Just c ->
                                                             let {
                                                               lq_anf__dhic
                                                                 :: GHC.ST.ST s GHC.Types.Int
                                                                    -> GHC.Types.IO GHC.Types.Int
                                                               [LclId]
                                                               lq_anf__dhic =
                                                                 GHC.IO.unsafeSTToIO
                                                                   @ s @ GHC.Types.Int } in
                                                             let {
                                                               lq_anf__dhid :: GHC.Types.Int
                                                               [LclId]
                                                               lq_anf__dhid =
                                                                 GHC.Real.fromIntegral
                                                                   @ Foreign.C.Types.CSize
                                                                   @ GHC.Types.Int
                                                                   Foreign.C.Types.$fIntegralCSize
                                                                   GHC.Num.$fNumInt
                                                                   destOff } in
                                                             let {
                                                               lq_anf__dhie
                                                                 :: GHC.ST.ST s GHC.Types.Int
                                                               [LclId]
                                                               lq_anf__dhie =
                                                                 Data.Text.UnsafeChar.unsafeWrite
                                                                   @ s dest lq_anf__dhid c } in
                                                             let {
                                                               lq_anf__dhif
                                                                 :: GHC.Types.IO GHC.Types.Int
                                                               [LclId]
                                                               lq_anf__dhif =
                                                                 GHC.Base.$
                                                                   @ (GHC.ST.ST s GHC.Types.Int)
                                                                   @ (GHC.Types.IO GHC.Types.Int)
                                                                   lq_anf__dhic
                                                                   lq_anf__dhie } in
                                                             let {
                                                               lq_anf__dhir
                                                                 :: GHC.Types.Int
                                                                    -> GHC.Types.IO
                                                                         Data.Text.Internal.Text
                                                               [LclId]
                                                               lq_anf__dhir =
                                                                 \ (w :: GHC.Types.Int) ->
                                                                   let {
                                                                     lq_anf__dhig
                                                                       :: Foreign.C.Types.CSize
                                                                     [LclId]
                                                                     lq_anf__dhig =
                                                                       GHC.Real.fromIntegral
                                                                         @ GHC.Types.Int
                                                                         @ Foreign.C.Types.CSize
                                                                         GHC.Real.$fIntegralInt
                                                                         Foreign.C.Types.$fNumCSize
                                                                         w } in
                                                                   let {
                                                                     lq_anf__dhih
                                                                       :: Foreign.C.Types.CSize
                                                                     [LclId]
                                                                     lq_anf__dhih =
                                                                       GHC.Num.+
                                                                         @ Foreign.C.Types.CSize
                                                                         Foreign.C.Types.$fNumCSize
                                                                         destOff
                                                                         lq_anf__dhig } in
                                                                   let {
                                                                     lq_anf__dhii :: GHC.Types.IO ()
                                                                     [LclId]
                                                                     lq_anf__dhii =
                                                                       Foreign.Storable.poke
                                                                         @ Foreign.C.Types.CSize
                                                                         Foreign.C.Types.$fStorableCSize
                                                                         destOffPtr
                                                                         lq_anf__dhih } in
                                                                   let {
                                                                     lq_anf__dhij
                                                                       :: GHC.Ptr.Ptr
                                                                            (GHC.Prim.Any *)
                                                                          -> GHC.Types.Int
                                                                     [LclId]
                                                                     lq_anf__dhij =
                                                                       Data.Text.Encoding.plen
                                                                         @ (GHC.Prim.Any *) } in
                                                                   let {
                                                                     lq_anf__dhik :: GHC.Types.Int
                                                                     [LclId]
                                                                     lq_anf__dhik =
                                                                       GHC.Types.I# 1 } in
                                                                   let {
                                                                     lq_anf__dhil
                                                                       :: GHC.Ptr.Ptr
                                                                            (GHC.Prim.Any *)
                                                                     [LclId]
                                                                     lq_anf__dhil =
                                                                       GHC.Ptr.plusPtr
                                                                         @ GHC.Word.Word8
                                                                         @ (GHC.Prim.Any *)
                                                                         curPtr'
                                                                         lq_anf__dhik } in
                                                                   let {
                                                                     lq_anf__dhim :: GHC.Types.Int
                                                                     [LclId]
                                                                     lq_anf__dhim =
                                                                       GHC.Base.$
                                                                         @ (GHC.Ptr.Ptr
                                                                              (GHC.Prim.Any *))
                                                                         @ GHC.Types.Int
                                                                         lq_anf__dhij
                                                                         lq_anf__dhil } in
                                                                   let {
                                                                     lq_anf__dhin
                                                                       :: GHC.Ptr.Ptr GHC.Word.Word8
                                                                          -> GHC.Types.IO
                                                                               Data.Text.Internal.Text
                                                                     [LclId]
                                                                     lq_anf__dhin =
                                                                       loop lq_anf__dhim } in
                                                                   let {
                                                                     lq_anf__dhio :: GHC.Types.Int
                                                                     [LclId]
                                                                     lq_anf__dhio =
                                                                       GHC.Types.I# 1 } in
                                                                   let {
                                                                     lq_anf__dhip
                                                                       :: GHC.Ptr.Ptr GHC.Word.Word8
                                                                     [LclId]
                                                                     lq_anf__dhip =
                                                                       GHC.Ptr.plusPtr
                                                                         @ GHC.Word.Word8
                                                                         @ GHC.Word.Word8
                                                                         curPtr'
                                                                         lq_anf__dhio } in
                                                                   let {
                                                                     lq_anf__dhiq
                                                                       :: GHC.Types.IO
                                                                            Data.Text.Internal.Text
                                                                     [LclId]
                                                                     lq_anf__dhiq =
                                                                       GHC.Base.$
                                                                         @ (GHC.Ptr.Ptr
                                                                              GHC.Word.Word8)
                                                                         @ (GHC.Types.IO
                                                                              Data.Text.Internal.Text)
                                                                         lq_anf__dhin
                                                                         lq_anf__dhip } in
                                                                   GHC.Base.>>
                                                                     @ GHC.Types.IO
                                                                     GHC.Base.$fMonadIO
                                                                     @ ()
                                                                     @ Data.Text.Internal.Text
                                                                     lq_anf__dhii
                                                                     lq_anf__dhiq } in
                                                             GHC.Base.>>=
                                                               @ GHC.Types.IO
                                                               GHC.Base.$fMonadIO
                                                               @ GHC.Types.Int
                                                               @ Data.Text.Internal.Text
                                                               lq_anf__dhif
                                                               lq_anf__dhir
                                                         } } in
                                                   GHC.Base.>>=
                                                     @ GHC.Types.IO
                                                     GHC.Base.$fMonadIO
                                                     @ Foreign.C.Types.CSize
                                                     @ Data.Text.Internal.Text
                                                     lq_anf__dhi0
                                                     lq_anf__dhis } in
                                             GHC.Base.>>=
                                               @ GHC.Types.IO
                                               GHC.Base.$fMonadIO
                                               @ GHC.Word.Word8
                                               @ Data.Text.Internal.Text
                                               lq_anf__dhhZ
                                               lq_anf__dhit;
                                           GHC.Types.True ->
                                             let {
                                               lq_anf__dhiu :: GHC.Types.IO Foreign.C.Types.CSize
                                               [LclId]
                                               lq_anf__dhiu =
                                                 Foreign.Storable.peek
                                                   @ Foreign.C.Types.CSize
                                                   Foreign.C.Types.$fStorableCSize
                                                   destOffPtr } in
                                             let {
                                               lq_anf__dhix
                                                 :: Foreign.C.Types.CSize
                                                    -> GHC.Types.IO Data.Text.Internal.Text
                                               [LclId]
                                               lq_anf__dhix =
                                                 \ (n :: Foreign.C.Types.CSize) ->
                                                   let {
                                                     lq_anf__dhiv :: GHC.Types.Int
                                                     [LclId]
                                                     lq_anf__dhiv =
                                                       GHC.Real.fromIntegral
                                                         @ Foreign.C.Types.CSize
                                                         @ GHC.Types.Int
                                                         Foreign.C.Types.$fIntegralCSize
                                                         GHC.Num.$fNumInt
                                                         n } in
                                                   let {
                                                     lq_anf__dhiw
                                                       :: GHC.ST.ST s Data.Text.Internal.Text
                                                     [LclId]
                                                     lq_anf__dhiw = done dest lq_anf__dhiv } in
                                                   GHC.IO.unsafeSTToIO
                                                     @ s @ Data.Text.Internal.Text lq_anf__dhiw } in
                                             GHC.Base.>>=
                                               @ GHC.Types.IO
                                               GHC.Base.$fMonadIO
                                               @ Foreign.C.Types.CSize
                                               @ Data.Text.Internal.Text
                                               lq_anf__dhiu
                                               lq_anf__dhix
                                         } } in
                                   GHC.Base.>>=
                                     @ GHC.Types.IO
                                     GHC.Base.$fMonadIO
                                     @ (GHC.Ptr.Ptr GHC.Word.Word8)
                                     @ Data.Text.Internal.Text
                                     lq_anf__dhhW
                                     lq_anf__dhiy; } in
                             let {
                               loop
                                 :: GHC.Types.Int
                                    -> GHC.Ptr.Ptr GHC.Word.Word8
                                    -> GHC.Types.IO Data.Text.Internal.Text
                               [LclId]
                               loop = loop } in
                             let {
                               lq_anf__dhiz :: GHC.Ptr.Ptr (GHC.Prim.Any *) -> GHC.Types.Int
                               [LclId]
                               lq_anf__dhiz = Data.Text.Encoding.plen @ (GHC.Prim.Any *) } in
                             let {
                               lq_anf__dhiA :: GHC.Ptr.Ptr (GHC.Prim.Any *)
                               [LclId]
                               lq_anf__dhiA =
                                 GHC.Ptr.plusPtr @ GHC.Word.Word8 @ (GHC.Prim.Any *) ptr off } in
                             let {
                               lq_anf__dhiB :: GHC.Types.Int
                               [LclId]
                               lq_anf__dhiB =
                                 GHC.Base.$
                                   @ (GHC.Ptr.Ptr (GHC.Prim.Any *))
                                   @ GHC.Types.Int
                                   lq_anf__dhiz
                                   lq_anf__dhiA } in
                             let {
                               lq_anf__dhiC :: GHC.Ptr.Ptr GHC.Word.Word8
                               [LclId]
                               lq_anf__dhiC =
                                 GHC.Ptr.plusPtr @ GHC.Word.Word8 @ GHC.Word.Word8 ptr off } in
                             loop lq_anf__dhiB lq_anf__dhiC } in
                       GHC.Base.$
                         @ (GHC.Ptr.Ptr Foreign.C.Types.CSize
                            -> GHC.Types.IO Data.Text.Internal.Text)
                         @ (GHC.Types.IO Data.Text.Internal.Text)
                         lq_anf__dhhU
                         lq_anf__dhiD } in
                 GHC.Base.$
                   @ (GHC.Ptr.Ptr GHC.Word.Word8
                      -> GHC.Types.IO Data.Text.Internal.Text)
                   @ (GHC.Types.IO Data.Text.Internal.Text)
                   lq_anf__dhhR
                   lq_anf__dhiE } in
           let {
             lq_anf__dhiF :: GHC.Base.Monad (GHC.ST.ST s)
             [LclId]
             lq_anf__dhiF = GHC.ST.$fMonadST @ s } in
           let {
             lq_anf__dhiG
               :: GHC.Types.IO Data.Text.Internal.Text
                  -> GHC.ST.ST s Data.Text.Internal.Text
             [LclId]
             lq_anf__dhiG =
               GHC.IO.unsafeIOToST @ Data.Text.Internal.Text @ s } in
           let {
             lq_anf__dhiH
               :: Data.Text.Array.MArray s -> GHC.ST.ST s Data.Text.Internal.Text
             [LclId]
             lq_anf__dhiH =
               GHC.Base..
                 @ (GHC.Types.IO Data.Text.Internal.Text)
                 @ (GHC.ST.ST s Data.Text.Internal.Text)
                 @ (Data.Text.Array.MArray s)
                 lq_anf__dhiG
                 go } in
           let {
             lq_anf__dhiI :: GHC.ST.ST s (Data.Text.Array.MArray s)
             [LclId]
             lq_anf__dhiI = Data.Text.Array.new @ s len } in
           Control.Monad.=<<
             @ (Data.Text.Array.MArray s)
             @ (GHC.ST.ST s)
             @ Data.Text.Internal.Text
             lq_anf__dhiF
             lq_anf__dhiH
             lq_anf__dhiI } in
     GHC.Base.$
       @ (forall s.
          (Data.Text.Array.MArray s
           -> GHC.Types.Int -> GHC.ST.ST s Data.Text.Internal.Text)
          -> GHC.ST.ST s Data.Text.Internal.Text)
       @ Data.Text.Internal.Text
       Data.Text.Private.runText
       lq_anf__dhiJ
     },
 Data.Text.Encoding.strictDecode
   :: forall s.
      GHC.Base.String
      -> Data.Maybe.Maybe GHC.Word.Word8
      -> Data.Text.Array.MArray s
      -> GHC.Types.Int
      -> Data.Maybe.Maybe GHC.Types.Char
 [LclIdX]
 Data.Text.Encoding.strictDecode =
   \ (@ s)
     (desc :: GHC.Base.String)
     (c :: Data.Maybe.Maybe GHC.Word.Word8)
     _
     _ ->
     let {
       lq_anf__dhiK :: Data.Text.Encoding.Error.UnicodeException
       [LclId]
       lq_anf__dhiK = Data.Text.Encoding.Error.DecodeError desc c } in
     GHC.Exception.throw
       @ Data.Text.Encoding.Error.UnicodeException
       @ (Data.Maybe.Maybe GHC.Types.Char)
       Data.Text.Encoding.Error.$fExceptionUnicodeException
       lq_anf__dhiK,
 Data.Text.Encoding.decodeUtf8 [InlPrag=INLINE[0] (sat-args=0)]
   :: Data.ByteString.Internal.ByteString -> Data.Text.Internal.Text
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=0, Value=False,
          ConLike=False, WorkFree=False, Expandable=False,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= scc<CAF>
                (scc<CAF> Data.Text.Encoding.decodeUtf8With)
                  (scc<CAF> Data.Text.Encoding.strictDecode)}]
 Data.Text.Encoding.decodeUtf8 =
   Data.Text.Encoding.decodeUtf8With Data.Text.Encoding.strictDecode,
 Data.Text.Encoding.decodeASCII
   :: Data.ByteString.Internal.ByteString -> Data.Text.Internal.Text
 [LclIdX]
 Data.Text.Encoding.decodeASCII = Data.Text.Encoding.decodeUtf8,
 Data.Text.Encoding.decodeUtf8' [InlPrag=INLINE (sat-args=0)]
   :: Data.ByteString.Internal.ByteString
      -> Data.Either.Either
           Data.Text.Encoding.Error.UnicodeException Data.Text.Internal.Text
 [LclIdX,
  Unf=Unf{Src=InlineStable, TopLvl=True, Arity=0, Value=False,
          ConLike=False, WorkFree=False, Expandable=False,
          Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
          Tmpl= scc<CAF>
                (scc<CAF>
                 GHC.Base..
                   @ (GHC.Types.IO
                        (Data.Either.Either
                           Data.Text.Encoding.Error.UnicodeException Data.Text.Internal.Text))
                   @ (Data.Either.Either
                        Data.Text.Encoding.Error.UnicodeException Data.Text.Internal.Text)
                   @ Data.ByteString.Internal.ByteString)
                  (scc<CAF>
                   GHC.IO.unsafePerformIO
                     @ (Data.Either.Either
                          Data.Text.Encoding.Error.UnicodeException Data.Text.Internal.Text))
                  (scc<CAF>
                   (scc<CAF>
                    GHC.Base..
                      @ (GHC.Types.IO Data.Text.Internal.Text)
                      @ (GHC.Types.IO
                           (Data.Either.Either
                              Data.Text.Encoding.Error.UnicodeException Data.Text.Internal.Text))
                      @ Data.ByteString.Internal.ByteString)
                     (scc<CAF>
                      Control.Exception.Base.try
                        @ Data.Text.Internal.Text
                        @ Data.Text.Encoding.Error.UnicodeException
                        Data.Text.Encoding.Error.$fExceptionUnicodeException)
                     (scc<CAF>
                      (scc<CAF>
                       GHC.Base..
                         @ Data.Text.Internal.Text
                         @ (GHC.Types.IO Data.Text.Internal.Text)
                         @ Data.ByteString.Internal.ByteString)
                        (scc<CAF> GHC.IO.evaluate @ Data.Text.Internal.Text)
                        (scc<CAF>
                         (scc<CAF> Data.Text.Encoding.decodeUtf8With)
                           (scc<CAF> Data.Text.Encoding.strictDecode))))}]
 Data.Text.Encoding.decodeUtf8' =
   let {
     lq_anf__dhiL
       :: GHC.Types.IO
            (Data.Either.Either
               Data.Text.Encoding.Error.UnicodeException Data.Text.Internal.Text)
          -> Data.Either.Either
               Data.Text.Encoding.Error.UnicodeException Data.Text.Internal.Text
     [LclId]
     lq_anf__dhiL =
       GHC.IO.unsafePerformIO
         @ (Data.Either.Either
              Data.Text.Encoding.Error.UnicodeException
              Data.Text.Internal.Text) } in
   let {
     lq_anf__dhiM
       :: GHC.Types.IO Data.Text.Internal.Text
          -> GHC.Types.IO
               (Data.Either.Either
                  Data.Text.Encoding.Error.UnicodeException Data.Text.Internal.Text)
     [LclId]
     lq_anf__dhiM =
       Control.Exception.Base.try
         @ Data.Text.Internal.Text
         @ Data.Text.Encoding.Error.UnicodeException
         Data.Text.Encoding.Error.$fExceptionUnicodeException } in
   let {
     lq_anf__dhiN
       :: Data.Text.Internal.Text -> GHC.Types.IO Data.Text.Internal.Text
     [LclId]
     lq_anf__dhiN = GHC.IO.evaluate @ Data.Text.Internal.Text } in
   let {
     lq_anf__dhiO
       :: Data.ByteString.Internal.ByteString -> Data.Text.Internal.Text
     [LclId]
     lq_anf__dhiO =
       Data.Text.Encoding.decodeUtf8With
         Data.Text.Encoding.strictDecode } in
   let {
     lq_anf__dhiP
       :: Data.ByteString.Internal.ByteString
          -> GHC.Types.IO Data.Text.Internal.Text
     [LclId]
     lq_anf__dhiP =
       GHC.Base..
         @ Data.Text.Internal.Text
         @ (GHC.Types.IO Data.Text.Internal.Text)
         @ Data.ByteString.Internal.ByteString
         lq_anf__dhiN
         lq_anf__dhiO } in
   let {
     lq_anf__dhiQ
       :: Data.ByteString.Internal.ByteString
          -> GHC.Types.IO
               (Data.Either.Either
                  Data.Text.Encoding.Error.UnicodeException Data.Text.Internal.Text)
     [LclId]
     lq_anf__dhiQ =
       GHC.Base..
         @ (GHC.Types.IO Data.Text.Internal.Text)
         @ (GHC.Types.IO
              (Data.Either.Either
                 Data.Text.Encoding.Error.UnicodeException Data.Text.Internal.Text))
         @ Data.ByteString.Internal.ByteString
         lq_anf__dhiM
         lq_anf__dhiP } in
   GHC.Base..
     @ (GHC.Types.IO
          (Data.Either.Either
             Data.Text.Encoding.Error.UnicodeException Data.Text.Internal.Text))
     @ (Data.Either.Either
          Data.Text.Encoding.Error.UnicodeException Data.Text.Internal.Text)
     @ Data.ByteString.Internal.ByteString
     lq_anf__dhiL
     lq_anf__dhiQ,
 Data.Text.Encoding.encodeUtf8
   :: Data.Text.Internal.Text -> Data.ByteString.Internal.ByteString
 [LclIdX]
 Data.Text.Encoding.encodeUtf8 =
   \ (ds_dhgB :: Data.Text.Internal.Text) ->
     case ds_dhgB
     of lq_anf__dhiR { Data.Text.Internal.Text arr off len ->
     let {
       offLen :: GHC.Types.Int
       [LclId]
       offLen = GHC.Num.+ @ GHC.Types.Int GHC.Num.$fNumInt off len } in
     letrec {
       start [Occ=LoopBreaker]
         :: GHC.Types.Int
            -> GHC.Types.Int
            -> GHC.Types.Int
            -> GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
            -> GHC.Types.IO Data.ByteString.Internal.ByteString
       [LclId]
       start =
         \ (size :: GHC.Types.Int)
           (n0 :: GHC.Types.Int)
           (m0 :: GHC.Types.Int)
           (fp :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8) ->
           let {
             loop
               :: GHC.Types.Int
                  -> GHC.Types.Int
                  -> GHC.Ptr.Ptr GHC.Word.Word8
                  -> GHC.Types.IO Data.ByteString.Internal.ByteString
             [LclId]
             loop =
               \ (n1 :: GHC.Types.Int)
                 (m1 :: GHC.Types.Int)
                 (ptr :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                 letrec {
                   go [Occ=LoopBreaker]
                     :: GHC.Types.Int
                        -> GHC.Types.Int
                        -> GHC.Types.Int
                        -> GHC.Types.IO Data.ByteString.Internal.ByteString
                   [LclId]
                   go =
                     \ (ds_dhh2 :: GHC.Types.Int)
                       (n :: GHC.Types.Int)
                       (m :: GHC.Types.Int) ->
                       case n of lq_anf__dhiS { GHC.Types.I# lq_anf__dhm2 ->
                       case m of lq_anf__dhiT { GHC.Types.I# lq_anf__dhm1 ->
                       let {
                         lq_anf__dhiU :: GHC.Types.Bool
                         [LclId]
                         lq_anf__dhiU =
                           GHC.Classes.==
                             @ GHC.Types.Int GHC.Classes.$fEqInt lq_anf__dhiS offLen } in
                       case lq_anf__dhiU of lq_anf__dhiV {
                         GHC.Types.False ->
                           let {
                             ensure
                               :: GHC.Types.Int
                                  -> (GHC.Ptr.Ptr GHC.Word.Word8
                                      -> GHC.Types.IO Data.ByteString.Internal.ByteString)
                                  -> GHC.Types.IO Data.ByteString.Internal.ByteString
                             [LclId]
                             ensure =
                               \ (k :: GHC.Types.Int)
                                 (ds_dhgX
                                    :: GHC.Ptr.Ptr GHC.Word.Word8
                                       -> GHC.Types.IO Data.ByteString.Internal.ByteString) ->
                                 let {
                                   lq_anf__dhiW :: GHC.Types.Int
                                   [LclId]
                                   lq_anf__dhiW =
                                     GHC.Num.-
                                       @ GHC.Types.Int GHC.Num.$fNumInt size lq_anf__dhiT } in
                                 let {
                                   lq_anf__dhiX :: GHC.Types.Bool
                                   [LclId]
                                   lq_anf__dhiX =
                                     GHC.Classes.>=
                                       @ GHC.Types.Int GHC.Classes.$fOrdInt lq_anf__dhiW k } in
                                 case lq_anf__dhiX of lq_anf__dhiY {
                                   GHC.Types.False ->
                                     let {
                                       lq_anf__dhiZ :: GHC.Types.Int
                                       [LclId]
                                       lq_anf__dhiZ = GHC.Types.I# 2 } in
                                     let {
                                       newSize :: GHC.Types.Int
                                       [LclId]
                                       newSize =
                                         GHC.Num.*
                                           @ GHC.Types.Int GHC.Num.$fNumInt size lq_anf__dhiZ } in
                                     let {
                                       lq_anf__dhj0
                                         :: GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                       [LclId]
                                       lq_anf__dhj0 =
                                         Data.ByteString.Internal.mallocByteString
                                           @ GHC.Word.Word8 newSize } in
                                     let {
                                       lq_anf__dhj6
                                         :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
                                            -> GHC.Types.IO Data.ByteString.Internal.ByteString
                                       [LclId]
                                       lq_anf__dhj6 =
                                         \ (fp' :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8) ->
                                           let {
                                             lq_anf__dhj1
                                               :: (GHC.Ptr.Ptr GHC.Word.Word8 -> GHC.Types.IO ())
                                                  -> GHC.Types.IO ()
                                             [LclId]
                                             lq_anf__dhj1 =
                                               Foreign.ForeignPtr.Imp.withForeignPtr
                                                 @ GHC.Word.Word8 @ () fp' } in
                                           let {
                                             lq_anf__dhj3
                                               :: GHC.Ptr.Ptr GHC.Word.Word8 -> GHC.Types.IO ()
                                             [LclId]
                                             lq_anf__dhj3 =
                                               \ (ptr' :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                                                 let {
                                                   lq_anf__dhj2 :: Foreign.C.Types.CSize
                                                   [LclId]
                                                   lq_anf__dhj2 =
                                                     GHC.Real.fromIntegral
                                                       @ GHC.Types.Int
                                                       @ Foreign.C.Types.CSize
                                                       GHC.Real.$fIntegralInt
                                                       Foreign.C.Types.$fNumCSize
                                                       lq_anf__dhiT } in
                                                 Data.ByteString.Internal.memcpy
                                                   ptr' ptr lq_anf__dhj2 } in
                                           let {
                                             lq_anf__dhj4 :: GHC.Types.IO ()
                                             [LclId]
                                             lq_anf__dhj4 =
                                               GHC.Base.$
                                                 @ (GHC.Ptr.Ptr GHC.Word.Word8 -> GHC.Types.IO ())
                                                 @ (GHC.Types.IO ())
                                                 lq_anf__dhj1
                                                 lq_anf__dhj3 } in
                                           let {
                                             lq_anf__dhj5
                                               :: GHC.Types.IO Data.ByteString.Internal.ByteString
                                             [LclId]
                                             lq_anf__dhj5 =
                                               start newSize lq_anf__dhiS lq_anf__dhiT fp' } in
                                           GHC.Base.>>
                                             @ GHC.Types.IO
                                             GHC.Base.$fMonadIO
                                             @ ()
                                             @ Data.ByteString.Internal.ByteString
                                             lq_anf__dhj4
                                             lq_anf__dhj5 } in
                                     GHC.Base.>>=
                                       @ GHC.Types.IO
                                       GHC.Base.$fMonadIO
                                       @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                       @ Data.ByteString.Internal.ByteString
                                       lq_anf__dhj0
                                       lq_anf__dhj6;
                                   GHC.Types.True -> ds_dhgX ptr
                                 } } in
                           let {
                             poke8
                               :: forall a.
                                  GHC.Real.Integral a =>
                                  GHC.Types.Int -> a -> GHC.Types.IO ()
                             [LclId]
                             poke8 =
                               \ (@ a)
                                 ($dIntegral :: GHC.Real.Integral a)
                                 (k :: GHC.Types.Int)
                                 (v :: a) ->
                                 let {
                                   lq_anf__dhj7 :: GHC.Ptr.Ptr GHC.Word.Word8
                                   [LclId]
                                   lq_anf__dhj7 =
                                     GHC.Ptr.plusPtr @ GHC.Word.Word8 @ GHC.Word.Word8 ptr k } in
                                 let {
                                   lq_anf__dhj8 :: GHC.Word.Word8
                                   [LclId]
                                   lq_anf__dhj8 =
                                     GHC.Real.fromIntegral
                                       @ a @ GHC.Word.Word8 $dIntegral GHC.Word.$fNumWord8 v } in
                                 Foreign.Storable.poke
                                   @ GHC.Word.Word8
                                   Foreign.Storable.$fStorableWord8
                                   lq_anf__dhj7
                                   lq_anf__dhj8 } in
                           let {
                             w :: GHC.Word.Word16
                             [LclId]
                             w = Data.Text.Array.unsafeIndexF arr off len lq_anf__dhiS } in
                           let {
                             lq_anf__dhj9 :: GHC.Integer.Type.Integer
                             [LclId]
                             lq_anf__dhj9 = __integer 127 } in
                           let {
                             lq_anf__dhja :: GHC.Word.Word16
                             [LclId]
                             lq_anf__dhja =
                               GHC.Num.fromInteger
                                 @ GHC.Word.Word16 GHC.Word.$fNumWord16 lq_anf__dhj9 } in
                           let {
                             lq_anf__dhjb :: GHC.Types.Bool
                             [LclId]
                             lq_anf__dhjb =
                               GHC.Classes.<=
                                 @ GHC.Word.Word16 GHC.Word.$fOrdWord16 w lq_anf__dhja } in
                           case lq_anf__dhjb of lq_anf__dhjc {
                             GHC.Types.False ->
                               let {
                                 lq_anf__dhjd :: GHC.Integer.Type.Integer
                                 [LclId]
                                 lq_anf__dhjd = __integer 2047 } in
                               let {
                                 lq_anf__dhje :: GHC.Word.Word16
                                 [LclId]
                                 lq_anf__dhje =
                                   GHC.Num.fromInteger
                                     @ GHC.Word.Word16 GHC.Word.$fNumWord16 lq_anf__dhjd } in
                               let {
                                 lq_anf__dhjf :: GHC.Types.Bool
                                 [LclId]
                                 lq_anf__dhjf =
                                   GHC.Classes.<=
                                     @ GHC.Word.Word16 GHC.Word.$fOrdWord16 w lq_anf__dhje } in
                               case lq_anf__dhjf of lq_anf__dhjg {
                                 GHC.Types.False ->
                                   let {
                                     lq_anf__dhjh :: GHC.Integer.Type.Integer
                                     [LclId]
                                     lq_anf__dhjh = __integer 55296 } in
                                   let {
                                     lq_anf__dhji :: GHC.Word.Word16
                                     [LclId]
                                     lq_anf__dhji =
                                       GHC.Num.fromInteger
                                         @ GHC.Word.Word16 GHC.Word.$fNumWord16 lq_anf__dhjh } in
                                   let {
                                     lq_anf__dhjj :: GHC.Types.Bool
                                     [LclId]
                                     lq_anf__dhjj =
                                       GHC.Classes.<=
                                         @ GHC.Word.Word16 GHC.Word.$fOrdWord16 lq_anf__dhji w } in
                                   let {
                                     lq_anf__dhjk :: GHC.Integer.Type.Integer
                                     [LclId]
                                     lq_anf__dhjk = __integer 56319 } in
                                   let {
                                     lq_anf__dhjl :: GHC.Word.Word16
                                     [LclId]
                                     lq_anf__dhjl =
                                       GHC.Num.fromInteger
                                         @ GHC.Word.Word16 GHC.Word.$fNumWord16 lq_anf__dhjk } in
                                   let {
                                     lq_anf__dhjm :: GHC.Types.Bool
                                     [LclId]
                                     lq_anf__dhjm =
                                       GHC.Classes.<=
                                         @ GHC.Word.Word16 GHC.Word.$fOrdWord16 w lq_anf__dhjl } in
                                   let {
                                     lq_anf__dhjn :: GHC.Types.Bool
                                     [LclId]
                                     lq_anf__dhjn = GHC.Classes.&& lq_anf__dhjj lq_anf__dhjm } in
                                   case lq_anf__dhjn of lq_anf__dhjo {
                                     GHC.Types.False ->
                                       let {
                                         lq_anf__dhjp :: GHC.Types.Int
                                         [LclId]
                                         lq_anf__dhjp = GHC.Types.I# 3 } in
                                       let {
                                         lq_anf__dhjq
                                           :: (GHC.Ptr.Ptr GHC.Word.Word8
                                               -> GHC.Types.IO Data.ByteString.Internal.ByteString)
                                              -> GHC.Types.IO Data.ByteString.Internal.ByteString
                                         [LclId]
                                         lq_anf__dhjq = ensure lq_anf__dhjp } in
                                       let {
                                         lq_anf__dhk4
                                           :: GHC.Ptr.Ptr GHC.Word.Word8
                                              -> GHC.Types.IO Data.ByteString.Internal.ByteString
                                         [LclId]
                                         lq_anf__dhk4 =
                                           \ _ ->
                                             let {
                                               lq_anf__dhjr :: GHC.Word.Word16 -> GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhjr =
                                                 poke8
                                                   @ GHC.Word.Word16
                                                   GHC.Word.$fIntegralWord16
                                                   lq_anf__dhiT } in
                                             let {
                                               lq_anf__dhjs :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhjs = GHC.Types.I# 12 } in
                                             let {
                                               lq_anf__dhjt :: GHC.Word.Word16
                                               [LclId]
                                               lq_anf__dhjt =
                                                 Data.Text.UnsafeShift.shiftR
                                                   @ GHC.Word.Word16
                                                   Data.Text.UnsafeShift.$fUnsafeShiftWord16
                                                   w
                                                   lq_anf__dhjs } in
                                             let {
                                               lq_anf__dhju :: GHC.Integer.Type.Integer
                                               [LclId]
                                               lq_anf__dhju = __integer 224 } in
                                             let {
                                               lq_anf__dhjv :: GHC.Word.Word16
                                               [LclId]
                                               lq_anf__dhjv =
                                                 GHC.Num.fromInteger
                                                   @ GHC.Word.Word16
                                                   GHC.Word.$fNumWord16
                                                   lq_anf__dhju } in
                                             let {
                                               lq_anf__dhjw :: GHC.Word.Word16
                                               [LclId]
                                               lq_anf__dhjw =
                                                 GHC.Num.+
                                                   @ GHC.Word.Word16
                                                   GHC.Word.$fNumWord16
                                                   lq_anf__dhjt
                                                   lq_anf__dhjv } in
                                             let {
                                               lq_anf__dhjx :: GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhjx =
                                                 GHC.Base.$
                                                   @ GHC.Word.Word16
                                                   @ (GHC.Types.IO ())
                                                   lq_anf__dhjr
                                                   lq_anf__dhjw } in
                                             let {
                                               lq_anf__dhjy :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhjy = GHC.Types.I# 1 } in
                                             let {
                                               lq_anf__dhjz :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhjz =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhiT
                                                   lq_anf__dhjy } in
                                             let {
                                               lq_anf__dhjA :: GHC.Word.Word16 -> GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhjA =
                                                 poke8
                                                   @ GHC.Word.Word16
                                                   GHC.Word.$fIntegralWord16
                                                   lq_anf__dhjz } in
                                             let {
                                               lq_anf__dhjB :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhjB = GHC.Types.I# 6 } in
                                             let {
                                               lq_anf__dhjC :: GHC.Word.Word16
                                               [LclId]
                                               lq_anf__dhjC =
                                                 Data.Text.UnsafeShift.shiftR
                                                   @ GHC.Word.Word16
                                                   Data.Text.UnsafeShift.$fUnsafeShiftWord16
                                                   w
                                                   lq_anf__dhjB } in
                                             let {
                                               lq_anf__dhjD :: GHC.Integer.Type.Integer
                                               [LclId]
                                               lq_anf__dhjD = __integer 63 } in
                                             let {
                                               lq_anf__dhjE :: GHC.Word.Word16
                                               [LclId]
                                               lq_anf__dhjE =
                                                 GHC.Num.fromInteger
                                                   @ GHC.Word.Word16
                                                   GHC.Word.$fNumWord16
                                                   lq_anf__dhjD } in
                                             let {
                                               lq_anf__dhjF :: GHC.Word.Word16
                                               [LclId]
                                               lq_anf__dhjF =
                                                 Data.Bits..&.
                                                   @ GHC.Word.Word16
                                                   GHC.Word.$fBitsWord16
                                                   lq_anf__dhjC
                                                   lq_anf__dhjE } in
                                             let {
                                               lq_anf__dhjG :: GHC.Integer.Type.Integer
                                               [LclId]
                                               lq_anf__dhjG = __integer 128 } in
                                             let {
                                               lq_anf__dhjH :: GHC.Word.Word16
                                               [LclId]
                                               lq_anf__dhjH =
                                                 GHC.Num.fromInteger
                                                   @ GHC.Word.Word16
                                                   GHC.Word.$fNumWord16
                                                   lq_anf__dhjG } in
                                             let {
                                               lq_anf__dhjI :: GHC.Word.Word16
                                               [LclId]
                                               lq_anf__dhjI =
                                                 GHC.Num.+
                                                   @ GHC.Word.Word16
                                                   GHC.Word.$fNumWord16
                                                   lq_anf__dhjF
                                                   lq_anf__dhjH } in
                                             let {
                                               lq_anf__dhjJ :: GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhjJ =
                                                 GHC.Base.$
                                                   @ GHC.Word.Word16
                                                   @ (GHC.Types.IO ())
                                                   lq_anf__dhjA
                                                   lq_anf__dhjI } in
                                             let {
                                               lq_anf__dhjK :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhjK = GHC.Types.I# 2 } in
                                             let {
                                               lq_anf__dhjL :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhjL =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhiT
                                                   lq_anf__dhjK } in
                                             let {
                                               lq_anf__dhjM :: GHC.Word.Word16 -> GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhjM =
                                                 poke8
                                                   @ GHC.Word.Word16
                                                   GHC.Word.$fIntegralWord16
                                                   lq_anf__dhjL } in
                                             let {
                                               lq_anf__dhjN :: GHC.Integer.Type.Integer
                                               [LclId]
                                               lq_anf__dhjN = __integer 63 } in
                                             let {
                                               lq_anf__dhjO :: GHC.Word.Word16
                                               [LclId]
                                               lq_anf__dhjO =
                                                 GHC.Num.fromInteger
                                                   @ GHC.Word.Word16
                                                   GHC.Word.$fNumWord16
                                                   lq_anf__dhjN } in
                                             let {
                                               lq_anf__dhjP :: GHC.Word.Word16
                                               [LclId]
                                               lq_anf__dhjP =
                                                 Data.Bits..&.
                                                   @ GHC.Word.Word16
                                                   GHC.Word.$fBitsWord16
                                                   w
                                                   lq_anf__dhjO } in
                                             let {
                                               lq_anf__dhjQ :: GHC.Integer.Type.Integer
                                               [LclId]
                                               lq_anf__dhjQ = __integer 128 } in
                                             let {
                                               lq_anf__dhjR :: GHC.Word.Word16
                                               [LclId]
                                               lq_anf__dhjR =
                                                 GHC.Num.fromInteger
                                                   @ GHC.Word.Word16
                                                   GHC.Word.$fNumWord16
                                                   lq_anf__dhjQ } in
                                             let {
                                               lq_anf__dhjS :: GHC.Word.Word16
                                               [LclId]
                                               lq_anf__dhjS =
                                                 GHC.Num.+
                                                   @ GHC.Word.Word16
                                                   GHC.Word.$fNumWord16
                                                   lq_anf__dhjP
                                                   lq_anf__dhjR } in
                                             let {
                                               lq_anf__dhjT :: GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhjT =
                                                 GHC.Base.$
                                                   @ GHC.Word.Word16
                                                   @ (GHC.Types.IO ())
                                                   lq_anf__dhjM
                                                   lq_anf__dhjS } in
                                             let {
                                               lq_anf__dhjU :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhjU = GHC.Types.I# 1 } in
                                             let {
                                               lq_anf__dhjV :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhjV =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhiS
                                                   lq_anf__dhjU } in
                                             let {
                                               lq_anf__dhjW :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhjW =
                                                 GHC.Num.-
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   offLen
                                                   lq_anf__dhjV } in
                                             let {
                                               lq_anf__dhjX :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhjX = GHC.Types.I# 1 } in
                                             let {
                                               lq_anf__dhjY :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhjY =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhiS
                                                   lq_anf__dhjX } in
                                             let {
                                               lq_anf__dhjZ :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhjZ = GHC.Types.I# 3 } in
                                             let {
                                               lq_anf__dhk0 :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhk0 =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhiT
                                                   lq_anf__dhjZ } in
                                             let {
                                               lq_anf__dhk1
                                                 :: GHC.Types.IO Data.ByteString.Internal.ByteString
                                               [LclId]
                                               lq_anf__dhk1 =
                                                 go lq_anf__dhjW lq_anf__dhjY lq_anf__dhk0 } in
                                             let {
                                               lq_anf__dhk2
                                                 :: GHC.Types.IO Data.ByteString.Internal.ByteString
                                               [LclId]
                                               lq_anf__dhk2 =
                                                 GHC.Base.>>
                                                   @ GHC.Types.IO
                                                   GHC.Base.$fMonadIO
                                                   @ ()
                                                   @ Data.ByteString.Internal.ByteString
                                                   lq_anf__dhjT
                                                   lq_anf__dhk1 } in
                                             let {
                                               lq_anf__dhk3
                                                 :: GHC.Types.IO Data.ByteString.Internal.ByteString
                                               [LclId]
                                               lq_anf__dhk3 =
                                                 GHC.Base.>>
                                                   @ GHC.Types.IO
                                                   GHC.Base.$fMonadIO
                                                   @ ()
                                                   @ Data.ByteString.Internal.ByteString
                                                   lq_anf__dhjJ
                                                   lq_anf__dhk2 } in
                                             GHC.Base.>>
                                               @ GHC.Types.IO
                                               GHC.Base.$fMonadIO
                                               @ ()
                                               @ Data.ByteString.Internal.ByteString
                                               lq_anf__dhjx
                                               lq_anf__dhk3 } in
                                       GHC.Base.$
                                         @ (GHC.Ptr.Ptr GHC.Word.Word8
                                            -> GHC.Types.IO Data.ByteString.Internal.ByteString)
                                         @ (GHC.Types.IO Data.ByteString.Internal.ByteString)
                                         lq_anf__dhjq
                                         lq_anf__dhk4;
                                     GHC.Types.True ->
                                       let {
                                         lq_anf__dhk5 :: GHC.Types.Int
                                         [LclId]
                                         lq_anf__dhk5 = GHC.Types.I# 4 } in
                                       let {
                                         lq_anf__dhk6
                                           :: (GHC.Ptr.Ptr GHC.Word.Word8
                                               -> GHC.Types.IO Data.ByteString.Internal.ByteString)
                                              -> GHC.Types.IO Data.ByteString.Internal.ByteString
                                         [LclId]
                                         lq_anf__dhk6 = ensure lq_anf__dhk5 } in
                                       let {
                                         lq_anf__dhkU
                                           :: GHC.Ptr.Ptr GHC.Word.Word8
                                              -> GHC.Types.IO Data.ByteString.Internal.ByteString
                                         [LclId]
                                         lq_anf__dhkU =
                                           \ _ ->
                                             let {
                                               lq_anf__dhk7 :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhk7 = GHC.Types.I# 1 } in
                                             let {
                                               lq_anf__dhk8 :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhk8 =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhiS
                                                   lq_anf__dhk7 } in
                                             let {
                                               lq_anf__dhk9 :: GHC.Word.Word16
                                               [LclId]
                                               lq_anf__dhk9 =
                                                 Data.Text.Array.unsafeIndex arr lq_anf__dhk8 } in
                                             let {
                                               lq_anf__dhka :: GHC.Types.Char
                                               [LclId]
                                               lq_anf__dhka =
                                                 Data.Text.Encoding.Utf16.chr2 w lq_anf__dhk9 } in
                                             let {
                                               c :: GHC.Types.Int
                                               [LclId]
                                               c =
                                                 GHC.Base.$
                                                   @ GHC.Types.Char
                                                   @ GHC.Types.Int
                                                   Data.Text.UnsafeChar.ord
                                                   lq_anf__dhka } in
                                             let {
                                               lq_anf__dhkb :: GHC.Types.Int -> GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhkb =
                                                 poke8
                                                   @ GHC.Types.Int
                                                   GHC.Real.$fIntegralInt
                                                   lq_anf__dhiT } in
                                             let {
                                               lq_anf__dhkc :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkc = GHC.Types.I# 18 } in
                                             let {
                                               lq_anf__dhkd :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkd =
                                                 Data.Text.UnsafeShift.shiftR
                                                   @ GHC.Types.Int
                                                   Data.Text.UnsafeShift.$fUnsafeShiftInt
                                                   c
                                                   lq_anf__dhkc } in
                                             let {
                                               lq_anf__dhke :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhke = GHC.Types.I# 240 } in
                                             let {
                                               lq_anf__dhkf :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkf =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhkd
                                                   lq_anf__dhke } in
                                             let {
                                               lq_anf__dhkg :: GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhkg =
                                                 GHC.Base.$
                                                   @ GHC.Types.Int
                                                   @ (GHC.Types.IO ())
                                                   lq_anf__dhkb
                                                   lq_anf__dhkf } in
                                             let {
                                               lq_anf__dhkh :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkh = GHC.Types.I# 1 } in
                                             let {
                                               lq_anf__dhki :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhki =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhiT
                                                   lq_anf__dhkh } in
                                             let {
                                               lq_anf__dhkj :: GHC.Types.Int -> GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhkj =
                                                 poke8
                                                   @ GHC.Types.Int
                                                   GHC.Real.$fIntegralInt
                                                   lq_anf__dhki } in
                                             let {
                                               lq_anf__dhkk :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkk = GHC.Types.I# 12 } in
                                             let {
                                               lq_anf__dhkl :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkl =
                                                 Data.Text.UnsafeShift.shiftR
                                                   @ GHC.Types.Int
                                                   Data.Text.UnsafeShift.$fUnsafeShiftInt
                                                   c
                                                   lq_anf__dhkk } in
                                             let {
                                               lq_anf__dhkm :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkm = GHC.Types.I# 63 } in
                                             let {
                                               lq_anf__dhkn :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkn =
                                                 Data.Bits..&.
                                                   @ GHC.Types.Int
                                                   Data.Bits.$fBitsInt
                                                   lq_anf__dhkl
                                                   lq_anf__dhkm } in
                                             let {
                                               lq_anf__dhko :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhko = GHC.Types.I# 128 } in
                                             let {
                                               lq_anf__dhkp :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkp =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhkn
                                                   lq_anf__dhko } in
                                             let {
                                               lq_anf__dhkq :: GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhkq =
                                                 GHC.Base.$
                                                   @ GHC.Types.Int
                                                   @ (GHC.Types.IO ())
                                                   lq_anf__dhkj
                                                   lq_anf__dhkp } in
                                             let {
                                               lq_anf__dhkr :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkr = GHC.Types.I# 2 } in
                                             let {
                                               lq_anf__dhks :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhks =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhiT
                                                   lq_anf__dhkr } in
                                             let {
                                               lq_anf__dhkt :: GHC.Types.Int -> GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhkt =
                                                 poke8
                                                   @ GHC.Types.Int
                                                   GHC.Real.$fIntegralInt
                                                   lq_anf__dhks } in
                                             let {
                                               lq_anf__dhku :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhku = GHC.Types.I# 6 } in
                                             let {
                                               lq_anf__dhkv :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkv =
                                                 Data.Text.UnsafeShift.shiftR
                                                   @ GHC.Types.Int
                                                   Data.Text.UnsafeShift.$fUnsafeShiftInt
                                                   c
                                                   lq_anf__dhku } in
                                             let {
                                               lq_anf__dhkw :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkw = GHC.Types.I# 63 } in
                                             let {
                                               lq_anf__dhkx :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkx =
                                                 Data.Bits..&.
                                                   @ GHC.Types.Int
                                                   Data.Bits.$fBitsInt
                                                   lq_anf__dhkv
                                                   lq_anf__dhkw } in
                                             let {
                                               lq_anf__dhky :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhky = GHC.Types.I# 128 } in
                                             let {
                                               lq_anf__dhkz :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkz =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhkx
                                                   lq_anf__dhky } in
                                             let {
                                               lq_anf__dhkA :: GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhkA =
                                                 GHC.Base.$
                                                   @ GHC.Types.Int
                                                   @ (GHC.Types.IO ())
                                                   lq_anf__dhkt
                                                   lq_anf__dhkz } in
                                             let {
                                               lq_anf__dhkB :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkB = GHC.Types.I# 3 } in
                                             let {
                                               lq_anf__dhkC :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkC =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhiT
                                                   lq_anf__dhkB } in
                                             let {
                                               lq_anf__dhkD :: GHC.Types.Int -> GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhkD =
                                                 poke8
                                                   @ GHC.Types.Int
                                                   GHC.Real.$fIntegralInt
                                                   lq_anf__dhkC } in
                                             let {
                                               lq_anf__dhkE :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkE = GHC.Types.I# 63 } in
                                             let {
                                               lq_anf__dhkF :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkF =
                                                 Data.Bits..&.
                                                   @ GHC.Types.Int
                                                   Data.Bits.$fBitsInt
                                                   c
                                                   lq_anf__dhkE } in
                                             let {
                                               lq_anf__dhkG :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkG = GHC.Types.I# 128 } in
                                             let {
                                               lq_anf__dhkH :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkH =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhkF
                                                   lq_anf__dhkG } in
                                             let {
                                               lq_anf__dhkI :: GHC.Types.IO ()
                                               [LclId]
                                               lq_anf__dhkI =
                                                 GHC.Base.$
                                                   @ GHC.Types.Int
                                                   @ (GHC.Types.IO ())
                                                   lq_anf__dhkD
                                                   lq_anf__dhkH } in
                                             let {
                                               lq_anf__dhkJ :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkJ = GHC.Types.I# 2 } in
                                             let {
                                               lq_anf__dhkK :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkK =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhiS
                                                   lq_anf__dhkJ } in
                                             let {
                                               lq_anf__dhkL :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkL =
                                                 GHC.Num.-
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   offLen
                                                   lq_anf__dhkK } in
                                             let {
                                               lq_anf__dhkM :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkM = GHC.Types.I# 2 } in
                                             let {
                                               lq_anf__dhkN :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkN =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhiS
                                                   lq_anf__dhkM } in
                                             let {
                                               lq_anf__dhkO :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkO = GHC.Types.I# 4 } in
                                             let {
                                               lq_anf__dhkP :: GHC.Types.Int
                                               [LclId]
                                               lq_anf__dhkP =
                                                 GHC.Num.+
                                                   @ GHC.Types.Int
                                                   GHC.Num.$fNumInt
                                                   lq_anf__dhiT
                                                   lq_anf__dhkO } in
                                             let {
                                               lq_anf__dhkQ
                                                 :: GHC.Types.IO Data.ByteString.Internal.ByteString
                                               [LclId]
                                               lq_anf__dhkQ =
                                                 go lq_anf__dhkL lq_anf__dhkN lq_anf__dhkP } in
                                             let {
                                               lq_anf__dhkR
                                                 :: GHC.Types.IO Data.ByteString.Internal.ByteString
                                               [LclId]
                                               lq_anf__dhkR =
                                                 GHC.Base.>>
                                                   @ GHC.Types.IO
                                                   GHC.Base.$fMonadIO
                                                   @ ()
                                                   @ Data.ByteString.Internal.ByteString
                                                   lq_anf__dhkI
                                                   lq_anf__dhkQ } in
                                             let {
                                               lq_anf__dhkS
                                                 :: GHC.Types.IO Data.ByteString.Internal.ByteString
                                               [LclId]
                                               lq_anf__dhkS =
                                                 GHC.Base.>>
                                                   @ GHC.Types.IO
                                                   GHC.Base.$fMonadIO
                                                   @ ()
                                                   @ Data.ByteString.Internal.ByteString
                                                   lq_anf__dhkA
                                                   lq_anf__dhkR } in
                                             let {
                                               lq_anf__dhkT
                                                 :: GHC.Types.IO Data.ByteString.Internal.ByteString
                                               [LclId]
                                               lq_anf__dhkT =
                                                 GHC.Base.>>
                                                   @ GHC.Types.IO
                                                   GHC.Base.$fMonadIO
                                                   @ ()
                                                   @ Data.ByteString.Internal.ByteString
                                                   lq_anf__dhkq
                                                   lq_anf__dhkS } in
                                             GHC.Base.>>
                                               @ GHC.Types.IO
                                               GHC.Base.$fMonadIO
                                               @ ()
                                               @ Data.ByteString.Internal.ByteString
                                               lq_anf__dhkg
                                               lq_anf__dhkT } in
                                       GHC.Base.$
                                         @ (GHC.Ptr.Ptr GHC.Word.Word8
                                            -> GHC.Types.IO Data.ByteString.Internal.ByteString)
                                         @ (GHC.Types.IO Data.ByteString.Internal.ByteString)
                                         lq_anf__dhk6
                                         lq_anf__dhkU
                                   };
                                 GHC.Types.True ->
                                   let {
                                     lq_anf__dhkV :: GHC.Types.Int
                                     [LclId]
                                     lq_anf__dhkV = GHC.Types.I# 2 } in
                                   let {
                                     lq_anf__dhkW
                                       :: (GHC.Ptr.Ptr GHC.Word.Word8
                                           -> GHC.Types.IO Data.ByteString.Internal.ByteString)
                                          -> GHC.Types.IO Data.ByteString.Internal.ByteString
                                     [LclId]
                                     lq_anf__dhkW = ensure lq_anf__dhkV } in
                                   let {
                                     lq_anf__dhln
                                       :: GHC.Ptr.Ptr GHC.Word.Word8
                                          -> GHC.Types.IO Data.ByteString.Internal.ByteString
                                     [LclId]
                                     lq_anf__dhln =
                                       \ _ ->
                                         let {
                                           lq_anf__dhkX :: GHC.Word.Word16 -> GHC.Types.IO ()
                                           [LclId]
                                           lq_anf__dhkX =
                                             poke8
                                               @ GHC.Word.Word16
                                               GHC.Word.$fIntegralWord16
                                               lq_anf__dhiT } in
                                         let {
                                           lq_anf__dhkY :: GHC.Types.Int
                                           [LclId]
                                           lq_anf__dhkY = GHC.Types.I# 6 } in
                                         let {
                                           lq_anf__dhkZ :: GHC.Word.Word16
                                           [LclId]
                                           lq_anf__dhkZ =
                                             Data.Text.UnsafeShift.shiftR
                                               @ GHC.Word.Word16
                                               Data.Text.UnsafeShift.$fUnsafeShiftWord16
                                               w
                                               lq_anf__dhkY } in
                                         let {
                                           lq_anf__dhl0 :: GHC.Integer.Type.Integer
                                           [LclId]
                                           lq_anf__dhl0 = __integer 192 } in
                                         let {
                                           lq_anf__dhl1 :: GHC.Word.Word16
                                           [LclId]
                                           lq_anf__dhl1 =
                                             GHC.Num.fromInteger
                                               @ GHC.Word.Word16
                                               GHC.Word.$fNumWord16
                                               lq_anf__dhl0 } in
                                         let {
                                           lq_anf__dhl2 :: GHC.Word.Word16
                                           [LclId]
                                           lq_anf__dhl2 =
                                             GHC.Num.+
                                               @ GHC.Word.Word16
                                               GHC.Word.$fNumWord16
                                               lq_anf__dhkZ
                                               lq_anf__dhl1 } in
                                         let {
                                           lq_anf__dhl3 :: GHC.Types.IO ()
                                           [LclId]
                                           lq_anf__dhl3 =
                                             GHC.Base.$
                                               @ GHC.Word.Word16
                                               @ (GHC.Types.IO ())
                                               lq_anf__dhkX
                                               lq_anf__dhl2 } in
                                         let {
                                           lq_anf__dhl4 :: GHC.Types.Int
                                           [LclId]
                                           lq_anf__dhl4 = GHC.Types.I# 1 } in
                                         let {
                                           lq_anf__dhl5 :: GHC.Types.Int
                                           [LclId]
                                           lq_anf__dhl5 =
                                             GHC.Num.+
                                               @ GHC.Types.Int
                                               GHC.Num.$fNumInt
                                               lq_anf__dhiT
                                               lq_anf__dhl4 } in
                                         let {
                                           lq_anf__dhl6 :: GHC.Word.Word16 -> GHC.Types.IO ()
                                           [LclId]
                                           lq_anf__dhl6 =
                                             poke8
                                               @ GHC.Word.Word16
                                               GHC.Word.$fIntegralWord16
                                               lq_anf__dhl5 } in
                                         let {
                                           lq_anf__dhl7 :: GHC.Integer.Type.Integer
                                           [LclId]
                                           lq_anf__dhl7 = __integer 63 } in
                                         let {
                                           lq_anf__dhl8 :: GHC.Word.Word16
                                           [LclId]
                                           lq_anf__dhl8 =
                                             GHC.Num.fromInteger
                                               @ GHC.Word.Word16
                                               GHC.Word.$fNumWord16
                                               lq_anf__dhl7 } in
                                         let {
                                           lq_anf__dhl9 :: GHC.Word.Word16
                                           [LclId]
                                           lq_anf__dhl9 =
                                             Data.Bits..&.
                                               @ GHC.Word.Word16
                                               GHC.Word.$fBitsWord16
                                               w
                                               lq_anf__dhl8 } in
                                         let {
                                           lq_anf__dhla :: GHC.Integer.Type.Integer
                                           [LclId]
                                           lq_anf__dhla = __integer 128 } in
                                         let {
                                           lq_anf__dhlb :: GHC.Word.Word16
                                           [LclId]
                                           lq_anf__dhlb =
                                             GHC.Num.fromInteger
                                               @ GHC.Word.Word16
                                               GHC.Word.$fNumWord16
                                               lq_anf__dhla } in
                                         let {
                                           lq_anf__dhlc :: GHC.Word.Word16
                                           [LclId]
                                           lq_anf__dhlc =
                                             GHC.Num.+
                                               @ GHC.Word.Word16
                                               GHC.Word.$fNumWord16
                                               lq_anf__dhl9
                                               lq_anf__dhlb } in
                                         let {
                                           lq_anf__dhld :: GHC.Types.IO ()
                                           [LclId]
                                           lq_anf__dhld =
                                             GHC.Base.$
                                               @ GHC.Word.Word16
                                               @ (GHC.Types.IO ())
                                               lq_anf__dhl6
                                               lq_anf__dhlc } in
                                         let {
                                           lq_anf__dhle :: GHC.Types.Int
                                           [LclId]
                                           lq_anf__dhle = GHC.Types.I# 1 } in
                                         let {
                                           lq_anf__dhlf :: GHC.Types.Int
                                           [LclId]
                                           lq_anf__dhlf =
                                             GHC.Num.+
                                               @ GHC.Types.Int
                                               GHC.Num.$fNumInt
                                               lq_anf__dhiS
                                               lq_anf__dhle } in
                                         let {
                                           lq_anf__dhlg :: GHC.Types.Int
                                           [LclId]
                                           lq_anf__dhlg =
                                             GHC.Num.-
                                               @ GHC.Types.Int
                                               GHC.Num.$fNumInt
                                               offLen
                                               lq_anf__dhlf } in
                                         let {
                                           lq_anf__dhlh :: GHC.Types.Int
                                           [LclId]
                                           lq_anf__dhlh = GHC.Types.I# 1 } in
                                         let {
                                           lq_anf__dhli :: GHC.Types.Int
                                           [LclId]
                                           lq_anf__dhli =
                                             GHC.Num.+
                                               @ GHC.Types.Int
                                               GHC.Num.$fNumInt
                                               lq_anf__dhiS
                                               lq_anf__dhlh } in
                                         let {
                                           lq_anf__dhlj :: GHC.Types.Int
                                           [LclId]
                                           lq_anf__dhlj = GHC.Types.I# 2 } in
                                         let {
                                           lq_anf__dhlk :: GHC.Types.Int
                                           [LclId]
                                           lq_anf__dhlk =
                                             GHC.Num.+
                                               @ GHC.Types.Int
                                               GHC.Num.$fNumInt
                                               lq_anf__dhiT
                                               lq_anf__dhlj } in
                                         let {
                                           lq_anf__dhll
                                             :: GHC.Types.IO Data.ByteString.Internal.ByteString
                                           [LclId]
                                           lq_anf__dhll =
                                             go lq_anf__dhlg lq_anf__dhli lq_anf__dhlk } in
                                         let {
                                           lq_anf__dhlm
                                             :: GHC.Types.IO Data.ByteString.Internal.ByteString
                                           [LclId]
                                           lq_anf__dhlm =
                                             GHC.Base.>>
                                               @ GHC.Types.IO
                                               GHC.Base.$fMonadIO
                                               @ ()
                                               @ Data.ByteString.Internal.ByteString
                                               lq_anf__dhld
                                               lq_anf__dhll } in
                                         GHC.Base.>>
                                           @ GHC.Types.IO
                                           GHC.Base.$fMonadIO
                                           @ ()
                                           @ Data.ByteString.Internal.ByteString
                                           lq_anf__dhl3
                                           lq_anf__dhlm } in
                                   GHC.Base.$
                                     @ (GHC.Ptr.Ptr GHC.Word.Word8
                                        -> GHC.Types.IO Data.ByteString.Internal.ByteString)
                                     @ (GHC.Types.IO Data.ByteString.Internal.ByteString)
                                     lq_anf__dhkW
                                     lq_anf__dhln
                               };
                             GHC.Types.True ->
                               let {
                                 lq_anf__dhlo :: GHC.Types.Int
                                 [LclId]
                                 lq_anf__dhlo = GHC.Types.I# 1 } in
                               let {
                                 lq_anf__dhlp
                                   :: (GHC.Ptr.Ptr GHC.Word.Word8
                                       -> GHC.Types.IO Data.ByteString.Internal.ByteString)
                                      -> GHC.Types.IO Data.ByteString.Internal.ByteString
                                 [LclId]
                                 lq_anf__dhlp = ensure lq_anf__dhlo } in
                               let {
                                 lq_anf__dhlY
                                   :: GHC.Ptr.Ptr GHC.Word.Word8
                                      -> GHC.Types.IO Data.ByteString.Internal.ByteString
                                 [LclId]
                                 lq_anf__dhlY =
                                   \ (ptr :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                                     let {
                                       lq_anf__dhlq :: GHC.Ptr.Ptr GHC.Word.Word8
                                       [LclId]
                                       lq_anf__dhlq =
                                         GHC.Ptr.plusPtr
                                           @ GHC.Word.Word8 @ GHC.Word.Word8 ptr lq_anf__dhiT } in
                                     let {
                                       lq_anf__dhlr :: GHC.Word.Word8
                                       [LclId]
                                       lq_anf__dhlr =
                                         GHC.Real.fromIntegral
                                           @ GHC.Word.Word16
                                           @ GHC.Word.Word8
                                           GHC.Word.$fIntegralWord16
                                           GHC.Word.$fNumWord8
                                           w } in
                                     let {
                                       lq_anf__dhls :: GHC.Types.IO ()
                                       [LclId]
                                       lq_anf__dhls =
                                         Foreign.Storable.poke
                                           @ GHC.Word.Word8
                                           Foreign.Storable.$fStorableWord8
                                           lq_anf__dhlq
                                           lq_anf__dhlr } in
                                     let {
                                       end :: GHC.Ptr.Ptr GHC.Word.Word8
                                       [LclId]
                                       end =
                                         GHC.Ptr.plusPtr
                                           @ GHC.Word.Word8 @ GHC.Word.Word8 ptr size } in
                                     letrec {
                                       ascii [Occ=LoopBreaker]
                                         :: GHC.Types.Int
                                            -> GHC.Types.Int
                                            -> GHC.Ptr.Ptr GHC.Word.Word8
                                            -> GHC.Types.IO Data.ByteString.Internal.ByteString
                                       [LclId]
                                       ascii =
                                         \ (ds_dhgF :: GHC.Types.Int)
                                           (t :: GHC.Types.Int)
                                           (u :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                                           case t of lq_anf__dhlt { GHC.Types.I# lq_anf__dhlP ->
                                           case u of lq_anf__dhlu { GHC.Ptr.Ptr lq_anf__dhlO ->
                                           let {
                                             lq_anf__dhlv :: GHC.Types.Bool
                                             [LclId]
                                             lq_anf__dhlv =
                                               GHC.Classes.==
                                                 @ GHC.Types.Int
                                                 GHC.Classes.$fEqInt
                                                 lq_anf__dhlt
                                                 offLen } in
                                           let {
                                             lq_anf__dhlw :: GHC.Types.Bool
                                             [LclId]
                                             lq_anf__dhlw =
                                               Language.Haskell.Liquid.Foreign.eqPtr
                                                 @ GHC.Word.Word8 lq_anf__dhlu end } in
                                           let {
                                             lq_anf__dhlx :: GHC.Types.Bool
                                             [LclId]
                                             lq_anf__dhlx =
                                               GHC.Classes.|| lq_anf__dhlv lq_anf__dhlw } in
                                           case lq_anf__dhlx of lq_anf__dhly {
                                             GHC.Types.False ->
                                               let {
                                                 v :: GHC.Word.Word16
                                                 [LclId]
                                                 v =
                                                   Data.Text.Array.unsafeIndex arr lq_anf__dhlt } in
                                               let {
                                                 lq_anf__dhlz :: GHC.Integer.Type.Integer
                                                 [LclId]
                                                 lq_anf__dhlz = __integer 128 } in
                                               let {
                                                 lq_anf__dhlA :: GHC.Word.Word16
                                                 [LclId]
                                                 lq_anf__dhlA =
                                                   GHC.Num.fromInteger
                                                     @ GHC.Word.Word16
                                                     GHC.Word.$fNumWord16
                                                     lq_anf__dhlz } in
                                               let {
                                                 lq_anf__dhlB :: GHC.Types.Bool
                                                 [LclId]
                                                 lq_anf__dhlB =
                                                   GHC.Classes.>=
                                                     @ GHC.Word.Word16
                                                     GHC.Word.$fOrdWord16
                                                     v
                                                     lq_anf__dhlA } in
                                               case lq_anf__dhlB of lq_anf__dhlC {
                                                 GHC.Types.False ->
                                                   let {
                                                     lq_anf__dhlD :: GHC.Word.Word8
                                                     [LclId]
                                                     lq_anf__dhlD =
                                                       GHC.Real.fromIntegral
                                                         @ GHC.Word.Word16
                                                         @ GHC.Word.Word8
                                                         GHC.Word.$fIntegralWord16
                                                         GHC.Word.$fNumWord8
                                                         v } in
                                                   let {
                                                     lq_anf__dhlE :: GHC.Types.IO ()
                                                     [LclId]
                                                     lq_anf__dhlE =
                                                       Foreign.Storable.poke
                                                         @ GHC.Word.Word8
                                                         Foreign.Storable.$fStorableWord8
                                                         lq_anf__dhlu
                                                         lq_anf__dhlD } in
                                                   let {
                                                     lq_anf__dhlF :: GHC.Types.Int
                                                     [LclId]
                                                     lq_anf__dhlF = GHC.Types.I# 1 } in
                                                   let {
                                                     lq_anf__dhlG :: GHC.Types.Int
                                                     [LclId]
                                                     lq_anf__dhlG =
                                                       GHC.Num.-
                                                         @ GHC.Types.Int
                                                         GHC.Num.$fNumInt
                                                         ds_dhgF
                                                         lq_anf__dhlF } in
                                                   let {
                                                     lq_anf__dhlH :: GHC.Types.Int
                                                     [LclId]
                                                     lq_anf__dhlH = GHC.Types.I# 1 } in
                                                   let {
                                                     lq_anf__dhlI :: GHC.Types.Int
                                                     [LclId]
                                                     lq_anf__dhlI =
                                                       GHC.Num.+
                                                         @ GHC.Types.Int
                                                         GHC.Num.$fNumInt
                                                         lq_anf__dhlt
                                                         lq_anf__dhlH } in
                                                   let {
                                                     lq_anf__dhlJ :: GHC.Types.Int
                                                     [LclId]
                                                     lq_anf__dhlJ = GHC.Types.I# 1 } in
                                                   let {
                                                     lq_anf__dhlK :: GHC.Ptr.Ptr GHC.Word.Word8
                                                     [LclId]
                                                     lq_anf__dhlK =
                                                       GHC.Ptr.plusPtr
                                                         @ GHC.Word.Word8
                                                         @ GHC.Word.Word8
                                                         lq_anf__dhlu
                                                         lq_anf__dhlJ } in
                                                   let {
                                                     lq_anf__dhlL
                                                       :: GHC.Types.IO
                                                            Data.ByteString.Internal.ByteString
                                                     [LclId]
                                                     lq_anf__dhlL =
                                                       ascii
                                                         lq_anf__dhlG lq_anf__dhlI lq_anf__dhlK } in
                                                   GHC.Base.>>
                                                     @ GHC.Types.IO
                                                     GHC.Base.$fMonadIO
                                                     @ ()
                                                     @ Data.ByteString.Internal.ByteString
                                                     lq_anf__dhlE
                                                     lq_anf__dhlL;
                                                 GHC.Types.True ->
                                                   let {
                                                     lq_anf__dhlM :: GHC.Types.Int
                                                     [LclId]
                                                     lq_anf__dhlM =
                                                       GHC.Ptr.minusPtr
                                                         @ GHC.Word.Word8
                                                         @ GHC.Word.Word8
                                                         lq_anf__dhlu
                                                         ptr } in
                                                   go ds_dhgF lq_anf__dhlt lq_anf__dhlM
                                               };
                                             GHC.Types.True ->
                                               let {
                                                 lq_anf__dhlN :: GHC.Types.Int
                                                 [LclId]
                                                 lq_anf__dhlN =
                                                   GHC.Ptr.minusPtr
                                                     @ GHC.Word.Word8
                                                     @ GHC.Word.Word8
                                                     lq_anf__dhlu
                                                     ptr } in
                                               go ds_dhgF lq_anf__dhlt lq_anf__dhlN
                                           }
                                           }
                                           }; } in
                                     let {
                                       ascii
                                         :: GHC.Types.Int
                                            -> GHC.Types.Int
                                            -> GHC.Ptr.Ptr GHC.Word.Word8
                                            -> GHC.Types.IO Data.ByteString.Internal.ByteString
                                       [LclId]
                                       ascii = ascii } in
                                     let {
                                       lq_anf__dhlQ :: GHC.Types.Int
                                       [LclId]
                                       lq_anf__dhlQ = GHC.Types.I# 1 } in
                                     let {
                                       lq_anf__dhlR :: GHC.Types.Int
                                       [LclId]
                                       lq_anf__dhlR =
                                         GHC.Num.-
                                           @ GHC.Types.Int
                                           GHC.Num.$fNumInt
                                           ds_dhh2
                                           lq_anf__dhlQ } in
                                     let {
                                       lq_anf__dhlS :: GHC.Types.Int
                                       [LclId]
                                       lq_anf__dhlS = GHC.Types.I# 1 } in
                                     let {
                                       lq_anf__dhlT :: GHC.Types.Int
                                       [LclId]
                                       lq_anf__dhlT =
                                         GHC.Num.+
                                           @ GHC.Types.Int
                                           GHC.Num.$fNumInt
                                           lq_anf__dhiS
                                           lq_anf__dhlS } in
                                     let {
                                       lq_anf__dhlU :: GHC.Types.Int
                                       [LclId]
                                       lq_anf__dhlU = GHC.Types.I# 1 } in
                                     let {
                                       lq_anf__dhlV :: GHC.Types.Int
                                       [LclId]
                                       lq_anf__dhlV =
                                         GHC.Num.+
                                           @ GHC.Types.Int
                                           GHC.Num.$fNumInt
                                           lq_anf__dhiT
                                           lq_anf__dhlU } in
                                     let {
                                       lq_anf__dhlW :: GHC.Ptr.Ptr GHC.Word.Word8
                                       [LclId]
                                       lq_anf__dhlW =
                                         GHC.Ptr.plusPtr
                                           @ GHC.Word.Word8 @ GHC.Word.Word8 ptr lq_anf__dhlV } in
                                     let {
                                       lq_anf__dhlX
                                         :: GHC.Types.IO Data.ByteString.Internal.ByteString
                                       [LclId]
                                       lq_anf__dhlX =
                                         ascii lq_anf__dhlR lq_anf__dhlT lq_anf__dhlW } in
                                     GHC.Base.>>
                                       @ GHC.Types.IO
                                       GHC.Base.$fMonadIO
                                       @ ()
                                       @ Data.ByteString.Internal.ByteString
                                       lq_anf__dhls
                                       lq_anf__dhlX } in
                               GHC.Base.$
                                 @ (GHC.Ptr.Ptr GHC.Word.Word8
                                    -> GHC.Types.IO Data.ByteString.Internal.ByteString)
                                 @ (GHC.Types.IO Data.ByteString.Internal.ByteString)
                                 lq_anf__dhlp
                                 lq_anf__dhlY
                           };
                         GHC.Types.True ->
                           let {
                             lq_anf__dhlZ :: GHC.Types.Int
                             [LclId]
                             lq_anf__dhlZ = GHC.Types.I# 0 } in
                           let {
                             lq_anf__dhm0 :: Data.ByteString.Internal.ByteString
                             [LclId]
                             lq_anf__dhm0 =
                               Data.ByteString.Internal.$WPS fp lq_anf__dhlZ lq_anf__dhiT } in
                           GHC.Base.return
                             @ GHC.Types.IO
                             GHC.Base.$fMonadIO
                             @ Data.ByteString.Internal.ByteString
                             lq_anf__dhm0
                       }
                       }
                       }; } in
                 let {
                   go
                     :: GHC.Types.Int
                        -> GHC.Types.Int
                        -> GHC.Types.Int
                        -> GHC.Types.IO Data.ByteString.Internal.ByteString
                   [LclId]
                   go = go } in
                 let {
                   lq_anf__dhm3 :: GHC.Types.Int
                   [LclId]
                   lq_anf__dhm3 =
                     GHC.Num.- @ GHC.Types.Int GHC.Num.$fNumInt offLen n1 } in
                 go lq_anf__dhm3 n1 m1 } in
           let {
             lq_anf__dhm4
               :: (GHC.Ptr.Ptr GHC.Word.Word8
                   -> GHC.Types.IO Data.ByteString.Internal.ByteString)
                  -> GHC.Types.IO Data.ByteString.Internal.ByteString
             [LclId]
             lq_anf__dhm4 =
               Foreign.ForeignPtr.Imp.withForeignPtr
                 @ GHC.Word.Word8 @ Data.ByteString.Internal.ByteString fp } in
           let {
             lq_anf__dhm5
               :: GHC.Ptr.Ptr GHC.Word.Word8
                  -> GHC.Types.IO Data.ByteString.Internal.ByteString
             [LclId]
             lq_anf__dhm5 = loop n0 m0 } in
           GHC.Base.$
             @ (GHC.Ptr.Ptr GHC.Word.Word8
                -> GHC.Types.IO Data.ByteString.Internal.ByteString)
             @ (GHC.Types.IO Data.ByteString.Internal.ByteString)
             lq_anf__dhm4
             lq_anf__dhm5; } in
     let {
       start
         :: GHC.Types.Int
            -> GHC.Types.Int
            -> GHC.Types.Int
            -> GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
            -> GHC.Types.IO Data.ByteString.Internal.ByteString
       [LclId]
       start = start } in
     let {
       lq_anf__dhm6
         :: GHC.Types.IO Data.ByteString.Internal.ByteString
            -> Data.ByteString.Internal.ByteString
       [LclId]
       lq_anf__dhm6 =
         GHC.IO.unsafePerformIO @ Data.ByteString.Internal.ByteString } in
     let {
       lq_anf__dhm7 :: GHC.Types.Int
       [LclId]
       lq_anf__dhm7 = GHC.Types.I# 4 } in
     let {
       size0 :: GHC.Types.Int
       [LclId]
       size0 =
         GHC.Classes.max
           @ GHC.Types.Int GHC.Classes.$fOrdInt len lq_anf__dhm7 } in
     let {
       lq_anf__dhm8
         :: GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
       [LclId]
       lq_anf__dhm8 =
         Data.ByteString.Internal.mallocByteString
           @ GHC.Word.Word8 size0 } in
     let {
       lq_anf__dhm9 :: GHC.Types.Int
       [LclId]
       lq_anf__dhm9 = GHC.Types.I# 0 } in
     let {
       lq_anf__dhma
         :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
            WARNING: prune unsorted reft:
(sum_tlens([VV#3927]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#3927]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#660]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#660]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#4012]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#4012]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#573]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#573]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#3814]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#3814]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#635]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#635]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#552]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#552]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#3097]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#3097]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#3124]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#3124]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#4044]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#4044]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#1142]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#1142]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#681]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#681]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#3873]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#3873]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#552]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#552]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#660]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#660]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#527]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#527]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#737]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#737]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#3156]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#3156]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#3156]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#3156]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#3763]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#3763]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#527]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#527]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#3103]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#3103]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#3130]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#3130]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#3848]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#3848]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#3993]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#3993]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#635]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#635]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#552]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#552]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#614]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#614]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#3880]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#3880]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#527]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#527]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#660]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#660]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#3971]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#3971]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#506]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#506]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#635]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#635]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#506]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#506]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#3829]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#3829]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#3946]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#3946]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#681]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#681]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#614]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#614]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#3655]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#3655]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#3655]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#3655]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#3978]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#3978]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#573]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#573]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#506]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#506]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#3807]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#3807]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#614]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#614]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#573]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#573]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#681]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#681]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#4037]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#4037]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char
WARNING: prune unsorted reft:
(sum_tlens([VV#3782]) >= 0)
Cannot unify Data.Text.Internal.Text with GHC.Types.Char
WARNING: prune unsorted reft:
(lbLengths([VV#3782]) >= 0)
Cannot unify Data.ByteString.Lazy.Internal.ByteString with GHC.Types.Char


========================================================
Â© Copyright 2009 Regents of the University of California.
All Rights Reserved.
========================================================
BEGIN: Q.normalize
dep graph: vertices= 126, sccs= 126 
scc sizes: 
0 : [(15,Bot)] 
1 : [(2,ListZ)] 
2 : [(16,Bot)] 
3 : [(3,ListZ)] 
4 : [(17,Bot)] 
5 : [(4,ListZ)] 
6 : [(18,Bot)] 
7 : [(19,Bot)] 
8 : [(71,Diff)] 
9 : [(57,PlusOne)] 
10 : [(56,PSnd)] 
11 : [(93,TLengthLe)] 
12 : [(55,BlenEq)] 
13 : [(102,TwoC)] 
14 : [(26,Cmp)] 
15 : [(27,Cmp)] 
16 : [(28,Cmp)] 
17 : [(29,Cmp)] 
18 : [(30,Cmp)] 
19 : [(31,Cmp)] 
20 : [(84,Foo)] 
21 : [(85,Foo)] 
22 : [(86,Foo)] 
23 : [(87,Foo)] 
24 : [(60,EqPLen)] 
25 : [(61,EqPLen)] 
26 : [(62,EqPLen)] 
27 : [(63,EqPLen)] 
28 : [(38,Papp2)] 
29 : [(51,PlusOnePos)] 
30 : [(52,LePlusOne)] 
31 : [(79,Ord)] 
32 : [(80,Ord)] 
33 : [(81,Ord)] 
34 : [(34,False)] 
35 : [(58,Decr)] 
36 : [(90,TextNE)] 
37 : [(91,TextNE)] 
38 : [(36,False1)] 
39 : [(0,IsEmp)] 
40 : [(1,IsEmp)] 
41 : [(74,MALen)] 
42 : [(75,MALen)] 
43 : [(50,FindIndices)] 
44 : [(89,IsKnown)] 
45 : [(95,MinTLength)] 
46 : [(20,CmpZ)] 
47 : [(21,CmpZ)] 
48 : [(22,CmpZ)] 
49 : [(23,CmpZ)] 
50 : [(24,CmpZ)] 
51 : [(25,CmpZ)] 
52 : [(12,LenAcc)] 
53 : [(72,ALen)] 
54 : [(73,ALen)] 
55 : [(67,PLenPos)] 
56 : [(47,GE)] 
57 : [(48,GE)] 
58 : [(59,EqFPLen)] 
59 : [(69,SumLensEq)] 
60 : [(98,TLenDiff)] 
61 : [(33,True)] 
62 : [(44,Ensure)] 
63 : [(45,Ensure)] 
64 : [(46,Ensure)] 
65 : [(5,CmpLen)] 
66 : [(6,CmpLen)] 
67 : [(7,CmpLen)] 
68 : [(8,CmpLen)] 
69 : [(9,CmpLen)] 
70 : [(78,LTEPlus)] 
71 : [(32,One)] 
72 : [(53,LeDiff)] 
73 : [(11,LenEq)] 
74 : [(83,ALenLE)] 
75 : [(43,EqFPlen)] 
76 : [(103,Auto)] 
77 : [(104,Auto)] 
78 : [(105,Auto)] 
79 : [(106,Auto)] 
80 : [(107,Auto)] 
81 : [(108,Auto)] 
82 : [(109,Auto)] 
83 : [(110,Auto)] 
84 : [(111,Auto)] 
85 : [(112,Auto)] 
86 : [(113,Auto)] 
87 : [(114,Auto)] 
88 : [(97,TLengthDiff)] 
89 : [(115,Auto)] 
90 : [(116,Auto)] 
91 : [(117,Auto)] 
92 : [(118,Auto)] 
93 : [(119,Auto)] 
94 : [(120,Auto)] 
95 : [(121,Auto)] 
96 : [(122,Auto)] 
97 : [(123,Auto)] 
98 : [(76,FreezeMArr)] 
99 : [(124,Auto)] 
100 : [(125,Auto)] 
101 : [(96,TLengthAcc)] 
102 : [(66,FPLenPos)] 
103 : [(99,IterD)] 
104 : [(101,OneC)] 
105 : [(88,IsUnknown)] 
106 : [(92,TLengthEq)] 
107 : [(35,True1)] 
108 : [(68,LTPLen)] 
109 : [(13,LenDiff)] 
110 : [(14,LenDiff)] 
111 : [(94,TLenLe)] 
112 : [(10,EqLen)] 
113 : [(37,Papp)] 
114 : [(39,PValid)] 
115 : [(70,LenDiff)] 
116 : [(100,ReverseIter)] 
117 : [(64,PValid)] 
118 : [(82,MALenLE)] 
119 : [(42,PBaseEq)] 
120 : [(49,FilterLoop)] 
121 : [(54,PlenEq)] 
122 : [(65,PLLen)] 
123 : [(40,PLenCmp)] 
124 : [(41,PLenCmp)] 
125 : [(77,LTPlus)] 

DONE: Q.normalize
Fixpoint: Creating  CI
Pre-Simplify Stats
#Constraints: 678 (simple = 0) 
Post-Simplify Stats
#Constraints: 678 (simple = 0) 
dep graph: vertices= 678, sccs= 366 
scc sizes: 
0 : [(425,425: tag [18] //),(431,431: tag [18] //),(427,427: tag [18] //),(433,433: tag [18] //),(424,424: tag [18] //),(430,430: tag [18] //),(428,428: tag [18] //),(434,434: tag [18] //)] 
1 : [(429,429: tag [18] //),(426,426: tag [18] //),(423,423: tag [18] //),(432,432: tag [18] //)] 
2 : [(666,666: tag [3] //)] 
3 : [(665,665: tag [3] //)] 
4 : [(1,1: tag [14] //)] 
5 : [(5,5: tag [14] //)] 
6 : [(4,4: tag [14] //)] 
7 : [(3,3: tag [14] //)] 
8 : [(9,9: tag [14] //)] 
9 : [(224,224: tag [14] //),(134,134: tag [14] //),(60,60: tag [14] //),(293,293: tag [14] //),(151,151: tag [14] //),(219,219: tag [14] //),(58,58: tag [14] //),(25,25: tag [14] //),(168,168: tag [14] //),(97,97: tag [14] //),(86,86: tag [14] //),(75,75: tag [14] //),(53,53: tag [14] //),(234,234: tag [14] //),(144,144: tag [14] //),(185,185: tag [14] //),(62,62: tag [14] //),(284,284: tag [14] //),(183,183: tag [14] //),(238,238: tag [14] //),(148,148: tag [14] //),(189,189: tag [14] //),(288,288: tag [14] //),(236,236: tag [14] //),(146,146: tag [14] //),(187,187: tag [14] //),(31,31: tag [14] //),(20,20: tag [14] //),(294,294: tag [14] //),(29,29: tag [14] //),(231,231: tag [14] //),(182,182: tag [14] //),(48,48: tag [14] //),(229,229: tag [14] //),(139,139: tag [14] //),(98,98: tag [14] //),(180,180: tag [14] //),(279,279: tag [14] //),(178,178: tag [14] //),(63,63: tag [14] //),(233,233: tag [14] //),(173,173: tag [14] //),(37,37: tag [14] //),(149,149: tag [14] //)] 
10 : [(24,24: tag [14] //)] 
11 : [(36,36: tag [14] //)] 
12 : [(64,64: tag [14] //)] 
13 : [(99,99: tag [14] //)] 
14 : [(150,150: tag [14] //)] 
15 : [(152,152: tag [14] //)] 
16 : [(184,184: tag [14] //)] 
17 : [(186,186: tag [14] //)] 
18 : [(188,188: tag [14] //)] 
19 : [(190,190: tag [14] //)] 
20 : [(235,235: tag [14] //)] 
21 : [(237,237: tag [14] //)] 
22 : [(239,239: tag [14] //)] 
23 : [(147,147: tag [14] //),(278,278: tag [14] //),(177,177: tag [14] //),(232,232: tag [14] //),(230,230: tag [14] //),(181,181: tag [14] //),(47,47: tag [14] //),(228,228: tag [14] //),(138,138: tag [14] //),(179,179: tag [14] //),(223,223: tag [14] //),(133,133: tag [14] //),(172,172: tag [14] //),(96,96: tag [14] //),(85,85: tag [14] //),(61,61: tag [14] //),(59,59: tag [14] //),(218,218: tag [14] //),(57,57: tag [14] //),(167,167: tag [14] //),(145,145: tag [14] //),(74,74: tag [14] //),(52,52: tag [14] //),(143,143: tag [14] //)] 
24 : [(41,41: tag [14] //)] 
25 : [(42,42: tag [14] //)] 
26 : [(43,43: tag [14] //)] 
27 : [(44,44: tag [14] //)] 
28 : [(45,45: tag [14] //)] 
29 : [(56,56: tag [14] //),(226,226: tag [14] //),(136,136: tag [14] //),(125,125: tag [14] //),(276,276: tag [14] //),(73,73: tag [14] //),(175,175: tag [14] //),(303,303: tag [14] //),(142,142: tag [14] //),(282,282: tag [14] //),(320,320: tag [14] //),(170,170: tag [14] //),(8,8: tag [14] //),(34,34: tag [14] //),(23,23: tag [14] //),(297,297: tag [14] //),(12,12: tag [14] //),(286,286: tag [14] //),(51,51: tag [14] //),(92,92: tag [14] //),(81,81: tag [14] //),(221,221: tag [14] //),(131,131: tag [14] //),(309,309: tag [14] //),(27,27: tag [14] //),(290,290: tag [14] //),(227,227: tag [14] //),(137,137: tag [14] //),(55,55: tag [14] //),(277,277: tag [14] //),(176,176: tag [14] //),(304,304: tag [14] //),(124,124: tag [14] //),(72,72: tag [14] //),(321,321: tag [14] //),(141,141: tag [14] //),(130,130: tag [14] //),(308,308: tag [14] //),(281,281: tag [14] //),(35,35: tag [14] //),(7,7: tag [14] //),(298,298: tag [14] //),(287,287: tag [14] //),(22,22: tag [14] //),(11,11: tag [14] //),(222,222: tag [14] //),(50,50: tag [14] //),(91,91: tag [14] //),(28,28: tag [14] //),(80,80: tag [14] //),(171,171: tag [14] //),(291,291: tag [14] //)] 
30 : [(46,46: tag [14] //)] 
31 : [(67,67: tag [14] //),(95,95: tag [14] //),(84,84: tag [14] //),(101,101: tag [14] //),(116,116: tag [14] //),(118,118: tag [14] //),(107,107: tag [14] //),(66,66: tag [14] //),(94,94: tag [14] //),(83,83: tag [14] //),(102,102: tag [14] //),(115,115: tag [14] //),(119,119: tag [14] //),(108,108: tag [14] //)] 
32 : [(70,70: tag [14] //)] 
33 : [(71,71: tag [14] //)] 
34 : [(79,79: tag [14] //)] 
35 : [(82,82: tag [14] //)] 
36 : [(90,90: tag [14] //)] 
37 : [(93,93: tag [14] //)] 
38 : [(105,105: tag [14] //)] 
39 : [(106,106: tag [14] //)] 
40 : [(109,109: tag [14] //)] 
41 : [(110,110: tag [14] //)] 
42 : [(111,111: tag [14] //)] 
43 : [(112,112: tag [14] //)] 
44 : [(113,113: tag [14] //)] 
45 : [(114,114: tag [14] //)] 
46 : [(117,117: tag [14] //)] 
47 : [(120,120: tag [14] //)] 
48 : [(121,121: tag [14] //)] 
49 : [(122,122: tag [14] //)] 
50 : [(123,123: tag [14] //)] 
51 : [(126,126: tag [14] //)] 
52 : [(127,127: tag [14] //)] 
53 : [(128,128: tag [14] //)] 
54 : [(129,129: tag [14] //)] 
55 : [(159,159: tag [14] //)] 
56 : [(164,164: tag [14] //)] 
57 : [(197,197: tag [14] //)] 
58 : [(202,202: tag [14] //)] 
59 : [(207,207: tag [14] //)] 
60 : [(212,212: tag [14] //)] 
61 : [(246,246: tag [14] //)] 
62 : [(251,251: tag [14] //)] 
63 : [(256,256: tag [14] //)] 
64 : [(271,271: tag [14] //)] 
65 : [(272,272: tag [14] //)] 
66 : [(273,273: tag [14] //)] 
67 : [(274,274: tag [14] //)] 
68 : [(275,275: tag [14] //)] 
69 : [(283,283: tag [14] //)] 
70 : [(292,292: tag [14] //)] 
71 : [(295,295: tag [14] //)] 
72 : [(19,19: tag [14] //)] 
73 : [(30,30: tag [14] //)] 
74 : [(216,216: tag [14] //)] 
75 : [(259,259: tag [14] //)] 
76 : [(260,260: tag [14] //)] 
77 : [(261,261: tag [14] //)] 
78 : [(262,262: tag [14] //)] 
79 : [(263,263: tag [14] //)] 
80 : [(264,264: tag [14] //)] 
81 : [(265,265: tag [14] //)] 
82 : [(266,266: tag [14] //)] 
83 : [(267,267: tag [14] //)] 
84 : [(268,268: tag [14] //)] 
85 : [(269,269: tag [14] //)] 
86 : [(312,312: tag [14] //)] 
87 : [(310,310: tag [14] //)] 
88 : [(305,305: tag [14] //)] 
89 : [(306,306: tag [14] //)] 
90 : [(313,313: tag [14] //)] 
91 : [(314,314: tag [14] //)] 
92 : [(315,315: tag [14] //)] 
93 : [(316,316: tag [14] //)] 
94 : [(317,317: tag [14] //)] 
95 : [(318,318: tag [14] //)] 
96 : [(319,319: tag [14] //)] 
97 : [(302,302: tag [14] //)] 
98 : [(307,307: tag [14] //)] 
99 : [(322,322: tag [14] //)] 
100 : [(323,323: tag [14] //)] 
101 : [(324,324: tag [14] //)] 
102 : [(325,325: tag [14] //)] 
103 : [(326,326: tag [14] //)] 
104 : [(280,280: tag [14] //),(248,248: tag [14] //),(158,158: tag [14] //),(289,289: tag [14] //),(199,199: tag [14] //),(215,215: tag [14] //),(54,54: tag [14] //),(32,32: tag [14] //),(213,213: tag [14] //),(21,21: tag [14] //),(254,254: tag [14] //),(243,243: tag [14] //),(153,153: tag [14] //),(241,241: tag [14] //),(69,69: tag [14] //),(192,192: tag [14] //),(140,140: tag [14] //),(88,88: tag [14] //),(217,217: tag [14] //),(258,258: tag [14] //),(206,206: tag [14] //),(247,247: tag [14] //),(157,157: tag [14] //),(166,166: tag [14] //),(204,204: tag [14] //),(245,245: tag [14] //),(155,155: tag [14] //),(196,196: tag [14] //),(103,103: tag [14] //),(194,194: tag [14] //),(40,40: tag [14] //),(311,311: tag [14] //),(49,49: tag [14] //),(300,300: tag [14] //),(210,210: tag [14] //),(38,38: tag [14] //),(161,161: tag [14] //),(240,240: tag [14] //),(68,68: tag [14] //),(208,208: tag [14] //),(249,249: tag [14] //),(77,77: tag [14] //),(299,299: tag [14] //),(198,198: tag [14] //),(225,225: tag [14] //),(33,33: tag [14] //),(135,135: tag [14] //),(214,214: tag [14] //),(255,255: tag [14] //),(165,165: tag [14] //),(203,203: tag [14] //),(174,174: tag [14] //),(253,253: tag [14] //),(163,163: tag [14] //),(201,201: tag [14] //),(242,242: tag [14] //),(193,193: tag [14] //),(100,100: tag [14] //),(220,220: tag [14] //),(191,191: tag [14] //),(169,169: tag [14] //),(270,270: tag [14] //),(87,87: tag [14] //),(76,76: tag [14] //),(257,257: tag [14] //),(65,65: tag [14] //),(205,205: tag [14] //),(156,156: tag [14] //),(104,104: tag [14] //),(296,296: tag [14] //),(244,244: tag [14] //),(154,154: tag [14] //),(285,285: tag [14] //),(195,195: tag [14] //),(132,132: tag [14] //),(301,301: tag [14] //),(211,211: tag [14] //),(39,39: tag [14] //),(252,252: tag [14] //),(162,162: tag [14] //),(200,200: tag [14] //),(209,209: tag [14] //),(89,89: tag [14] //),(250,250: tag [14] //),(78,78: tag [14] //),(160,160: tag [14] //),(26,26: tag [14] //)] 
105 : [(522,522: tag [18] //)] 
106 : [(338,338: tag [21] //)] 
107 : [(335,335: tag [21] //)] 
108 : [(332,332: tag [21] //)] 
109 : [(346,346: tag [21] //)] 
110 : [(342,342: tag [21] //)] 
111 : [(341,341: tag [21] //)] 
112 : [(364,364: tag [18] //)] 
113 : [(372,372: tag [18] //)] 
114 : [(377,377: tag [18] //)] 
115 : [(386,386: tag [18] //)] 
116 : [(383,383: tag [18] //)] 
117 : [(382,382: tag [18] //)] 
118 : [(388,388: tag [18] //)] 
119 : [(399,399: tag [18] //)] 
120 : [(397,397: tag [18] //)] 
121 : [(392,392: tag [18] //)] 
122 : [(393,393: tag [18] //)] 
123 : [(400,400: tag [18] //)] 
124 : [(401,401: tag [18] //)] 
125 : [(411,411: tag [18] //)] 
126 : [(409,409: tag [18] //)] 
127 : [(405,405: tag [18] //)] 
128 : [(406,406: tag [18] //)] 
129 : [(412,412: tag [18] //)] 
130 : [(413,413: tag [18] //)] 
131 : [(473,473: tag [18] //),(488,488: tag [18] //),(475,475: tag [18] //),(470,470: tag [18] //),(479,479: tag [18] //),(468,468: tag [18] //),(463,463: tag [18] //),(478,478: tag [18] //),(525,525: tag [18] //),(465,465: tag [18] //),(533,533: tag [18] //),(441,441: tag [18] //),(445,445: tag [18] //)] 
132 : [(477,477: tag [18] //)] 
133 : [(480,480: tag [18] //)] 
134 : [(487,487: tag [18] //)] 
135 : [(524,524: tag [18] //)] 
136 : [(532,532: tag [18] //)] 
137 : [(440,440: tag [18] //)] 
138 : [(448,448: tag [18] //)] 
139 : [(449,449: tag [18] //)] 
140 : [(451,451: tag [18] //)] 
141 : [(453,453: tag [18] //)] 
142 : [(454,454: tag [18] //)] 
143 : [(455,455: tag [18] //)] 
144 : [(456,456: tag [18] //)] 
145 : [(365,365: tag [18] //)] 
146 : [(359,359: tag [18] //)] 
147 : [(360,360: tag [18] //)] 
148 : [(361,361: tag [18] //)] 
149 : [(366,366: tag [18] //)] 
150 : [(367,367: tag [18] //)] 
151 : [(368,368: tag [18] //)] 
152 : [(358,358: tag [18] //)] 
153 : [(457,457: tag [18] //)] 
154 : [(356,356: tag [18] //)] 
155 : [(357,357: tag [18] //)] 
156 : [(458,458: tag [18] //)] 
157 : [(459,459: tag [18] //)] 
158 : [(450,450: tag [18] //)] 
159 : [(452,452: tag [18] //)] 
160 : [(460,460: tag [18] //)] 
161 : [(403,403: tag [18] //),(404,404: tag [18] //)] 
162 : [(461,461: tag [18] //)] 
163 : [(462,462: tag [18] //)] 
164 : [(467,467: tag [18] //)] 
165 : [(472,472: tag [18] //)] 
166 : [(511,511: tag [18] //),(537,537: tag [18] //),(556,556: tag [18] //),(565,565: tag [18] //),(492,492: tag [18] //),(569,569: tag [18] //),(536,536: tag [18] //),(444,444: tag [18] //),(510,510: tag [18] //),(491,491: tag [18] //),(568,568: tag [18] //),(566,566: tag [18] //),(555,555: tag [18] //),(443,443: tag [18] //)] 
167 : [(447,447: tag [18] //)] 
168 : [(528,528: tag [18] //),(483,483: tag [18] //),(530,530: tag [18] //),(416,416: tag [18] //),(485,485: tag [18] //),(527,527: tag [18] //),(531,531: tag [18] //),(482,482: tag [18] //),(415,415: tag [18] //),(486,486: tag [18] //)] 
169 : [(489,489: tag [18] //)] 
170 : [(490,490: tag [18] //)] 
171 : [(500,500: tag [18] //),(499,499: tag [18] //),(502,502: tag [18] //),(506,506: tag [18] //),(496,496: tag [18] //),(503,503: tag [18] //),(505,505: tag [18] //),(497,497: tag [18] //)] 
172 : [(504,504: tag [18] //),(498,498: tag [18] //),(501,501: tag [18] //),(495,495: tag [18] //)] 
173 : [(508,508: tag [18] //)] 
174 : [(509,509: tag [18] //)] 
175 : [(512,512: tag [18] //)] 
176 : [(513,513: tag [18] //)] 
177 : [(517,517: tag [18] //)] 
178 : [(515,515: tag [18] //)] 
179 : [(521,521: tag [18] //)] 
180 : [(523,523: tag [18] //)] 
181 : [(534,534: tag [18] //)] 
182 : [(535,535: tag [18] //)] 
183 : [(541,541: tag [18] //),(550,550: tag [18] //),(547,547: tag [18] //),(545,545: tag [18] //),(551,551: tag [18] //),(544,544: tag [18] //),(542,542: tag [18] //),(548,548: tag [18] //)] 
184 : [(543,543: tag [18] //),(540,540: tag [18] //),(549,549: tag [18] //),(546,546: tag [18] //)] 
185 : [(553,553: tag [18] //)] 
186 : [(554,554: tag [18] //)] 
187 : [(557,557: tag [18] //)] 
188 : [(558,558: tag [18] //)] 
189 : [(559,559: tag [18] //)] 
190 : [(560,560: tag [18] //)] 
191 : [(561,561: tag [18] //)] 
192 : [(562,562: tag [18] //)] 
193 : [(563,563: tag [18] //)] 
194 : [(564,564: tag [18] //)] 
195 : [(567,567: tag [18] //)] 
196 : [(570,570: tag [18] //)] 
197 : [(571,571: tag [18] //)] 
198 : [(572,572: tag [18] //)] 
199 : [(573,573: tag [18] //)] 
200 : [(574,574: tag [18] //)] 
201 : [(575,575: tag [18] //)] 
202 : [(576,576: tag [18] //)] 
203 : [(552,552: tag [18] //),(539,539: tag [18] //),(526,526: tag [18] //),(466,466: tag [18] //),(464,464: tag [18] //),(494,494: tag [18] //),(442,442: tag [18] //),(519,519: tag [18] //),(481,481: tag [18] //),(446,446: tag [18] //),(474,474: tag [18] //),(538,538: tag [18] //),(516,516: tag [18] //),(476,476: tag [18] //),(514,514: tag [18] //),(493,493: tag [18] //),(520,520: tag [18] //),(471,471: tag [18] //),(529,529: tag [18] //),(518,518: tag [18] //),(469,469: tag [18] //),(507,507: tag [18] //),(484,484: tag [18] //)] 
204 : [(414,414: tag [18] //)] 
205 : [(417,417: tag [18] //)] 
206 : [(418,418: tag [18] //)] 
207 : [(419,419: tag [18] //)] 
208 : [(421,421: tag [18] //),(438,438: tag [18] //),(580,580: tag [18] //),(391,391: tag [18] //),(395,395: tag [18] //),(420,420: tag [18] //),(579,579: tag [18] //),(439,439: tag [18] //),(390,390: tag [18] //),(396,396: tag [18] //)] 
209 : [(435,435: tag [18] //)] 
210 : [(422,422: tag [18] //)] 
211 : [(436,436: tag [18] //)] 
212 : [(437,437: tag [18] //)] 
213 : [(577,577: tag [18] //)] 
214 : [(578,578: tag [18] //)] 
215 : [(402,402: tag [18] //)] 
216 : [(407,407: tag [18] //)] 
217 : [(408,408: tag [18] //)] 
218 : [(410,410: tag [18] //)] 
219 : [(581,581: tag [18] //)] 
220 : [(389,389: tag [18] //)] 
221 : [(394,394: tag [18] //)] 
222 : [(352,352: tag [21] //)] 
223 : [(676,676: tag [1] //)] 
224 : [(673,673: tag [1] //)] 
225 : [(619,619: tag [10] //)] 
226 : [(620,620: tag [10] //)] 
227 : [(611,611: tag [11] //)] 
228 : [(612,612: tag [11] //)] 
229 : [(617,617: tag [10] //)] 
230 : [(670,670: tag [1] //)] 
231 : [(654,654: tag [4] //)] 
232 : [(662,662: tag [4] //)] 
233 : [(336,336: tag [21] //)] 
234 : [(337,337: tag [21] //)] 
235 : [(333,333: tag [21] //)] 
236 : [(334,334: tag [21] //)] 
237 : [(329,329: tag [21] //)] 
238 : [(330,330: tag [21] //)] 
239 : [(331,331: tag [21] //)] 
240 : [(343,343: tag [21] //)] 
241 : [(602,602: tag [12] //)] 
242 : [(603,603: tag [12] //)] 
243 : [(594,594: tag [13] //)] 
244 : [(595,595: tag [13] //)] 
245 : [(597,597: tag [12] //)] 
246 : [(598,598: tag [12] //)] 
247 : [(599,599: tag [12] //)] 
248 : [(600,600: tag [12] //)] 
249 : [(601,601: tag [12] //)] 
250 : [(605,605: tag [12] //)] 
251 : [(659,659: tag [4] //)] 
252 : [(656,656: tag [4] //)] 
253 : [(653,653: tag [4] //)] 
254 : [(607,607: tag [12] //)] 
255 : [(640,640: tag [6] //)] 
256 : [(641,641: tag [6] //)] 
257 : [(632,632: tag [7] //)] 
258 : [(633,633: tag [7] //)] 
259 : [(638,638: tag [6] //)] 
260 : [(639,639: tag [6] //)] 
261 : [(646,646: tag [6] //)] 
262 : [(621,621: tag [10] //)] 
263 : [(614,614: tag [10] //)] 
264 : [(615,615: tag [10] //)] 
265 : [(616,616: tag [10] //)] 
266 : [(618,618: tag [10] //)] 
267 : [(622,622: tag [10] //)] 
268 : [(623,623: tag [10] //)] 
269 : [(624,624: tag [10] //)] 
270 : [(625,625: tag [10] //)] 
271 : [(626,626: tag [10] //)] 
272 : [(613,613: tag [10] //)] 
273 : [(610,610: tag [11] //)] 
274 : [(635,635: tag [6] //)] 
275 : [(636,636: tag [6] //)] 
276 : [(637,637: tag [6] //)] 
277 : [(643,643: tag [6] //)] 
278 : [(384,384: tag [18] //)] 
279 : [(385,385: tag [18] //)] 
280 : [(381,381: tag [18] //)] 
281 : [(387,387: tag [18] //)] 
282 : [(398,398: tag [18] //)] 
283 : [(582,582: tag [18] //)] 
284 : [(379,379: tag [18] //)] 
285 : [(355,355: tag [15] //)] 
286 : [(13,13: tag [14] //)] 
287 : [(350,350: tag [21] //)] 
288 : [(348,348: tag [21] //)] 
289 : [(630,630: tag [8] //)] 
290 : [(362,362: tag [18] //)] 
291 : [(642,642: tag [6] //)] 
292 : [(644,644: tag [6] //)] 
293 : [(645,645: tag [6] //)] 
294 : [(647,647: tag [6] //)] 
295 : [(634,634: tag [6] //)] 
296 : [(631,631: tag [7] //)] 
297 : [(586,586: tag [17] //)] 
298 : [(380,380: tag [18] //)] 
299 : [(375,375: tag [18] //)] 
300 : [(2,2: tag [14] //)] 
301 : [(6,6: tag [14] //)] 
302 : [(10,10: tag [14] //)] 
303 : [(14,14: tag [14] //)] 
304 : [(15,15: tag [14] //)] 
305 : [(16,16: tag [14] //)] 
306 : [(18,18: tag [14] //)] 
307 : [(588,588: tag [17] //)] 
308 : [(591,591: tag [16] //)] 
309 : [(344,344: tag [21] //)] 
310 : [(677,677: tag [1] //)] 
311 : [(674,674: tag [1] //)] 
312 : [(671,671: tag [1] //)] 
313 : [(668,668: tag [2] //)] 
314 : [(667,667: tag [2] //)] 
315 : [(657,657: tag [4] //)] 
316 : [(658,658: tag [4] //)] 
317 : [(649,649: tag [5] //)] 
318 : [(650,650: tag [5] //)] 
319 : [(655,655: tag [4] //)] 
320 : [(663,663: tag [4] //)] 
321 : [(652,652: tag [4] //)] 
322 : [(660,660: tag [4] //)] 
323 : [(608,608: tag [12] //)] 
324 : [(369,369: tag [18] //)] 
325 : [(345,345: tag [21] //)] 
326 : [(340,340: tag [21] //)] 
327 : [(349,349: tag [21] //)] 
328 : [(347,347: tag [21] //)] 
329 : [(339,339: tag [21] //)] 
330 : [(328,328: tag [21] //)] 
331 : [(327,327: tag [21] //)] 
332 : [(661,661: tag [4] //)] 
333 : [(664,664: tag [4] //)] 
334 : [(651,651: tag [4] //)] 
335 : [(363,363: tag [18] //)] 
336 : [(371,371: tag [18] //)] 
337 : [(584,584: tag [17] //)] 
338 : [(604,604: tag [12] //)] 
339 : [(606,606: tag [12] //)] 
340 : [(609,609: tag [12] //)] 
341 : [(596,596: tag [12] //)] 
342 : [(593,593: tag [13] //)] 
343 : [(376,376: tag [18] //)] 
344 : [(373,373: tag [18] //)] 
345 : [(648,648: tag [5] //)] 
346 : [(628,628: tag [9] //)] 
347 : [(627,627: tag [9] //)] 
348 : [(353,353: tag [19] //)] 
349 : [(589,589: tag [17] //)] 
350 : [(378,378: tag [18] //)] 
351 : [(678,678: tag [1] //)] 
352 : [(675,675: tag [1] //)] 
353 : [(672,672: tag [1] //)] 
354 : [(585,585: tag [17] //)] 
355 : [(669,669: tag [1] //)] 
356 : [(351,351: tag [21] //)] 
357 : [(374,374: tag [18] //)] 
358 : [(17,17: tag [14] //)] 
359 : [(587,587: tag [17] //)] 
360 : [(590,590: tag [16] //)] 
361 : [(354,354: tag [19] //)] 
362 : [(592,592: tag [16] //)] 
363 : [(629,629: tag [8] //)] 
364 : [(370,370: tag [18] //)] 
365 : [(583,583: tag [17] //)] 

dep graph: vertices= 678, sccs= 555 
scc sizes: 
0 : [(425,425: tag [18] //),(431,431: tag [18] //),(427,427: tag [18] //),(433,433: tag [18] //),(424,424: tag [18] //),(430,430: tag [18] //),(428,428: tag [18] //),(434,434: tag [18] //)] 
1 : [(429,429: tag [18] //),(426,426: tag [18] //),(423,423: tag [18] //),(432,432: tag [18] //)] 
2 : [(666,666: tag [3] //)] 
3 : [(665,665: tag [3] //)] 
4 : [(1,1: tag [14] //)] 
5 : [(5,5: tag [14] //)] 
6 : [(4,4: tag [14] //)] 
7 : [(3,3: tag [14] //)] 
8 : [(9,9: tag [14] //)] 
9 : [(20,20: tag [14] //)] 
10 : [(31,31: tag [14] //)] 
11 : [(29,29: tag [14] //)] 
12 : [(24,24: tag [14] //)] 
13 : [(25,25: tag [14] //)] 
14 : [(36,36: tag [14] //)] 
15 : [(37,37: tag [14] //)] 
16 : [(48,48: tag [14] //)] 
17 : [(60,60: tag [14] //)] 
18 : [(134,134: tag [14] //)] 
19 : [(146,146: tag [14] //)] 
20 : [(168,168: tag [14] //)] 
21 : [(180,180: tag [14] //)] 
22 : [(219,219: tag [14] //)] 
23 : [(231,231: tag [14] //)] 
24 : [(279,279: tag [14] //)] 
25 : [(58,58: tag [14] //)] 
26 : [(53,53: tag [14] //)] 
27 : [(62,62: tag [14] //)] 
28 : [(63,63: tag [14] //)] 
29 : [(64,64: tag [14] //)] 
30 : [(97,97: tag [14] //)] 
31 : [(98,98: tag [14] //)] 
32 : [(99,99: tag [14] //)] 
33 : [(74,74: tag [14] //)] 
34 : [(75,75: tag [14] //)] 
35 : [(85,85: tag [14] //)] 
36 : [(86,86: tag [14] //)] 
37 : [(144,144: tag [14] //)] 
38 : [(139,139: tag [14] //)] 
39 : [(148,148: tag [14] //)] 
40 : [(149,149: tag [14] //)] 
41 : [(150,150: tag [14] //)] 
42 : [(151,151: tag [14] //)] 
43 : [(152,152: tag [14] //)] 
44 : [(178,178: tag [14] //)] 
45 : [(173,173: tag [14] //)] 
46 : [(182,182: tag [14] //)] 
47 : [(183,183: tag [14] //)] 
48 : [(184,184: tag [14] //)] 
49 : [(185,185: tag [14] //)] 
50 : [(186,186: tag [14] //)] 
51 : [(187,187: tag [14] //)] 
52 : [(188,188: tag [14] //)] 
53 : [(189,189: tag [14] //)] 
54 : [(190,190: tag [14] //)] 
55 : [(229,229: tag [14] //)] 
56 : [(224,224: tag [14] //)] 
57 : [(233,233: tag [14] //)] 
58 : [(234,234: tag [14] //)] 
59 : [(235,235: tag [14] //)] 
60 : [(236,236: tag [14] //)] 
61 : [(237,237: tag [14] //)] 
62 : [(238,238: tag [14] //)] 
63 : [(239,239: tag [14] //)] 
64 : [(47,47: tag [14] //)] 
65 : [(59,59: tag [14] //)] 
66 : [(133,133: tag [14] //)] 
67 : [(145,145: tag [14] //)] 
68 : [(167,167: tag [14] //)] 
69 : [(179,179: tag [14] //)] 
70 : [(218,218: tag [14] //)] 
71 : [(230,230: tag [14] //)] 
72 : [(278,278: tag [14] //)] 
73 : [(143,143: tag [14] //)] 
74 : [(138,138: tag [14] //)] 
75 : [(147,147: tag [14] //)] 
76 : [(177,177: tag [14] //)] 
77 : [(172,172: tag [14] //)] 
78 : [(181,181: tag [14] //)] 
79 : [(228,228: tag [14] //)] 
80 : [(223,223: tag [14] //)] 
81 : [(232,232: tag [14] //)] 
82 : [(41,41: tag [14] //)] 
83 : [(42,42: tag [14] //)] 
84 : [(43,43: tag [14] //)] 
85 : [(44,44: tag [14] //)] 
86 : [(45,45: tag [14] //)] 
87 : [(7,7: tag [14] //)] 
88 : [(12,12: tag [14] //),(11,11: tag [14] //)] 
89 : [(8,8: tag [14] //)] 
90 : [(35,35: tag [14] //)] 
91 : [(56,56: tag [14] //),(226,226: tag [14] //),(136,136: tag [14] //),(125,125: tag [14] //),(276,276: tag [14] //),(73,73: tag [14] //),(175,175: tag [14] //),(142,142: tag [14] //),(282,282: tag [14] //),(170,170: tag [14] //),(23,23: tag [14] //),(51,51: tag [14] //),(92,92: tag [14] //),(81,81: tag [14] //),(221,221: tag [14] //),(131,131: tag [14] //),(27,27: tag [14] //),(227,227: tag [14] //),(137,137: tag [14] //),(55,55: tag [14] //),(277,277: tag [14] //),(176,176: tag [14] //),(124,124: tag [14] //),(72,72: tag [14] //),(141,141: tag [14] //),(130,130: tag [14] //),(281,281: tag [14] //),(22,22: tag [14] //),(222,222: tag [14] //),(50,50: tag [14] //),(91,91: tag [14] //),(28,28: tag [14] //),(80,80: tag [14] //),(171,171: tag [14] //)] 
92 : [(34,34: tag [14] //)] 
93 : [(297,297: tag [14] //)] 
94 : [(303,303: tag [14] //),(320,320: tag [14] //),(286,286: tag [14] //),(309,309: tag [14] //),(290,290: tag [14] //),(304,304: tag [14] //),(321,321: tag [14] //),(308,308: tag [14] //),(287,287: tag [14] //),(291,291: tag [14] //)] 
95 : [(298,298: tag [14] //)] 
96 : [(46,46: tag [14] //)] 
97 : [(57,57: tag [14] //)] 
98 : [(52,52: tag [14] //)] 
99 : [(61,61: tag [14] //)] 
100 : [(66,66: tag [14] //)] 
101 : [(67,67: tag [14] //)] 
102 : [(70,70: tag [14] //)] 
103 : [(71,71: tag [14] //)] 
104 : [(79,79: tag [14] //)] 
105 : [(82,82: tag [14] //)] 
106 : [(84,84: tag [14] //)] 
107 : [(83,83: tag [14] //)] 
108 : [(90,90: tag [14] //)] 
109 : [(93,93: tag [14] //)] 
110 : [(95,95: tag [14] //)] 
111 : [(94,94: tag [14] //)] 
112 : [(96,96: tag [14] //)] 
113 : [(101,101: tag [14] //)] 
114 : [(102,102: tag [14] //)] 
115 : [(105,105: tag [14] //)] 
116 : [(106,106: tag [14] //)] 
117 : [(108,108: tag [14] //)] 
118 : [(107,107: tag [14] //)] 
119 : [(109,109: tag [14] //)] 
120 : [(119,119: tag [14] //)] 
121 : [(116,116: tag [14] //),(115,115: tag [14] //)] 
122 : [(118,118: tag [14] //)] 
123 : [(110,110: tag [14] //)] 
124 : [(111,111: tag [14] //)] 
125 : [(112,112: tag [14] //)] 
126 : [(113,113: tag [14] //)] 
127 : [(114,114: tag [14] //)] 
128 : [(117,117: tag [14] //)] 
129 : [(120,120: tag [14] //)] 
130 : [(121,121: tag [14] //)] 
131 : [(122,122: tag [14] //)] 
132 : [(123,123: tag [14] //)] 
133 : [(126,126: tag [14] //)] 
134 : [(127,127: tag [14] //)] 
135 : [(128,128: tag [14] //)] 
136 : [(129,129: tag [14] //)] 
137 : [(159,159: tag [14] //)] 
138 : [(164,164: tag [14] //)] 
139 : [(197,197: tag [14] //)] 
140 : [(202,202: tag [14] //)] 
141 : [(207,207: tag [14] //)] 
142 : [(212,212: tag [14] //)] 
143 : [(216,216: tag [14] //)] 
144 : [(246,246: tag [14] //)] 
145 : [(251,251: tag [14] //)] 
146 : [(256,256: tag [14] //)] 
147 : [(259,259: tag [14] //)] 
148 : [(260,260: tag [14] //)] 
149 : [(261,261: tag [14] //)] 
150 : [(262,262: tag [14] //)] 
151 : [(263,263: tag [14] //)] 
152 : [(264,264: tag [14] //)] 
153 : [(265,265: tag [14] //)] 
154 : [(266,266: tag [14] //)] 
155 : [(267,267: tag [14] //)] 
156 : [(268,268: tag [14] //)] 
157 : [(269,269: tag [14] //)] 
158 : [(271,271: tag [14] //)] 
159 : [(272,272: tag [14] //)] 
160 : [(273,273: tag [14] //)] 
161 : [(274,274: tag [14] //)] 
162 : [(275,275: tag [14] //)] 
163 : [(283,283: tag [14] //)] 
164 : [(284,284: tag [14] //)] 
165 : [(288,288: tag [14] //)] 
166 : [(292,292: tag [14] //)] 
167 : [(293,293: tag [14] //)] 
168 : [(294,294: tag [14] //)] 
169 : [(295,295: tag [14] //)] 
170 : [(312,312: tag [14] //)] 
171 : [(310,310: tag [14] //)] 
172 : [(305,305: tag [14] //)] 
173 : [(306,306: tag [14] //)] 
174 : [(313,313: tag [14] //)] 
175 : [(314,314: tag [14] //)] 
176 : [(315,315: tag [14] //)] 
177 : [(316,316: tag [14] //)] 
178 : [(317,317: tag [14] //)] 
179 : [(318,318: tag [14] //)] 
180 : [(319,319: tag [14] //)] 
181 : [(302,302: tag [14] //)] 
182 : [(307,307: tag [14] //)] 
183 : [(322,322: tag [14] //)] 
184 : [(323,323: tag [14] //)] 
185 : [(324,324: tag [14] //)] 
186 : [(325,325: tag [14] //)] 
187 : [(326,326: tag [14] //)] 
188 : [(38,38: tag [14] //)] 
189 : [(39,39: tag [14] //)] 
190 : [(40,40: tag [14] //)] 
191 : [(65,65: tag [14] //)] 
192 : [(68,68: tag [14] //)] 
193 : [(69,69: tag [14] //)] 
194 : [(76,76: tag [14] //)] 
195 : [(77,77: tag [14] //)] 
196 : [(78,78: tag [14] //)] 
197 : [(87,87: tag [14] //)] 
198 : [(88,88: tag [14] //)] 
199 : [(89,89: tag [14] //)] 
200 : [(100,100: tag [14] //)] 
201 : [(103,103: tag [14] //)] 
202 : [(104,104: tag [14] //)] 
203 : [(49,49: tag [14] //)] 
204 : [(54,54: tag [14] //)] 
205 : [(153,153: tag [14] //)] 
206 : [(154,154: tag [14] //)] 
207 : [(155,155: tag [14] //)] 
208 : [(158,158: tag [14] //)] 
209 : [(191,191: tag [14] //)] 
210 : [(192,192: tag [14] //)] 
211 : [(193,193: tag [14] //)] 
212 : [(196,196: tag [14] //)] 
213 : [(240,240: tag [14] //)] 
214 : [(241,241: tag [14] //)] 
215 : [(242,242: tag [14] //)] 
216 : [(245,245: tag [14] //)] 
217 : [(248,248: tag [14] //),(199,199: tag [14] //),(243,243: tag [14] //),(206,206: tag [14] //),(247,247: tag [14] //),(157,157: tag [14] //),(204,204: tag [14] //),(194,194: tag [14] //),(208,208: tag [14] //),(249,249: tag [14] //),(198,198: tag [14] //),(255,255: tag [14] //),(203,203: tag [14] //),(163,163: tag [14] //),(201,201: tag [14] //),(270,270: tag [14] //),(205,205: tag [14] //),(156,156: tag [14] //),(244,244: tag [14] //),(195,195: tag [14] //),(211,211: tag [14] //),(252,252: tag [14] //),(200,200: tag [14] //),(250,250: tag [14] //),(160,160: tag [14] //)] 
218 : [(162,162: tag [14] //)] 
219 : [(161,161: tag [14] //)] 
220 : [(165,165: tag [14] //)] 
221 : [(135,135: tag [14] //)] 
222 : [(140,140: tag [14] //)] 
223 : [(210,210: tag [14] //)] 
224 : [(209,209: tag [14] //)] 
225 : [(213,213: tag [14] //)] 
226 : [(215,215: tag [14] //)] 
227 : [(214,214: tag [14] //)] 
228 : [(169,169: tag [14] //)] 
229 : [(174,174: tag [14] //)] 
230 : [(254,254: tag [14] //)] 
231 : [(253,253: tag [14] //)] 
232 : [(257,257: tag [14] //)] 
233 : [(220,220: tag [14] //)] 
234 : [(225,225: tag [14] //)] 
235 : [(280,280: tag [14] //)] 
236 : [(19,19: tag [14] //)] 
237 : [(30,30: tag [14] //)] 
238 : [(296,296: tag [14] //)] 
239 : [(299,299: tag [14] //)] 
240 : [(300,300: tag [14] //)] 
241 : [(301,301: tag [14] //)] 
242 : [(311,311: tag [14] //)] 
243 : [(285,285: tag [14] //)] 
244 : [(289,289: tag [14] //)] 
245 : [(132,132: tag [14] //)] 
246 : [(166,166: tag [14] //)] 
247 : [(217,217: tag [14] //)] 
248 : [(258,258: tag [14] //)] 
249 : [(21,21: tag [14] //)] 
250 : [(26,26: tag [14] //)] 
251 : [(522,522: tag [18] //)] 
252 : [(338,338: tag [21] //)] 
253 : [(335,335: tag [21] //)] 
254 : [(332,332: tag [21] //)] 
255 : [(346,346: tag [21] //)] 
256 : [(342,342: tag [21] //)] 
257 : [(341,341: tag [21] //)] 
258 : [(364,364: tag [18] //)] 
259 : [(372,372: tag [18] //)] 
260 : [(377,377: tag [18] //)] 
261 : [(386,386: tag [18] //)] 
262 : [(383,383: tag [18] //)] 
263 : [(382,382: tag [18] //)] 
264 : [(388,388: tag [18] //)] 
265 : [(399,399: tag [18] //)] 
266 : [(397,397: tag [18] //)] 
267 : [(392,392: tag [18] //)] 
268 : [(393,393: tag [18] //)] 
269 : [(400,400: tag [18] //)] 
270 : [(401,401: tag [18] //)] 
271 : [(411,411: tag [18] //)] 
272 : [(409,409: tag [18] //)] 
273 : [(405,405: tag [18] //)] 
274 : [(406,406: tag [18] //)] 
275 : [(412,412: tag [18] //)] 
276 : [(413,413: tag [18] //)] 
277 : [(441,441: tag [18] //)] 
278 : [(445,445: tag [18] //)] 
279 : [(463,463: tag [18] //)] 
280 : [(465,465: tag [18] //)] 
281 : [(468,468: tag [18] //)] 
282 : [(470,470: tag [18] //)] 
283 : [(473,473: tag [18] //)] 
284 : [(475,475: tag [18] //)] 
285 : [(477,477: tag [18] //)] 
286 : [(478,478: tag [18] //)] 
287 : [(479,479: tag [18] //)] 
288 : [(480,480: tag [18] //)] 
289 : [(487,487: tag [18] //)] 
290 : [(488,488: tag [18] //)] 
291 : [(524,524: tag [18] //)] 
292 : [(525,525: tag [18] //)] 
293 : [(532,532: tag [18] //)] 
294 : [(533,533: tag [18] //)] 
295 : [(440,440: tag [18] //)] 
296 : [(448,448: tag [18] //)] 
297 : [(449,449: tag [18] //)] 
298 : [(451,451: tag [18] //)] 
299 : [(453,453: tag [18] //)] 
300 : [(454,454: tag [18] //)] 
301 : [(455,455: tag [18] //)] 
302 : [(456,456: tag [18] //)] 
303 : [(365,365: tag [18] //)] 
304 : [(359,359: tag [18] //)] 
305 : [(360,360: tag [18] //)] 
306 : [(361,361: tag [18] //)] 
307 : [(366,366: tag [18] //)] 
308 : [(367,367: tag [18] //)] 
309 : [(368,368: tag [18] //)] 
310 : [(358,358: tag [18] //)] 
311 : [(457,457: tag [18] //)] 
312 : [(356,356: tag [18] //)] 
313 : [(357,357: tag [18] //)] 
314 : [(458,458: tag [18] //)] 
315 : [(459,459: tag [18] //)] 
316 : [(450,450: tag [18] //)] 
317 : [(452,452: tag [18] //)] 
318 : [(460,460: tag [18] //)] 
319 : [(403,403: tag [18] //),(404,404: tag [18] //)] 
320 : [(461,461: tag [18] //)] 
321 : [(462,462: tag [18] //)] 
322 : [(467,467: tag [18] //)] 
323 : [(472,472: tag [18] //)] 
324 : [(511,511: tag [18] //),(537,537: tag [18] //),(556,556: tag [18] //),(565,565: tag [18] //),(492,492: tag [18] //),(569,569: tag [18] //),(536,536: tag [18] //),(444,444: tag [18] //),(510,510: tag [18] //),(491,491: tag [18] //),(568,568: tag [18] //),(566,566: tag [18] //),(555,555: tag [18] //),(443,443: tag [18] //)] 
325 : [(447,447: tag [18] //)] 
326 : [(485,485: tag [18] //)] 
327 : [(483,483: tag [18] //),(482,482: tag [18] //)] 
328 : [(486,486: tag [18] //)] 
329 : [(489,489: tag [18] //)] 
330 : [(490,490: tag [18] //)] 
331 : [(500,500: tag [18] //),(499,499: tag [18] //),(502,502: tag [18] //),(506,506: tag [18] //),(496,496: tag [18] //),(503,503: tag [18] //),(505,505: tag [18] //),(497,497: tag [18] //)] 
332 : [(504,504: tag [18] //),(498,498: tag [18] //),(501,501: tag [18] //),(495,495: tag [18] //)] 
333 : [(508,508: tag [18] //)] 
334 : [(509,509: tag [18] //)] 
335 : [(512,512: tag [18] //)] 
336 : [(513,513: tag [18] //)] 
337 : [(517,517: tag [18] //)] 
338 : [(515,515: tag [18] //)] 
339 : [(521,521: tag [18] //)] 
340 : [(523,523: tag [18] //)] 
341 : [(530,530: tag [18] //)] 
342 : [(528,528: tag [18] //),(527,527: tag [18] //)] 
343 : [(531,531: tag [18] //)] 
344 : [(534,534: tag [18] //)] 
345 : [(535,535: tag [18] //)] 
346 : [(541,541: tag [18] //),(550,550: tag [18] //),(547,547: tag [18] //),(545,545: tag [18] //),(551,551: tag [18] //),(544,544: tag [18] //),(542,542: tag [18] //),(548,548: tag [18] //)] 
347 : [(543,543: tag [18] //),(540,540: tag [18] //),(549,549: tag [18] //),(546,546: tag [18] //)] 
348 : [(553,553: tag [18] //)] 
349 : [(554,554: tag [18] //)] 
350 : [(557,557: tag [18] //)] 
351 : [(558,558: tag [18] //)] 
352 : [(559,559: tag [18] //)] 
353 : [(560,560: tag [18] //)] 
354 : [(561,561: tag [18] //)] 
355 : [(562,562: tag [18] //)] 
356 : [(563,563: tag [18] //)] 
357 : [(564,564: tag [18] //)] 
358 : [(567,567: tag [18] //)] 
359 : [(570,570: tag [18] //)] 
360 : [(571,571: tag [18] //)] 
361 : [(572,572: tag [18] //)] 
362 : [(415,415: tag [18] //)] 
363 : [(416,416: tag [18] //)] 
364 : [(573,573: tag [18] //)] 
365 : [(574,574: tag [18] //)] 
366 : [(575,575: tag [18] //)] 
367 : [(576,576: tag [18] //)] 
368 : [(484,484: tag [18] //)] 
369 : [(481,481: tag [18] //)] 
370 : [(493,493: tag [18] //)] 
371 : [(507,507: tag [18] //)] 
372 : [(494,494: tag [18] //)] 
373 : [(474,474: tag [18] //)] 
374 : [(476,476: tag [18] //)] 
375 : [(520,520: tag [18] //)] 
376 : [(518,518: tag [18] //)] 
377 : [(519,519: tag [18] //)] 
378 : [(514,514: tag [18] //)] 
379 : [(516,516: tag [18] //)] 
380 : [(529,529: tag [18] //)] 
381 : [(526,526: tag [18] //)] 
382 : [(538,538: tag [18] //)] 
383 : [(552,552: tag [18] //)] 
384 : [(539,539: tag [18] //)] 
385 : [(469,469: tag [18] //)] 
386 : [(471,471: tag [18] //)] 
387 : [(464,464: tag [18] //)] 
388 : [(466,466: tag [18] //)] 
389 : [(442,442: tag [18] //)] 
390 : [(446,446: tag [18] //)] 
391 : [(414,414: tag [18] //)] 
392 : [(417,417: tag [18] //)] 
393 : [(418,418: tag [18] //)] 
394 : [(419,419: tag [18] //)] 
395 : [(421,421: tag [18] //),(438,438: tag [18] //),(580,580: tag [18] //),(391,391: tag [18] //),(395,395: tag [18] //),(420,420: tag [18] //),(579,579: tag [18] //),(439,439: tag [18] //),(390,390: tag [18] //),(396,396: tag [18] //)] 
396 : [(435,435: tag [18] //)] 
397 : [(422,422: tag [18] //)] 
398 : [(436,436: tag [18] //)] 
399 : [(437,437: tag [18] //)] 
400 : [(577,577: tag [18] //)] 
401 : [(578,578: tag [18] //)] 
402 : [(402,402: tag [18] //)] 
403 : [(407,407: tag [18] //)] 
404 : [(408,408: tag [18] //)] 
405 : [(410,410: tag [18] //)] 
406 : [(581,581: tag [18] //)] 
407 : [(389,389: tag [18] //)] 
408 : [(394,394: tag [18] //)] 
409 : [(352,352: tag [21] //)] 
410 : [(676,676: tag [1] //)] 
411 : [(673,673: tag [1] //)] 
412 : [(619,619: tag [10] //)] 
413 : [(620,620: tag [10] //)] 
414 : [(611,611: tag [11] //)] 
415 : [(612,612: tag [11] //)] 
416 : [(617,617: tag [10] //)] 
417 : [(670,670: tag [1] //)] 
418 : [(654,654: tag [4] //)] 
419 : [(662,662: tag [4] //)] 
420 : [(336,336: tag [21] //)] 
421 : [(337,337: tag [21] //)] 
422 : [(333,333: tag [21] //)] 
423 : [(334,334: tag [21] //)] 
424 : [(329,329: tag [21] //)] 
425 : [(330,330: tag [21] //)] 
426 : [(331,331: tag [21] //)] 
427 : [(343,343: tag [21] //)] 
428 : [(602,602: tag [12] //)] 
429 : [(603,603: tag [12] //)] 
430 : [(594,594: tag [13] //)] 
431 : [(595,595: tag [13] //)] 
432 : [(597,597: tag [12] //)] 
433 : [(598,598: tag [12] //)] 
434 : [(599,599: tag [12] //)] 
435 : [(600,600: tag [12] //)] 
436 : [(601,601: tag [12] //)] 
437 : [(605,605: tag [12] //)] 
438 : [(659,659: tag [4] //)] 
439 : [(656,656: tag [4] //)] 
440 : [(653,653: tag [4] //)] 
441 : [(607,607: tag [12] //)] 
442 : [(640,640: tag [6] //)] 
443 : [(641,641: tag [6] //)] 
444 : [(632,632: tag [7] //)] 
445 : [(633,633: tag [7] //)] 
446 : [(638,638: tag [6] //)] 
447 : [(639,639: tag [6] //)] 
448 : [(646,646: tag [6] //)] 
449 : [(621,621: tag [10] //)] 
450 : [(614,614: tag [10] //)] 
451 : [(615,615: tag [10] //)] 
452 : [(616,616: tag [10] //)] 
453 : [(618,618: tag [10] //)] 
454 : [(622,622: tag [10] //)] 
455 : [(623,623: tag [10] //)] 
456 : [(624,624: tag [10] //)] 
457 : [(625,625: tag [10] //)] 
458 : [(626,626: tag [10] //)] 
459 : [(613,613: tag [10] //)] 
460 : [(610,610: tag [11] //)] 
461 : [(635,635: tag [6] //)] 
462 : [(636,636: tag [6] //)] 
463 : [(637,637: tag [6] //)] 
464 : [(643,643: tag [6] //)] 
465 : [(384,384: tag [18] //)] 
466 : [(385,385: tag [18] //)] 
467 : [(381,381: tag [18] //)] 
468 : [(387,387: tag [18] //)] 
469 : [(398,398: tag [18] //)] 
470 : [(582,582: tag [18] //)] 
471 : [(379,379: tag [18] //)] 
472 : [(355,355: tag [15] //)] 
473 : [(32,32: tag [14] //)] 
474 : [(33,33: tag [14] //)] 
475 : [(13,13: tag [14] //)] 
476 : [(350,350: tag [21] //)] 
477 : [(348,348: tag [21] //)] 
478 : [(630,630: tag [8] //)] 
479 : [(362,362: tag [18] //)] 
480 : [(642,642: tag [6] //)] 
481 : [(644,644: tag [6] //)] 
482 : [(645,645: tag [6] //)] 
483 : [(647,647: tag [6] //)] 
484 : [(634,634: tag [6] //)] 
485 : [(631,631: tag [7] //)] 
486 : [(586,586: tag [17] //)] 
487 : [(380,380: tag [18] //)] 
488 : [(375,375: tag [18] //)] 
489 : [(2,2: tag [14] //)] 
490 : [(6,6: tag [14] //)] 
491 : [(10,10: tag [14] //)] 
492 : [(14,14: tag [14] //)] 
493 : [(15,15: tag [14] //)] 
494 : [(16,16: tag [14] //)] 
495 : [(18,18: tag [14] //)] 
496 : [(588,588: tag [17] //)] 
497 : [(591,591: tag [16] //)] 
498 : [(344,344: tag [21] //)] 
499 : [(677,677: tag [1] //)] 
500 : [(674,674: tag [1] //)] 
501 : [(671,671: tag [1] //)] 
502 : [(668,668: tag [2] //)] 
503 : [(667,667: tag [2] //)] 
504 : [(657,657: tag [4] //)] 
505 : [(658,658: tag [4] //)] 
506 : [(649,649: tag [5] //)] 
507 : [(650,650: tag [5] //)] 
508 : [(655,655: tag [4] //)] 
509 : [(663,663: tag [4] //)] 
510 : [(652,652: tag [4] //)] 
511 : [(660,660: tag [4] //)] 
512 : [(608,608: tag [12] //)] 
513 : [(369,369: tag [18] //)] 
514 : [(345,345: tag [21] //)] 
515 : [(340,340: tag [21] //)] 
516 : [(349,349: tag [21] //)] 
517 : [(347,347: tag [21] //)] 
518 : [(339,339: tag [21] //)] 
519 : [(328,328: tag [21] //)] 
520 : [(327,327: tag [21] //)] 
521 : [(661,661: tag [4] //)] 
522 : [(664,664: tag [4] //)] 
523 : [(651,651: tag [4] //)] 
524 : [(363,363: tag [18] //)] 
525 : [(371,371: tag [18] //)] 
526 : [(584,584: tag [17] //)] 
527 : [(604,604: tag [12] //)] 
528 : [(606,606: tag [12] //)] 
529 : [(609,609: tag [12] //)] 
530 : [(596,596: tag [12] //)] 
531 : [(593,593: tag [13] //)] 
532 : [(376,376: tag [18] //)] 
533 : [(373,373: tag [18] //)] 
534 : [(648,648: tag [5] //)] 
535 : [(628,628: tag [9] //)] 
536 : [(627,627: tag [9] //)] 
537 : [(353,353: tag [19] //)] 
538 : [(589,589: tag [17] //)] 
539 : [(378,378: tag [18] //)] 
540 : [(678,678: tag [1] //)] 
541 : [(675,675: tag [1] //)] 
542 : [(672,672: tag [1] //)] 
543 : [(585,585: tag [17] //)] 
544 : [(669,669: tag [1] //)] 
545 : [(351,351: tag [21] //)] 
546 : [(374,374: tag [18] //)] 
547 : [(17,17: tag [14] //)] 
548 : [(587,587: tag [17] //)] 
549 : [(590,590: tag [16] //)] 
550 : [(354,354: tag [19] //)] 
551 : [(592,592: tag [16] //)] 
552 : [(629,629: tag [8] //)] 
553 : [(370,370: tag [18] //)] 
554 : [(583,583: tag [17] //)] 

Using Quals: 
qualif ALen(v:Data.Text.Array.Array , ~I:int):(~I = alen([v]))

qualif ALen0(v:int, ~A:Data.Text.Array.Array ):(v = alen([~A]))

qualif ALenLE(v:int, ~A:Data.Text.Array.Array ):(v <= alen([~A]))

qualif Auto(VV:FAppTy (GHC.Ptr.Ptr ) int, ~A0:FAppTy (GHC.Ptr.Ptr ) int):(pbase([VV]) = pbase([~A0]))

qualif Auto0(VV:GHC.Types.Char , ~A0:int, ~A1:FAppTy (Data.Text.Array.MArray ) @(0)):((ord([VV]) >= 65536) => && 
[ (0 <= ~A0)
; (~A0 <= (malen([~A1]) - 2))])

qualif Auto1(VV:FAppTy (GHC.Ptr.Ptr ) int, ~A0:FAppTy (Data.Text.Array.MArray ) @(0)):(deref([VV]) < malen([~A0]))

qualif Auto10(VV:int, ~A0:FAppTy (GHC.Ptr.Ptr ) @(0)):(VV = plen([~A0]))

qualif Auto11(VV:FAppTy (GHC.Ptr.Ptr ) int, ~A0:FAppTy (Data.Text.Array.MArray ) @(0)):(deref([VV]) <= malen([~A0]))

qualif Auto2(VV:FAppTy (GHC.Ptr.Ptr ) int, ~A0:FAppTy (GHC.Ptr.Ptr ) int):(plen([~A0]) <= plen([VV]))

qualif Auto3(VV:FAppTy (GHC.Ptr.Ptr ) int):(0 <= deref([VV]))

qualif Auto4(VV:int):(VV >= 0)

qualif Auto5(VV:Data.ByteString.Internal.ByteString , ~A0:Data.Text.Internal.Text ):((tlen([~A0]) > 0) => (bLength([VV]) > 0))

qualif Auto6(VV:GHC.Types.Char , ~A0:int, ~A1:FAppTy (Data.Text.Array.MArray ) @(0)):((ord([VV]) < 65536) => && 
[ (0 <= ~A0)
; (~A0 <= (malen([~A1]) - 1))])

qualif Auto7(VV:FAppTy (GHC.Ptr.Ptr ) int, ~A0:int):(~A0 <= deref([VV]))

qualif Auto8(VV:FAppTy (GHC.Ptr.Ptr ) int):(0 <= plen([VV]))

qualif Auto9(VV:FAppTy (GHC.Ptr.Ptr ) int, ~A0:FAppTy (GHC.Ptr.Ptr ) int):(plen([VV]) <= plen([~A0]))

qualif BlenEq(v:int, ~X:Data.ByteString.Internal.ByteString ):(v = bLength([~X]))

qualif Bot(v:int):(0 = 1)
qualif Bot0(v:bool):(0 = 1)

qualif Bot1(v:@(0)):(0 = 1)
qualif Bot2(v:obj):(0 = 1)

qualif Cmp(v:@(0), ~A:@(0)):(v = ~A)
qualif Cmp0(v:@(0), ~A:@(0)):(v <= ~A)

qualif Cmp1(v:@(0), ~A:@(0)):(v >= ~A)
qualif Cmp2(v:@(0), ~A:@(0)):(v < ~A)

qualif Cmp3(v:@(0), ~A:@(0)):(v != ~A)
qualif Cmp4(v:@(0), ~A:@(0)):(v > ~A)

qualif CmpLen(v:FAppTy (List ) @(0), ~A:FAppTy (List ) @(1)):(len([v]) < len([~A]))

qualif CmpLen0(v:FAppTy (List ) @(0), ~A:FAppTy (List ) @(1)):(len([v]) >= len([~A]))

qualif CmpLen1(v:FAppTy (List ) @(0), ~A:FAppTy (List ) @(1)):(len([v]) <= len([~A]))

qualif CmpLen2(v:FAppTy (List ) @(0), ~A:FAppTy (List ) @(1)):(len([v]) = len([~A]))

qualif CmpLen3(v:FAppTy (List ) @(0), ~A:FAppTy (List ) @(1)):(len([v]) > len([~A]))

qualif CmpZ(v:@(0)):(v = 0)
qualif CmpZ0(v:@(0)):(v <= 0)

qualif CmpZ1(v:@(0)):(v != 0)
qualif CmpZ2(v:@(0)):(v > 0)

qualif CmpZ3(v:@(0)):(v < 0)
qualif CmpZ4(v:@(0)):(v >= 0)

qualif Decr(v:int, ~X:int, ~Y:int):(v = (~X - ~Y))

qualif Diff(v:int, ~D:int, ~L:int):(v = (~L - ~D))

qualif Ensure(v:FAppTy (GHC.ForeignPtr.ForeignPtr ) @(0), ~X:int):(~X <= fplen([v]))

qualif Ensure0(v:FAppTy (GHC.Ptr.Ptr ) @(0), ~X:int, ~Y:int, ~Z:int):((~X + ~Y) <= ~Z)

qualif Ensure1(v:FAppTy (GHC.Ptr.Ptr ) @(0), ~X:int, ~Y:int):((~X + ~Y) <= plen([v]))

qualif EqFPLen(v:@(0), ~X:FAppTy (GHC.ForeignPtr.ForeignPtr ) @(1)):(v = fplen([~X]))

qualif EqFPlen(v:FAppTy (GHC.ForeignPtr.ForeignPtr ) @(0), ~N:int):(fplen([v]) = ~N)

qualif EqLen(v:int, ~A:FAppTy (List ) @(0)):(v = len([~A]))

qualif EqPLen(v:FAppTy (GHC.Ptr.Ptr ) @(0), ~X:FAppTy (GHC.ForeignPtr.ForeignPtr ) @(1)):(plen([v]) = fplen([~X]))

qualif EqPLen0(v:FAppTy (GHC.Ptr.Ptr ) @(0), ~L:int):(plen([v]) = ~L)

qualif EqPLen1(v:@(0), ~X:FAppTy (GHC.Ptr.Ptr ) @(1)):(v = plen([~X]))

qualif EqPLen2(v:FAppTy (GHC.ForeignPtr.ForeignPtr ) @(0), ~X:FAppTy (GHC.Ptr.Ptr ) @(1)):(fplen([v]) = plen([~X]))

qualif FPLenPos(v:FAppTy (GHC.ForeignPtr.ForeignPtr ) @(0)):(0 <= fplen([v]))

qualif False(v:bool):(~ ((Bexp v)))

qualif False1(v:GHC.Types.Bool ):(~ (Prop(v)))

qualif FilterLoop(v:FAppTy (GHC.Ptr.Ptr ) @(0), ~F:FAppTy (GHC.Ptr.Ptr ) @(0), ~T:FAppTy (GHC.Ptr.Ptr ) @(0)):(plen([~T]) >= (plen([~F]) - plen([v])))

qualif FindIndices(v:Data.ByteString.Internal.ByteString , ~P:Data.ByteString.Internal.ByteString , ~N:int):(bLength([v]) = (bLength([~P]) - ~N))

qualif Foo(v:@(0), ~A:FAppTy (Data.Text.Array.MArray ) @(1)):(snd([v]) <= malen([~A]))

qualif Foo0(v:int):(v >= 4)
qualif Foo1(v:int):(v >= -1)

qualif Foo2(v:@(0), ~A:Data.Text.Array.Array ):(snd([v]) <= alen([~A]))

qualif FreezeMArr(v:Data.Text.Array.Array , ~Ma:FAppTy (Data.Text.Array.MArray ) @(0)):(alen([v]) = malen([~Ma]))

qualif GE(v:int, ~O:int, ~X:int):(v >= (~O - ~X))

qualif GE0(v:FAppTy (GHC.Ptr.Ptr ) @(0), ~P:FAppTy (GHC.Ptr.Ptr ) @(0), ~O:int, ~X:int):((plen([~P]) - plen([v])) = (~O - ~X))

qualif IsEmp(v:GHC.Types.Bool , ~A:FAppTy (List ) @(0)):(Prop(v) <=> (len([~A]) > 0))

qualif IsEmp0(v:GHC.Types.Bool , ~A:FAppTy (List ) @(0)):(Prop(v) <=> (len([~A]) = 0))

qualif IsKnown(v:Data.Text.Fusion.Size.Size ):(~ (isUnknown(v)))

qualif IsUnknown(v:Data.Text.Fusion.Size.Size ):isUnknown(v)

qualif IterD(v:int, ~I:Data.Text.Unsafe.Iter ):(v = iter_d([~I]))

qualif LTEPlus(v:int, ~A:int, ~B:int):((v + ~A) <= ~B)

qualif LTPLen(v:int, ~P:FAppTy (GHC.Ptr.Ptr ) @(0)):(v < plen([~P]))

qualif LTPlus(v:int, ~A:int, ~B:int):(v < (~A + ~B))

qualif LeDiff(v:@(0), ~X:@(0), ~Y:@(0)):(v <= (~X - ~Y))

qualif LePlusOne(v:int, ~X:int):(v <= (~X + 1))

qualif LenAcc(v:int, ~A:FAppTy (List ) @(0), ~B:int):(v = (len([~A]) + ~B))

qualif LenDiff(v:FAppTy (List ) @(0), ~A:int):(len([v]) = (~A + 1))

qualif LenDiff0(v:FAppTy (List ) @(0), ~A:int):(len([v]) = (~A - 1))

qualif LenDiff1(v:FAppTy (List ) @(0), ~I:int, ~L:int):(len([v]) = (~L - ~I))

qualif LenEq(v:FAppTy (List ) @(0), ~A:int):(~A = len([v]))

qualif ListZ(v:FAppTy (List ) @(0)):(len([v]) > 0)

qualif ListZ0(v:FAppTy (List ) @(0)):(len([v]) >= 0)

qualif ListZ1(v:FAppTy (List ) @(0)):(len([v]) = 0)

qualif MALen(v:int, ~A:FAppTy (Data.Text.Array.MArray ) @(0)):(v = malen([~A]))

qualif MALen0(v:FAppTy (Data.Text.Array.MArray ) @(0), ~I:int):(~I = malen([v]))

qualif MALenLE(v:int, ~A:FAppTy (Data.Text.Array.MArray ) @(0)):(v <= malen([~A]))

qualif MinTLength(v:Data.Text.Internal.Text , ~N:int, ~T:Data.Text.Internal.Text ):(tlength([v]) = ((tlength([~T]) > ~N) ? ~N : tlength([~T])))

qualif One(v:int):(v = 1)
qualif OneC(v:GHC.Types.Char ):(ord([v]) < 65536)

qualif Ord(v:int, ~I:int, ~X:GHC.Types.Char ):&& [ ((ord([~X]) < 65536) => (v = ~I))
                                                 ; ((ord([~X]) >= 65536) => (v = (~I + 1)))]

qualif Ord0(v:int, ~X:GHC.Types.Char ):&& [ ((ord([~X]) < 65536) => (v = 0))
                                          ; ((ord([~X]) >= 65536) => (v = 1))]

qualif Ord1(v:GHC.Types.Char , ~I:int):&& [ ((ord([x]) < 65536) => (v >= 0))
                                          ; ((ord([x]) >= 65536) => (v >= 1))]

qualif PBaseEq(v:FAppTy (GHC.Ptr.Ptr ) @(0), ~P:FAppTy (GHC.Ptr.Ptr ) @(1)):(pbase([v]) = pbase([~P]))

qualif PLLen(v:@(0), ~P:@(1)):(len([v]) <= plen([~P]))

qualif PLenCmp(v:FAppTy (GHC.Ptr.Ptr ) @(0), ~P:FAppTy (GHC.Ptr.Ptr ) @(1)):(plen([v]) >= plen([~P]))

qualif PLenCmp0(v:FAppTy (GHC.Ptr.Ptr ) @(0), ~P:FAppTy (GHC.Ptr.Ptr ) @(1)):(plen([~P]) >= plen([v]))

qualif PLenPos(v:FAppTy (GHC.Ptr.Ptr ) @(0)):(0 <= plen([v]))

qualif PSnd(v:@(0), ~X:@(1)):(v = psnd([~X]))

qualif PValid(v:FAppTy (GHC.Ptr.Ptr ) int, ~A:FAppTy (Data.Text.Array.MArray ) @(0)):&& 
[ (deref([v]) >= 0)
; (deref([v]) < malen([~A]))]

qualif PValid0(v:int, ~P:FAppTy (GHC.Ptr.Ptr ) @(0)):(v <= plen([~P]))

qualif Papp(v:@(0), ~P:FAppTy (Pred ) @(0)):papp1(~P, v)

qualif Papp2(v:@(0), ~X:@(1), ~P:FAppTy (FAppTy (Pred ) @(0)) @(1)):papp2(~P, v, ~X)

qualif PlenEq(v:FAppTy (GHC.Ptr.Ptr ) @(0), ~X:int):(~X <= plen([v]))

qualif PlusOne(v:@(0), ~X:@(0)):(v = (~X + 1))

qualif PlusOnePos(v:int):(0 <= (v + 1))

qualif ReverseIter(v:int, ~I:int, ~T:Data.Text.Internal.Text ):&& [ (((~I + 1) + v) >= 0)
                                                                  ; (numchars([tarr([~T]); toff([~T]); ((~I + 1) + v)]) = (numchars([tarr([~T]); toff([~T]); (~I + 1)]) - 1))
                                                                  ; (numchars([tarr([~T]); toff([~T]); ((~I + 1) + v)]) >= -1)
                                                                  ; (((~I + 1) + v) < (~I + 1))]

qualif SumLensEq(v:FAppTy (List ) (FAppTy (List ) @(0)), ~X:FAppTy (List ) @(0)):(sumLens([v]) = len([~X]))

qualif TLenDiff(v:Data.Text.Internal.Text , ~T1:Data.Text.Internal.Text , ~T2:Data.Text.Internal.Text ):(tlen([v]) = (tlen([~T1]) - tlen([~T2])))

qualif TLenLe(v:Data.Text.Internal.Text , ~T:Data.Text.Internal.Text ):(tlen([v]) <= tlen([~T]))

qualif TLengthAcc(v:int, ~T:Data.Text.Internal.Text , ~L:int):(v = (tlength([~T]) + ~L))

qualif TLengthDiff(v:Data.Text.Internal.Text , ~T1:Data.Text.Internal.Text , ~T2:Data.Text.Internal.Text ):(tlength([v]) = (tlength([~T1]) - tlength([~T2])))

qualif TLengthEq(v:Data.Text.Internal.Text , ~T:Data.Text.Internal.Text ):(tlength([v]) = tlength([~T]))

qualif TLengthLe(v:Data.Text.Internal.Text , ~T:Data.Text.Internal.Text ):(tlength([v]) <= tlength([~T]))

qualif TextNE(v:Data.Text.Internal.Text ):(tlength([v]) > 0)

qualif TextNE0(v:Data.Text.Internal.Text ):(tlen([v]) > 0)

qualif True(v:bool):(Bexp v)
qualif True1(v:GHC.Types.Bool ):Prop(v)

qualif TwoC(v:GHC.Types.Char ):(ord([v]) >= 65536)
BEGIN: Qualifier Instantiation
.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.
.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.
.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.
.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.
.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.
.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.
.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./.-.\.|./
DONE: Qualifier Instantiation

DONE: Qualifier Instantiation: Built Map 

USING z3 bindings 
Distinct Constants: GHC.Types.True#6u, GHC.Types.False#68 

Pushing axiom (distinct z3v1 z3v2)

USING z3 bindings 
Distinct Constants: GHC.Types.True#6u, GHC.Types.False#68 

Pushing axiom (distinct z3v172 z3v173)

BEGIN: refine_sort

END: refine_sort

DONE: Dom.create

BEGIN: PP.validate

END: PP.validate
DONE: Solve.create
Fixpoint: Solving 
Fixpoint: Validating Initial Solution 
ctag 1: binds=165, cbinds=51, kbinds=1, ebinds=113 
ctag 2: binds=165, cbinds=51, kbinds=1, ebinds=113 
ctag 3: binds=166, cbinds=52, kbinds=1, ebinds=113 
ctag 4: binds=166, cbinds=51, kbinds=2, ebinds=113 
ctag 5: binds=166, cbinds=51, kbinds=2, ebinds=113 
ctag 6: binds=164, cbinds=51, kbinds=1, ebinds=112 
ctag 7: binds=165, cbinds=51, kbinds=2, ebinds=112 
ctag 8: binds=165, cbinds=51, kbinds=2, ebinds=112 
ctag 9: binds=166, cbinds=51, kbinds=3, ebinds=112 
ctag 10: binds=165, cbinds=52, kbinds=1, ebinds=112 
ctag 11: binds=167, cbinds=54, kbinds=1, ebinds=112 
ctag 12: binds=167, cbinds=54, kbinds=1, ebinds=112 
ctag 13: binds=163, cbinds=51, kbinds=1, ebinds=111 
ctag 14: binds=163, cbinds=51, kbinds=1, ebinds=111 
ctag 15: binds=163, cbinds=51, kbinds=1, ebinds=111 
ctag 16: binds=161, cbinds=50, kbinds=1, ebinds=110 
ctag 17: binds=159, cbinds=49, kbinds=0, ebinds=110 
ctag 18: binds=159, cbinds=49, kbinds=0, ebinds=110 
ctag 19: binds=163, cbinds=47, kbinds=4, ebinds=112 
ctag 20: binds=164, cbinds=47, kbinds=5, ebinds=112 
ctag 21: binds=163, cbinds=47, kbinds=4, ebinds=112 
ctag 22: binds=164, cbinds=47, kbinds=5, ebinds=112 
ctag 23: binds=164, cbinds=47, kbinds=5, ebinds=112 
ctag 24: binds=164, cbinds=47, kbinds=5, ebinds=112 
ctag 25: binds=165, cbinds=47, kbinds=6, ebinds=112 
ctag 26: binds=163, cbinds=47, kbinds=4, ebinds=112 
ctag 27: binds=165, cbinds=49, kbinds=4, ebinds=112 
ctag 28: binds=165, cbinds=49, kbinds=4, ebinds=112 
ctag 29: binds=166, cbinds=49, kbinds=5, ebinds=112 
ctag 30: binds=164, cbinds=47, kbinds=4, ebinds=113 
ctag 31: binds=165, cbinds=47, kbinds=4, ebinds=114 
ctag 32: binds=162, cbinds=47, kbinds=4, ebinds=111 
ctag 33: binds=162, cbinds=47, kbinds=4, ebinds=111 
ctag 34: binds=163, cbinds=48, kbinds=5, ebinds=110 
ctag 35: binds=163, cbinds=48, kbinds=5, ebinds=110 
ctag 36: binds=166, cbinds=49, kbinds=7, ebinds=110 
ctag 37: binds=167, cbinds=49, kbinds=8, ebinds=110 
ctag 38: binds=166, cbinds=49, kbinds=7, ebinds=110 
ctag 39: binds=166, cbinds=49, kbinds=7, ebinds=110 
ctag 40: binds=166, cbinds=49, kbinds=7, ebinds=110 
ctag 41: binds=187, cbinds=63, kbinds=12, ebinds=112 
ctag 42: binds=188, cbinds=63, kbinds=12, ebinds=113 
ctag 43: binds=187, cbinds=63, kbinds=12, ebinds=112 
ctag 44: binds=183, cbinds=59, kbinds=12, ebinds=112 
ctag 45: binds=183, cbinds=59, kbinds=12, ebinds=112 
ctag 46: binds=185, cbinds=60, kbinds=13, ebinds=112 
ctag 47: binds=194, cbinds=67, kbinds=12, ebinds=115 
ctag 48: binds=195, cbinds=67, kbinds=13, ebinds=115 
ctag 49: binds=194, cbinds=67, kbinds=12, ebinds=115 
ctag 50: binds=195, cbinds=67, kbinds=13, ebinds=115 
ctag 51: binds=195, cbinds=67, kbinds=13, ebinds=115 
ctag 52: binds=195, cbinds=67, kbinds=13, ebinds=115 
ctag 53: binds=196, cbinds=67, kbinds=14, ebinds=115 
ctag 54: binds=194, cbinds=67, kbinds=12, ebinds=115 
ctag 55: binds=195, cbinds=67, kbinds=13, ebinds=115 
ctag 56: binds=195, cbinds=67, kbinds=13, ebinds=115 
ctag 57: binds=195, cbinds=67, kbinds=13, ebinds=115 
ctag 58: binds=196, cbinds=67, kbinds=14, ebinds=115 
ctag 59: binds=195, cbinds=67, kbinds=12, ebinds=116 
ctag 60: binds=196, cbinds=67, kbinds=13, ebinds=116 
ctag 61: binds=211, cbinds=81, kbinds=14, ebinds=116 
ctag 62: binds=212, cbinds=81, kbinds=14, ebinds=117 
ctag 63: binds=213, cbinds=82, kbinds=15, ebinds=116 
ctag 64: binds=212, cbinds=82, kbinds=14, ebinds=116 
ctag 65: binds=210, cbinds=81, kbinds=13, ebinds=116 
ctag 66: binds=213, cbinds=84, kbinds=13, ebinds=116 
ctag 67: binds=213, cbinds=84, kbinds=13, ebinds=116 
ctag 68: binds=210, cbinds=81, kbinds=13, ebinds=116 
ctag 69: binds=210, cbinds=81, kbinds=13, ebinds=116 
ctag 70: binds=208, cbinds=79, kbinds=13, ebinds=116 
ctag 71: binds=208, cbinds=79, kbinds=13, ebinds=116 
ctag 72: binds=210, cbinds=80, kbinds=14, ebinds=116 
ctag 73: binds=210, cbinds=80, kbinds=14, ebinds=116 
ctag 74: binds=222, cbinds=86, kbinds=18, ebinds=118 
ctag 75: binds=223, cbinds=86, kbinds=19, ebinds=118 
ctag 76: binds=222, cbinds=86, kbinds=18, ebinds=118 
ctag 77: binds=222, cbinds=86, kbinds=18, ebinds=118 
ctag 78: binds=222, cbinds=86, kbinds=18, ebinds=118 
ctag 79: binds=220, cbinds=84, kbinds=18, ebinds=118 
ctag 80: binds=222, cbinds=85, kbinds=19, ebinds=118 
ctag 81: binds=222, cbinds=85, kbinds=19, ebinds=118 
ctag 82: binds=220, cbinds=84, kbinds=18, ebinds=118 
ctag 83: binds=224, cbinds=87, kbinds=19, ebinds=118 
ctag 84: binds=224, cbinds=87, kbinds=19, ebinds=118 
ctag 85: binds=230, cbinds=93, kbinds=18, ebinds=119 
ctag 86: binds=231, cbinds=93, kbinds=19, ebinds=119 
ctag 87: binds=230, cbinds=93, kbinds=18, ebinds=119 
ctag 88: binds=230, cbinds=93, kbinds=18, ebinds=119 
ctag 89: binds=230, cbinds=93, kbinds=18, ebinds=119 
ctag 90: binds=228, cbinds=91, kbinds=18, ebinds=119 
ctag 91: binds=230, cbinds=92, kbinds=19, ebinds=119 
ctag 92: binds=230, cbinds=92, kbinds=19, ebinds=119 
ctag 93: binds=228, cbinds=91, kbinds=18, ebinds=119 
ctag 94: binds=232, cbinds=94, kbinds=19, ebinds=119 
ctag 95: binds=232, cbinds=94, kbinds=19, ebinds=119 
ctag 96: binds=238, cbinds=99, kbinds=19, ebinds=120 
ctag 97: binds=239, cbinds=99, kbinds=19, ebinds=121 
ctag 98: binds=240, cbinds=100, kbinds=20, ebinds=120 
ctag 99: binds=239, cbinds=100, kbinds=19, ebinds=120 
ctag 100: binds=237, cbinds=99, kbinds=18, ebinds=120 
ctag 101: binds=240, cbinds=102, kbinds=18, ebinds=120 
ctag 102: binds=240, cbinds=102, kbinds=18, ebinds=120 
ctag 103: binds=237, cbinds=99, kbinds=18, ebinds=120 
ctag 104: binds=237, cbinds=99, kbinds=18, ebinds=120 
ctag 105: binds=235, cbinds=97, kbinds=18, ebinds=120 
ctag 106: binds=235, cbinds=97, kbinds=18, ebinds=120 
ctag 107: binds=239, cbinds=100, kbinds=19, ebinds=120 
ctag 108: binds=239, cbinds=100, kbinds=19, ebinds=120 
ctag 109: binds=229, cbinds=92, kbinds=18, ebinds=119 
ctag 110: binds=233, cbinds=95, kbinds=19, ebinds=119 
ctag 111: binds=223, cbinds=86, kbinds=18, ebinds=119 
ctag 112: binds=223, cbinds=86, kbinds=18, ebinds=119 
ctag 113: binds=220, cbinds=84, kbinds=18, ebinds=118 
ctag 114: binds=214, cbinds=78, kbinds=18, ebinds=118 
ctag 115: binds=217, cbinds=81, kbinds=18, ebinds=118 
ctag 116: binds=217, cbinds=81, kbinds=18, ebinds=118 
ctag 117: binds=214, cbinds=78, kbinds=18, ebinds=118 
ctag 118: binds=218, cbinds=81, kbinds=19, ebinds=118 
ctag 119: binds=218, cbinds=81, kbinds=19, ebinds=118 
ctag 120: binds=213, cbinds=77, kbinds=18, ebinds=118 
ctag 121: binds=213, cbinds=77, kbinds=18, ebinds=118 
ctag 122: binds=198, cbinds=70, kbinds=13, ebinds=115 
ctag 123: binds=198, cbinds=70, kbinds=13, ebinds=115 
ctag 124: binds=200, cbinds=71, kbinds=14, ebinds=115 
ctag 125: binds=200, cbinds=71, kbinds=14, ebinds=115 
ctag 126: binds=197, cbinds=70, kbinds=13, ebinds=114 
ctag 127: binds=200, cbinds=73, kbinds=13, ebinds=114 
ctag 128: binds=194, cbinds=67, kbinds=13, ebinds=114 
ctag 129: binds=194, cbinds=67, kbinds=13, ebinds=114 
ctag 130: binds=196, cbinds=68, kbinds=14, ebinds=114 
ctag 131: binds=196, cbinds=68, kbinds=14, ebinds=114 
ctag 132: binds=192, cbinds=67, kbinds=12, ebinds=113 
ctag 133: binds=201, cbinds=74, kbinds=12, ebinds=115 
ctag 134: binds=202, cbinds=74, kbinds=13, ebinds=115 
ctag 135: binds=201, cbinds=74, kbinds=12, ebinds=115 
ctag 136: binds=202, cbinds=74, kbinds=13, ebinds=115 
ctag 137: binds=202, cbinds=74, kbinds=13, ebinds=115 
ctag 138: binds=202, cbinds=74, kbinds=13, ebinds=115 
ctag 139: binds=203, cbinds=74, kbinds=14, ebinds=115 
ctag 140: binds=201, cbinds=74, kbinds=12, ebinds=115 
ctag 141: binds=202, cbinds=74, kbinds=13, ebinds=115 
ctag 142: binds=202, cbinds=74, kbinds=13, ebinds=115 
ctag 143: binds=202, cbinds=74, kbinds=13, ebinds=115 
ctag 144: binds=203, cbinds=74, kbinds=14, ebinds=115 
ctag 145: binds=202, cbinds=74, kbinds=12, ebinds=116 
ctag 146: binds=203, cbinds=74, kbinds=13, ebinds=116 
ctag 147: binds=227, cbinds=92, kbinds=16, ebinds=119 
ctag 148: binds=228, cbinds=92, kbinds=16, ebinds=120 
ctag 149: binds=228, cbinds=93, kbinds=16, ebinds=119 
ctag 150: binds=229, cbinds=93, kbinds=17, ebinds=119 
ctag 151: binds=228, cbinds=93, kbinds=17, ebinds=118 
ctag 152: binds=228, cbinds=93, kbinds=17, ebinds=118 
ctag 153: binds=225, cbinds=92, kbinds=15, ebinds=118 
ctag 154: binds=225, cbinds=92, kbinds=15, ebinds=118 
ctag 155: binds=225, cbinds=92, kbinds=15, ebinds=118 
ctag 156: binds=217, cbinds=85, kbinds=14, ebinds=118 
ctag 157: binds=217, cbinds=85, kbinds=14, ebinds=118 
ctag 158: binds=218, cbinds=85, kbinds=15, ebinds=118 
ctag 159: binds=219, cbinds=85, kbinds=16, ebinds=118 
ctag 160: binds=210, cbinds=80, kbinds=14, ebinds=116 
ctag 161: binds=207, cbinds=78, kbinds=13, ebinds=116 
ctag 162: binds=207, cbinds=78, kbinds=13, ebinds=116 
ctag 163: binds=208, cbinds=78, kbinds=14, ebinds=116 
ctag 164: binds=209, cbinds=78, kbinds=15, ebinds=116 
ctag 165: binds=201, cbinds=74, kbinds=13, ebinds=114 
ctag 166: binds=199, cbinds=74, kbinds=12, ebinds=113 
ctag 167: binds=212, cbinds=85, kbinds=12, ebinds=115 
ctag 168: binds=213, cbinds=85, kbinds=13, ebinds=115 
ctag 169: binds=212, cbinds=85, kbinds=12, ebinds=115 
ctag 170: binds=213, cbinds=85, kbinds=13, ebinds=115 
ctag 171: binds=213, cbinds=85, kbinds=13, ebinds=115 
ctag 172: binds=213, cbinds=85, kbinds=13, ebinds=115 
ctag 173: binds=214, cbinds=85, kbinds=14, ebinds=115 
ctag 174: binds=212, cbinds=85, kbinds=12, ebinds=115 
ctag 175: binds=213, cbinds=85, kbinds=13, ebinds=115 
ctag 176: binds=213, cbinds=85, kbinds=13, ebinds=115 
ctag 177: binds=213, cbinds=85, kbinds=13, ebinds=115 
ctag 178: binds=214, cbinds=85, kbinds=14, ebinds=115 
ctag 179: binds=213, cbinds=85, kbinds=12, ebinds=116 
ctag 180: binds=214, cbinds=85, kbinds=13, ebinds=116 
ctag 181: binds=262, cbinds=114, kbinds=19, ebinds=129 
ctag 182: binds=263, cbinds=114, kbinds=19, ebinds=130 
ctag 183: binds=263, cbinds=115, kbinds=19, ebinds=129 
ctag 184: binds=264, cbinds=115, kbinds=20, ebinds=129 
ctag 185: binds=262, cbinds=115, kbinds=19, ebinds=128 
ctag 186: binds=263, cbinds=115, kbinds=20, ebinds=128 
ctag 187: binds=261, cbinds=115, kbinds=19, ebinds=127 
ctag 188: binds=262, cbinds=115, kbinds=20, ebinds=127 
ctag 189: binds=261, cbinds=115, kbinds=20, ebinds=126 
ctag 190: binds=261, cbinds=115, kbinds=20, ebinds=126 
ctag 191: binds=258, cbinds=114, kbinds=18, ebinds=126 
ctag 192: binds=258, cbinds=114, kbinds=18, ebinds=126 
ctag 193: binds=258, cbinds=114, kbinds=18, ebinds=126 
ctag 194: binds=250, cbinds=107, kbinds=17, ebinds=126 
ctag 195: binds=250, cbinds=107, kbinds=17, ebinds=126 
ctag 196: binds=251, cbinds=107, kbinds=18, ebinds=126 
ctag 197: binds=252, cbinds=107, kbinds=19, ebinds=126 
ctag 198: binds=245, cbinds=104, kbinds=17, ebinds=124 
ctag 199: binds=242, cbinds=102, kbinds=16, ebinds=124 
ctag 200: binds=242, cbinds=102, kbinds=16, ebinds=124 
ctag 201: binds=243, cbinds=102, kbinds=17, ebinds=124 
ctag 202: binds=244, cbinds=102, kbinds=18, ebinds=124 
ctag 203: binds=235, cbinds=98, kbinds=16, ebinds=121 
ctag 204: binds=232, cbinds=96, kbinds=15, ebinds=121 
ctag 205: binds=232, cbinds=96, kbinds=15, ebinds=121 
ctag 206: binds=233, cbinds=96, kbinds=16, ebinds=121 
ctag 207: binds=234, cbinds=96, kbinds=17, ebinds=121 
ctag 208: binds=225, cbinds=92, kbinds=15, ebinds=118 
ctag 209: binds=222, cbinds=90, kbinds=14, ebinds=118 
ctag 210: binds=222, cbinds=90, kbinds=14, ebinds=118 
ctag 211: binds=223, cbinds=90, kbinds=15, ebinds=118 
ctag 212: binds=224, cbinds=90, kbinds=16, ebinds=118 
ctag 213: binds=217, cbinds=87, kbinds=14, ebinds=116 
ctag 214: binds=216, cbinds=87, kbinds=13, ebinds=116 
ctag 215: binds=217, cbinds=87, kbinds=14, ebinds=116 
ctag 216: binds=214, cbinds=87, kbinds=13, ebinds=114 
ctag 217: binds=210, cbinds=85, kbinds=12, ebinds=113 
ctag 218: binds=212, cbinds=85, kbinds=12, ebinds=115 
ctag 219: binds=213, cbinds=85, kbinds=13, ebinds=115 
ctag 220: binds=212, cbinds=85, kbinds=12, ebinds=115 
ctag 221: binds=213, cbinds=85, kbinds=13, ebinds=115 
ctag 222: binds=213, cbinds=85, kbinds=13, ebinds=115 
ctag 223: binds=213, cbinds=85, kbinds=13, ebinds=115 
ctag 224: binds=214, cbinds=85, kbinds=14, ebinds=115 
ctag 225: binds=212, cbinds=85, kbinds=12, ebinds=115 
ctag 226: binds=213, cbinds=85, kbinds=13, ebinds=115 
ctag 227: binds=213, cbinds=85, kbinds=13, ebinds=115 
ctag 228: binds=213, cbinds=85, kbinds=13, ebinds=115 
ctag 229: binds=214, cbinds=85, kbinds=14, ebinds=115 
ctag 230: binds=213, cbinds=85, kbinds=12, ebinds=116 
ctag 231: binds=214, cbinds=85, kbinds=13, ebinds=116 
ctag 232: binds=251, cbinds=111, kbinds=17, ebinds=123 
ctag 233: binds=252, cbinds=111, kbinds=17, ebinds=124 
ctag 234: binds=252, cbinds=112, kbinds=17, ebinds=123 
ctag 235: binds=253, cbinds=112, kbinds=18, ebinds=123 
ctag 236: binds=251, cbinds=112, kbinds=17, ebinds=122 
ctag 237: binds=252, cbinds=112, kbinds=18, ebinds=122 
ctag 238: binds=251, cbinds=112, kbinds=18, ebinds=121 
ctag 239: binds=251, cbinds=112, kbinds=18, ebinds=121 
ctag 240: binds=248, cbinds=111, kbinds=16, ebinds=121 
ctag 241: binds=248, cbinds=111, kbinds=16, ebinds=121 
ctag 242: binds=248, cbinds=111, kbinds=16, ebinds=121 
ctag 243: binds=240, cbinds=104, kbinds=15, ebinds=121 
ctag 244: binds=240, cbinds=104, kbinds=15, ebinds=121 
ctag 245: binds=241, cbinds=104, kbinds=16, ebinds=121 
ctag 246: binds=242, cbinds=104, kbinds=17, ebinds=121 
ctag 247: binds=233, cbinds=99, kbinds=15, ebinds=119 
ctag 248: binds=230, cbinds=97, kbinds=14, ebinds=119 
ctag 249: binds=230, cbinds=97, kbinds=14, ebinds=119 
ctag 250: binds=231, cbinds=97, kbinds=15, ebinds=119 
ctag 251: binds=232, cbinds=97, kbinds=16, ebinds=119 
ctag 252: binds=221, cbinds=91, kbinds=14, ebinds=116 
ctag 253: binds=218, cbinds=89, kbinds=13, ebinds=116 
ctag 254: binds=218, cbinds=89, kbinds=13, ebinds=116 
ctag 255: binds=219, cbinds=89, kbinds=14, ebinds=116 
ctag 256: binds=220, cbinds=89, kbinds=15, ebinds=116 
ctag 257: binds=212, cbinds=85, kbinds=13, ebinds=114 
ctag 258: binds=210, cbinds=85, kbinds=12, ebinds=113 
ctag 259: binds=203, cbinds=78, kbinds=12, ebinds=113 
ctag 260: binds=203, cbinds=78, kbinds=12, ebinds=113 
ctag 261: binds=200, cbinds=75, kbinds=12, ebinds=113 
ctag 262: binds=200, cbinds=75, kbinds=12, ebinds=113 
ctag 263: binds=193, cbinds=68, kbinds=12, ebinds=113 
ctag 264: binds=193, cbinds=68, kbinds=12, ebinds=113 
ctag 265: binds=186, cbinds=61, kbinds=12, ebinds=113 
ctag 266: binds=186, cbinds=61, kbinds=12, ebinds=113 
ctag 267: binds=183, cbinds=58, kbinds=12, ebinds=113 
ctag 268: binds=183, cbinds=58, kbinds=12, ebinds=113 
ctag 269: binds=183, cbinds=58, kbinds=12, ebinds=113 
ctag 270: binds=189, cbinds=61, kbinds=14, ebinds=114 
ctag 271: binds=190, cbinds=61, kbinds=14, ebinds=115 
ctag 272: binds=189, cbinds=61, kbinds=14, ebinds=114 
ctag 273: binds=192, cbinds=64, kbinds=14, ebinds=114 
ctag 274: binds=186, cbinds=58, kbinds=14, ebinds=114 
ctag 275: binds=186, cbinds=58, kbinds=14, ebinds=114 
ctag 276: binds=188, cbinds=59, kbinds=15, ebinds=114 
ctag 277: binds=188, cbinds=59, kbinds=15, ebinds=114 
ctag 278: binds=190, cbinds=64, kbinds=13, ebinds=113 
ctag 279: binds=191, cbinds=64, kbinds=14, ebinds=113 
ctag 280: binds=190, cbinds=64, kbinds=13, ebinds=113 
ctag 281: binds=192, cbinds=65, kbinds=14, ebinds=113 
ctag 282: binds=192, cbinds=65, kbinds=14, ebinds=113 
ctag 283: binds=194, cbinds=66, kbinds=13, ebinds=115 
ctag 284: binds=195, cbinds=66, kbinds=13, ebinds=116 
ctag 285: binds=194, cbinds=66, kbinds=13, ebinds=115 
ctag 286: binds=195, cbinds=66, kbinds=14, ebinds=115 
ctag 287: binds=195, cbinds=66, kbinds=14, ebinds=115 
ctag 288: binds=196, cbinds=66, kbinds=15, ebinds=115 
ctag 289: binds=195, cbinds=67, kbinds=13, ebinds=115 
ctag 290: binds=197, cbinds=69, kbinds=13, ebinds=115 
ctag 291: binds=197, cbinds=69, kbinds=13, ebinds=115 
ctag 292: binds=198, cbinds=66, kbinds=16, ebinds=116 
ctag 293: binds=199, cbinds=66, kbinds=16, ebinds=117 
ctag 294: binds=200, cbinds=67, kbinds=17, ebinds=116 
ctag 295: binds=200, cbinds=67, kbinds=17, ebinds=116 
ctag 296: binds=197, cbinds=66, kbinds=15, ebinds=116 
ctag 297: binds=199, cbinds=67, kbinds=16, ebinds=116 
ctag 298: binds=199, cbinds=67, kbinds=16, ebinds=116 
ctag 299: binds=197, cbinds=66, kbinds=15, ebinds=116 
ctag 300: binds=197, cbinds=66, kbinds=15, ebinds=116 
ctag 301: binds=197, cbinds=66, kbinds=15, ebinds=116 
ctag 302: binds=196, cbinds=66, kbinds=14, ebinds=116 
ctag 303: binds=197, cbinds=66, kbinds=15, ebinds=116 
ctag 304: binds=197, cbinds=66, kbinds=15, ebinds=116 
ctag 305: binds=197, cbinds=66, kbinds=15, ebinds=116 
ctag 306: binds=198, cbinds=66, kbinds=16, ebinds=116 
ctag 307: binds=196, cbinds=66, kbinds=14, ebinds=116 
ctag 308: binds=198, cbinds=68, kbinds=14, ebinds=116 
ctag 309: binds=198, cbinds=68, kbinds=14, ebinds=116 
ctag 310: binds=199, cbinds=68, kbinds=15, ebinds=116 
ctag 311: binds=197, cbinds=66, kbinds=14, ebinds=117 
ctag 312: binds=198, cbinds=66, kbinds=14, ebinds=118 
ctag 313: binds=197, cbinds=67, kbinds=15, ebinds=115 
ctag 314: binds=198, cbinds=67, kbinds=15, ebinds=116 
ctag 315: binds=197, cbinds=67, kbinds=15, ebinds=115 
ctag 316: binds=197, cbinds=67, kbinds=15, ebinds=115 
ctag 317: binds=199, cbinds=68, kbinds=16, ebinds=115 
ctag 318: binds=197, cbinds=67, kbinds=15, ebinds=115 
ctag 319: binds=199, cbinds=68, kbinds=16, ebinds=115 
ctag 320: binds=196, cbinds=67, kbinds=15, ebinds=114 
ctag 321: binds=196, cbinds=67, kbinds=15, ebinds=114 
ctag 322: binds=192, cbinds=66, kbinds=13, ebinds=113 
ctag 323: binds=185, cbinds=59, kbinds=13, ebinds=113 
ctag 324: binds=185, cbinds=59, kbinds=13, ebinds=113 
ctag 325: binds=177, cbinds=53, kbinds=12, ebinds=112 
ctag 326: binds=177, cbinds=53, kbinds=12, ebinds=112 
ctag 327: binds=119, cbinds=7, kbinds=0, ebinds=112 
ctag 328: binds=119, cbinds=7, kbinds=0, ebinds=112 
ctag 329: binds=123, cbinds=8, kbinds=3, ebinds=112 
ctag 330: binds=125, cbinds=8, kbinds=5, ebinds=112 
ctag 331: binds=127, cbinds=8, kbinds=7, ebinds=112 
ctag 332: binds=127, cbinds=8, kbinds=7, ebinds=112 
ctag 333: binds=120, cbinds=7, kbinds=1, ebinds=112 
ctag 334: binds=121, cbinds=7, kbinds=2, ebinds=112 
ctag 335: binds=121, cbinds=7, kbinds=2, ebinds=112 
ctag 336: binds=120, cbinds=7, kbinds=1, ebinds=112 
ctag 337: binds=121, cbinds=7, kbinds=2, ebinds=112 
ctag 338: binds=121, cbinds=7, kbinds=2, ebinds=112 
ctag 339: binds=119, cbinds=7, kbinds=0, ebinds=112 
ctag 340: binds=130, cbinds=15, kbinds=3, ebinds=112 
ctag 341: binds=132, cbinds=15, kbinds=5, ebinds=112 
ctag 342: binds=120, cbinds=7, kbinds=1, ebinds=112 
ctag 343: binds=120, cbinds=7, kbinds=1, ebinds=112 
ctag 344: binds=121, cbinds=7, kbinds=1, ebinds=113 
ctag 345: binds=122, cbinds=7, kbinds=1, ebinds=114 
ctag 346: binds=122, cbinds=7, kbinds=1, ebinds=114 
ctag 347: binds=121, cbinds=8, kbinds=1, ebinds=112 
ctag 348: binds=119, cbinds=7, kbinds=0, ebinds=112 
ctag 349: binds=127, cbinds=14, kbinds=1, ebinds=112 
ctag 350: binds=128, cbinds=14, kbinds=1, ebinds=113 
ctag 351: binds=123, cbinds=10, kbinds=0, ebinds=113 
ctag 352: binds=125, cbinds=11, kbinds=0, ebinds=114 
ctag 353: binds=119, cbinds=10, kbinds=0, ebinds=109 
ctag 354: binds=121, cbinds=11, kbinds=0, ebinds=110 
ctag 355: binds=122, cbinds=11, kbinds=1, ebinds=110 
ctag 356: binds=131, cbinds=23, kbinds=0, ebinds=108 
ctag 357: binds=132, cbinds=23, kbinds=1, ebinds=108 
ctag 358: binds=132, cbinds=23, kbinds=1, ebinds=108 
ctag 359: binds=133, cbinds=23, kbinds=2, ebinds=108 
ctag 360: binds=134, cbinds=23, kbinds=3, ebinds=108 
ctag 361: binds=134, cbinds=23, kbinds=3, ebinds=108 
ctag 362: binds=132, cbinds=23, kbinds=0, ebinds=109 
ctag 363: binds=133, cbinds=23, kbinds=1, ebinds=109 
ctag 364: binds=133, cbinds=23, kbinds=1, ebinds=109 
ctag 365: binds=132, cbinds=23, kbinds=1, ebinds=108 
ctag 366: binds=133, cbinds=23, kbinds=2, ebinds=108 
ctag 367: binds=134, cbinds=23, kbinds=2, ebinds=109 
ctag 368: binds=134, cbinds=23, kbinds=2, ebinds=109 
ctag 369: binds=131, cbinds=23, kbinds=0, ebinds=108 
ctag 370: binds=135, cbinds=23, kbinds=0, ebinds=112 
ctag 371: binds=136, cbinds=23, kbinds=0, ebinds=113 
ctag 372: binds=136, cbinds=23, kbinds=0, ebinds=113 
ctag 373: binds=136, cbinds=24, kbinds=0, ebinds=112 
ctag 374: binds=137, cbinds=25, kbinds=0, ebinds=112 
ctag 375: binds=135, cbinds=23, kbinds=0, ebinds=112 
ctag 376: binds=136, cbinds=23, kbinds=1, ebinds=112 
ctag 377: binds=140, cbinds=23, kbinds=5, ebinds=112 
ctag 378: binds=134, cbinds=23, kbinds=0, ebinds=111 
ctag 379: binds=134, cbinds=23, kbinds=0, ebinds=111 
ctag 380: binds=135, cbinds=23, kbinds=1, ebinds=111 
ctag 381: binds=135, cbinds=23, kbinds=1, ebinds=111 
ctag 382: binds=136, cbinds=23, kbinds=2, ebinds=111 
ctag 383: binds=135, cbinds=23, kbinds=1, ebinds=111 
ctag 384: binds=135, cbinds=23, kbinds=1, ebinds=111 
ctag 385: binds=136, cbinds=23, kbinds=1, ebinds=112 
ctag 386: binds=136, cbinds=23, kbinds=1, ebinds=112 
ctag 387: binds=135, cbinds=23, kbinds=1, ebinds=111 
ctag 388: binds=136, cbinds=23, kbinds=2, ebinds=111 
ctag 389: binds=135, cbinds=23, kbinds=1, ebinds=111 
ctag 390: binds=136, cbinds=23, kbinds=2, ebinds=111 
ctag 391: binds=136, cbinds=23, kbinds=2, ebinds=111 
ctag 392: binds=136, cbinds=23, kbinds=2, ebinds=111 
ctag 393: binds=137, cbinds=23, kbinds=3, ebinds=111 
ctag 394: binds=135, cbinds=23, kbinds=1, ebinds=111 
ctag 395: binds=137, cbinds=25, kbinds=1, ebinds=111 
ctag 396: binds=137, cbinds=25, kbinds=1, ebinds=111 
ctag 397: binds=138, cbinds=25, kbinds=2, ebinds=111 
ctag 398: binds=136, cbinds=23, kbinds=1, ebinds=112 
ctag 399: binds=137, cbinds=23, kbinds=1, ebinds=113 
ctag 400: binds=139, cbinds=25, kbinds=2, ebinds=112 
ctag 401: binds=140, cbinds=25, kbinds=3, ebinds=112 
ctag 402: binds=139, cbinds=25, kbinds=2, ebinds=112 
ctag 403: binds=140, cbinds=25, kbinds=3, ebinds=112 
ctag 404: binds=140, cbinds=25, kbinds=3, ebinds=112 
ctag 405: binds=140, cbinds=25, kbinds=3, ebinds=112 
ctag 406: binds=141, cbinds=25, kbinds=4, ebinds=112 
ctag 407: binds=139, cbinds=25, kbinds=2, ebinds=112 
ctag 408: binds=141, cbinds=27, kbinds=2, ebinds=112 
ctag 409: binds=142, cbinds=27, kbinds=3, ebinds=112 
ctag 410: binds=140, cbinds=25, kbinds=2, ebinds=113 
ctag 411: binds=141, cbinds=25, kbinds=2, ebinds=114 
ctag 412: binds=150, cbinds=33, kbinds=4, ebinds=113 
ctag 413: binds=151, cbinds=33, kbinds=5, ebinds=113 
ctag 414: binds=150, cbinds=33, kbinds=4, ebinds=113 
ctag 415: binds=153, cbinds=36, kbinds=4, ebinds=113 
ctag 416: binds=153, cbinds=36, kbinds=4, ebinds=113 
ctag 417: binds=150, cbinds=33, kbinds=4, ebinds=113 
ctag 418: binds=148, cbinds=31, kbinds=4, ebinds=113 
ctag 419: binds=148, cbinds=31, kbinds=4, ebinds=113 
ctag 420: binds=150, cbinds=32, kbinds=5, ebinds=113 
ctag 421: binds=150, cbinds=32, kbinds=5, ebinds=113 
ctag 422: binds=147, cbinds=31, kbinds=3, ebinds=113 
ctag 423: binds=150, cbinds=34, kbinds=3, ebinds=113 
ctag 424: binds=151, cbinds=34, kbinds=4, ebinds=113 
ctag 425: binds=151, cbinds=34, kbinds=4, ebinds=113 
ctag 426: binds=150, cbinds=34, kbinds=3, ebinds=113 
ctag 427: binds=151, cbinds=34, kbinds=4, ebinds=113 
ctag 428: binds=151, cbinds=34, kbinds=4, ebinds=113 
ctag 429: binds=148, cbinds=31, kbinds=4, ebinds=113 
ctag 430: binds=149, cbinds=31, kbinds=5, ebinds=113 
ctag 431: binds=149, cbinds=31, kbinds=5, ebinds=113 
ctag 432: binds=148, cbinds=31, kbinds=4, ebinds=113 
ctag 433: binds=149, cbinds=31, kbinds=5, ebinds=113 
ctag 434: binds=149, cbinds=31, kbinds=5, ebinds=113 
ctag 435: binds=148, cbinds=31, kbinds=4, ebinds=113 
ctag 436: binds=145, cbinds=29, kbinds=3, ebinds=113 
ctag 437: binds=145, cbinds=29, kbinds=3, ebinds=113 
ctag 438: binds=147, cbinds=30, kbinds=4, ebinds=113 
ctag 439: binds=147, cbinds=30, kbinds=4, ebinds=113 
ctag 440: binds=147, cbinds=28, kbinds=5, ebinds=114 
ctag 441: binds=148, cbinds=28, kbinds=5, ebinds=115 
ctag 442: binds=147, cbinds=28, kbinds=5, ebinds=114 
ctag 443: binds=148, cbinds=28, kbinds=6, ebinds=114 
ctag 444: binds=148, cbinds=28, kbinds=6, ebinds=114 
ctag 445: binds=149, cbinds=28, kbinds=7, ebinds=114 
ctag 446: binds=148, cbinds=29, kbinds=5, ebinds=114 
ctag 447: binds=150, cbinds=31, kbinds=5, ebinds=114 
ctag 448: binds=154, cbinds=33, kbinds=6, ebinds=115 
ctag 449: binds=155, cbinds=33, kbinds=6, ebinds=116 
ctag 450: binds=154, cbinds=33, kbinds=6, ebinds=115 
ctag 451: binds=156, cbinds=33, kbinds=8, ebinds=115 
ctag 452: binds=155, cbinds=34, kbinds=6, ebinds=115 
ctag 453: binds=156, cbinds=34, kbinds=8, ebinds=114 
ctag 454: binds=157, cbinds=34, kbinds=8, ebinds=115 
ctag 455: binds=158, cbinds=35, kbinds=9, ebinds=114 
ctag 456: binds=158, cbinds=35, kbinds=9, ebinds=114 
ctag 457: binds=155, cbinds=34, kbinds=7, ebinds=114 
ctag 458: binds=155, cbinds=34, kbinds=7, ebinds=114 
ctag 459: binds=157, cbinds=35, kbinds=8, ebinds=114 
ctag 460: binds=152, cbinds=33, kbinds=6, ebinds=113 
ctag 461: binds=154, cbinds=34, kbinds=7, ebinds=113 
ctag 462: binds=154, cbinds=33, kbinds=6, ebinds=115 
ctag 463: binds=155, cbinds=33, kbinds=6, ebinds=116 
ctag 464: binds=154, cbinds=33, kbinds=6, ebinds=115 
ctag 465: binds=156, cbinds=33, kbinds=8, ebinds=115 
ctag 466: binds=155, cbinds=34, kbinds=6, ebinds=115 
ctag 467: binds=156, cbinds=33, kbinds=7, ebinds=116 
ctag 468: binds=157, cbinds=33, kbinds=7, ebinds=117 
ctag 469: binds=156, cbinds=33, kbinds=7, ebinds=116 
ctag 470: binds=158, cbinds=33, kbinds=9, ebinds=116 
ctag 471: binds=157, cbinds=34, kbinds=7, ebinds=116 
ctag 472: binds=170, cbinds=42, kbinds=9, ebinds=119 
ctag 473: binds=171, cbinds=42, kbinds=9, ebinds=120 
ctag 474: binds=170, cbinds=42, kbinds=9, ebinds=119 
ctag 475: binds=172, cbinds=42, kbinds=11, ebinds=119 
ctag 476: binds=172, cbinds=43, kbinds=10, ebinds=119 
ctag 477: binds=183, cbinds=50, kbinds=12, ebinds=121 
ctag 478: binds=184, cbinds=50, kbinds=12, ebinds=122 
ctag 479: binds=185, cbinds=51, kbinds=13, ebinds=121 
ctag 480: binds=184, cbinds=51, kbinds=12, ebinds=121 
ctag 481: binds=182, cbinds=50, kbinds=11, ebinds=121 
ctag 482: binds=185, cbinds=53, kbinds=11, ebinds=121 
ctag 483: binds=185, cbinds=53, kbinds=11, ebinds=121 
ctag 484: binds=182, cbinds=50, kbinds=11, ebinds=121 
ctag 485: binds=183, cbinds=50, kbinds=12, ebinds=121 
ctag 486: binds=183, cbinds=50, kbinds=12, ebinds=121 
ctag 487: binds=183, cbinds=50, kbinds=12, ebinds=121 
ctag 488: binds=184, cbinds=50, kbinds=13, ebinds=121 
ctag 489: binds=180, cbinds=48, kbinds=11, ebinds=121 
ctag 490: binds=180, cbinds=48, kbinds=11, ebinds=121 
ctag 491: binds=182, cbinds=49, kbinds=12, ebinds=121 
ctag 492: binds=182, cbinds=49, kbinds=12, ebinds=121 
ctag 493: binds=178, cbinds=47, kbinds=11, ebinds=120 
ctag 494: binds=177, cbinds=47, kbinds=10, ebinds=120 
ctag 495: binds=180, cbinds=50, kbinds=10, ebinds=120 
ctag 496: binds=181, cbinds=50, kbinds=11, ebinds=120 
ctag 497: binds=181, cbinds=50, kbinds=11, ebinds=120 
ctag 498: binds=180, cbinds=50, kbinds=10, ebinds=120 
ctag 499: binds=181, cbinds=50, kbinds=11, ebinds=120 
ctag 500: binds=181, cbinds=50, kbinds=11, ebinds=120 
ctag 501: binds=178, cbinds=47, kbinds=11, ebinds=120 
ctag 502: binds=179, cbinds=47, kbinds=12, ebinds=120 
ctag 503: binds=179, cbinds=47, kbinds=12, ebinds=120 
ctag 504: binds=178, cbinds=47, kbinds=11, ebinds=120 
ctag 505: binds=179, cbinds=47, kbinds=12, ebinds=120 
ctag 506: binds=179, cbinds=47, kbinds=12, ebinds=120 
ctag 507: binds=178, cbinds=47, kbinds=11, ebinds=120 
ctag 508: binds=175, cbinds=45, kbinds=10, ebinds=120 
ctag 509: binds=175, cbinds=45, kbinds=10, ebinds=120 
ctag 510: binds=177, cbinds=46, kbinds=11, ebinds=120 
ctag 511: binds=177, cbinds=46, kbinds=11, ebinds=120 
ctag 512: binds=172, cbinds=44, kbinds=10, ebinds=118 
ctag 513: binds=174, cbinds=45, kbinds=11, ebinds=118 
ctag 514: binds=168, cbinds=42, kbinds=8, ebinds=118 
ctag 515: binds=169, cbinds=43, kbinds=8, ebinds=118 
ctag 516: binds=169, cbinds=43, kbinds=8, ebinds=118 
ctag 517: binds=169, cbinds=42, kbinds=9, ebinds=118 
ctag 518: binds=169, cbinds=42, kbinds=9, ebinds=118 
ctag 519: binds=169, cbinds=42, kbinds=9, ebinds=118 
ctag 520: binds=170, cbinds=42, kbinds=9, ebinds=119 
ctag 521: binds=167, cbinds=42, kbinds=8, ebinds=117 
ctag 522: binds=167, cbinds=42, kbinds=8, ebinds=117 
ctag 523: binds=169, cbinds=43, kbinds=9, ebinds=117 
ctag 524: binds=172, cbinds=45, kbinds=9, ebinds=118 
ctag 525: binds=173, cbinds=45, kbinds=10, ebinds=118 
ctag 526: binds=172, cbinds=45, kbinds=9, ebinds=118 
ctag 527: binds=175, cbinds=48, kbinds=9, ebinds=118 
ctag 528: binds=175, cbinds=48, kbinds=9, ebinds=118 
ctag 529: binds=172, cbinds=45, kbinds=9, ebinds=118 
ctag 530: binds=173, cbinds=45, kbinds=10, ebinds=118 
ctag 531: binds=173, cbinds=45, kbinds=10, ebinds=118 
ctag 532: binds=173, cbinds=45, kbinds=10, ebinds=118 
ctag 533: binds=174, cbinds=45, kbinds=11, ebinds=118 
ctag 534: binds=170, cbinds=43, kbinds=9, ebinds=118 
ctag 535: binds=170, cbinds=43, kbinds=9, ebinds=118 
ctag 536: binds=172, cbinds=44, kbinds=10, ebinds=118 
ctag 537: binds=172, cbinds=44, kbinds=10, ebinds=118 
ctag 538: binds=168, cbinds=42, kbinds=9, ebinds=117 
ctag 539: binds=167, cbinds=42, kbinds=8, ebinds=117 
ctag 540: binds=170, cbinds=45, kbinds=8, ebinds=117 
ctag 541: binds=171, cbinds=45, kbinds=9, ebinds=117 
ctag 542: binds=171, cbinds=45, kbinds=9, ebinds=117 
ctag 543: binds=170, cbinds=45, kbinds=8, ebinds=117 
ctag 544: binds=171, cbinds=45, kbinds=9, ebinds=117 
ctag 545: binds=171, cbinds=45, kbinds=9, ebinds=117 
ctag 546: binds=168, cbinds=42, kbinds=9, ebinds=117 
ctag 547: binds=169, cbinds=42, kbinds=10, ebinds=117 
ctag 548: binds=169, cbinds=42, kbinds=10, ebinds=117 
ctag 549: binds=168, cbinds=42, kbinds=9, ebinds=117 
ctag 550: binds=169, cbinds=42, kbinds=10, ebinds=117 
ctag 551: binds=169, cbinds=42, kbinds=10, ebinds=117 
ctag 552: binds=168, cbinds=42, kbinds=9, ebinds=117 
ctag 553: binds=165, cbinds=40, kbinds=8, ebinds=117 
ctag 554: binds=165, cbinds=40, kbinds=8, ebinds=117 
ctag 555: binds=167, cbinds=41, kbinds=9, ebinds=117 
ctag 556: binds=167, cbinds=41, kbinds=9, ebinds=117 
ctag 557: binds=159, cbinds=36, kbinds=8, ebinds=115 
ctag 558: binds=161, cbinds=37, kbinds=9, ebinds=115 
ctag 559: binds=156, cbinds=33, kbinds=8, ebinds=115 
ctag 560: binds=154, cbinds=33, kbinds=7, ebinds=114 
ctag 561: binds=156, cbinds=34, kbinds=8, ebinds=114 
ctag 562: binds=152, cbinds=33, kbinds=6, ebinds=113 
ctag 563: binds=154, cbinds=34, kbinds=7, ebinds=113 
ctag 564: binds=147, cbinds=28, kbinds=6, ebinds=113 
ctag 565: binds=150, cbinds=31, kbinds=6, ebinds=113 
ctag 566: binds=150, cbinds=31, kbinds=6, ebinds=113 
ctag 567: binds=147, cbinds=28, kbinds=6, ebinds=113 
ctag 568: binds=149, cbinds=29, kbinds=7, ebinds=113 
ctag 569: binds=149, cbinds=29, kbinds=7, ebinds=113 
ctag 570: binds=145, cbinds=28, kbinds=5, ebinds=112 
ctag 571: binds=148, cbinds=31, kbinds=5, ebinds=112 
ctag 572: binds=145, cbinds=28, kbinds=5, ebinds=112 
ctag 573: binds=147, cbinds=29, kbinds=6, ebinds=112 
ctag 574: binds=145, cbinds=28, kbinds=5, ebinds=112 
ctag 575: binds=147, cbinds=29, kbinds=6, ebinds=112 
ctag 576: binds=147, cbinds=29, kbinds=6, ebinds=112 
ctag 577: binds=140, cbinds=26, kbinds=3, ebinds=111 
ctag 578: binds=140, cbinds=26, kbinds=3, ebinds=111 
ctag 579: binds=142, cbinds=27, kbinds=4, ebinds=111 
ctag 580: binds=142, cbinds=27, kbinds=4, ebinds=111 
ctag 581: binds=139, cbinds=26, kbinds=3, ebinds=110 
ctag 582: binds=134, cbinds=24, kbinds=1, ebinds=109 
ctag 583: binds=114, cbinds=7, kbinds=0, ebinds=107 
ctag 584: binds=115, cbinds=7, kbinds=0, ebinds=108 
ctag 585: binds=116, cbinds=7, kbinds=0, ebinds=109 
ctag 586: binds=116, cbinds=7, kbinds=0, ebinds=109 
ctag 587: binds=117, cbinds=7, kbinds=1, ebinds=109 
ctag 588: binds=117, cbinds=7, kbinds=1, ebinds=109 
ctag 589: binds=118, cbinds=7, kbinds=1, ebinds=110 
ctag 590: binds=114, cbinds=7, kbinds=0, ebinds=107 
ctag 591: binds=115, cbinds=7, kbinds=0, ebinds=108 
ctag 592: binds=115, cbinds=7, kbinds=0, ebinds=108 
ctag 593: binds=114, cbinds=7, kbinds=0, ebinds=107 
ctag 594: binds=119, cbinds=10, kbinds=2, ebinds=107 
ctag 595: binds=120, cbinds=10, kbinds=2, ebinds=108 
ctag 596: binds=116, cbinds=8, kbinds=1, ebinds=107 
ctag 597: binds=116, cbinds=8, kbinds=1, ebinds=107 
ctag 598: binds=120, cbinds=11, kbinds=2, ebinds=107 
ctag 599: binds=121, cbinds=11, kbinds=2, ebinds=108 
ctag 600: binds=120, cbinds=11, kbinds=2, ebinds=107 
ctag 601: binds=121, cbinds=11, kbinds=3, ebinds=107 
ctag 602: binds=121, cbinds=11, kbinds=3, ebinds=107 
ctag 603: binds=122, cbinds=11, kbinds=4, ebinds=107 
ctag 604: binds=120, cbinds=9, kbinds=2, ebinds=109 
ctag 605: binds=119, cbinds=9, kbinds=2, ebinds=108 
ctag 606: binds=122, cbinds=12, kbinds=2, ebinds=108 
ctag 607: binds=123, cbinds=12, kbinds=2, ebinds=109 
ctag 608: binds=122, cbinds=12, kbinds=2, ebinds=108 
ctag 609: binds=123, cbinds=12, kbinds=2, ebinds=109 
ctag 610: binds=113, cbinds=7, kbinds=0, ebinds=106 
ctag 611: binds=118, cbinds=10, kbinds=2, ebinds=106 
ctag 612: binds=119, cbinds=10, kbinds=2, ebinds=107 
ctag 613: binds=115, cbinds=8, kbinds=1, ebinds=106 
ctag 614: binds=115, cbinds=8, kbinds=1, ebinds=106 
ctag 615: binds=119, cbinds=11, kbinds=2, ebinds=106 
ctag 616: binds=120, cbinds=11, kbinds=2, ebinds=107 
ctag 617: binds=119, cbinds=11, kbinds=2, ebinds=106 
ctag 618: binds=120, cbinds=11, kbinds=3, ebinds=106 
ctag 619: binds=120, cbinds=11, kbinds=3, ebinds=106 
ctag 620: binds=121, cbinds=11, kbinds=4, ebinds=106 
ctag 621: binds=119, cbinds=9, kbinds=2, ebinds=108 
ctag 622: binds=118, cbinds=9, kbinds=2, ebinds=107 
ctag 623: binds=121, cbinds=12, kbinds=2, ebinds=107 
ctag 624: binds=122, cbinds=12, kbinds=2, ebinds=108 
ctag 625: binds=121, cbinds=12, kbinds=2, ebinds=107 
ctag 626: binds=122, cbinds=12, kbinds=2, ebinds=108 
ctag 627: binds=119, cbinds=14, kbinds=0, ebinds=105 
ctag 628: binds=129, cbinds=22, kbinds=1, ebinds=106 
ctag 629: binds=119, cbinds=14, kbinds=0, ebinds=105 
ctag 630: binds=129, cbinds=22, kbinds=1, ebinds=106 
ctag 631: binds=112, cbinds=7, kbinds=0, ebinds=105 
ctag 632: binds=117, cbinds=10, kbinds=2, ebinds=105 
ctag 633: binds=118, cbinds=10, kbinds=2, ebinds=106 
ctag 634: binds=114, cbinds=8, kbinds=1, ebinds=105 
ctag 635: binds=114, cbinds=8, kbinds=1, ebinds=105 
ctag 636: binds=118, cbinds=11, kbinds=2, ebinds=105 
ctag 637: binds=119, cbinds=11, kbinds=2, ebinds=106 
ctag 638: binds=118, cbinds=11, kbinds=2, ebinds=105 
ctag 639: binds=119, cbinds=11, kbinds=3, ebinds=105 
ctag 640: binds=119, cbinds=11, kbinds=3, ebinds=105 
ctag 641: binds=120, cbinds=11, kbinds=4, ebinds=105 
ctag 642: binds=118, cbinds=9, kbinds=2, ebinds=107 
ctag 643: binds=117, cbinds=9, kbinds=2, ebinds=106 
ctag 644: binds=120, cbinds=12, kbinds=2, ebinds=106 
ctag 645: binds=121, cbinds=12, kbinds=2, ebinds=107 
ctag 646: binds=120, cbinds=12, kbinds=2, ebinds=106 
ctag 647: binds=121, cbinds=12, kbinds=2, ebinds=107 
ctag 648: binds=111, cbinds=7, kbinds=0, ebinds=104 
ctag 649: binds=116, cbinds=10, kbinds=2, ebinds=104 
ctag 650: binds=117, cbinds=10, kbinds=2, ebinds=105 
ctag 651: binds=113, cbinds=8, kbinds=1, ebinds=104 
ctag 652: binds=113, cbinds=8, kbinds=1, ebinds=104 
ctag 653: binds=117, cbinds=11, kbinds=2, ebinds=104 
ctag 654: binds=118, cbinds=11, kbinds=2, ebinds=105 
ctag 655: binds=117, cbinds=11, kbinds=2, ebinds=104 
ctag 656: binds=118, cbinds=11, kbinds=3, ebinds=104 
ctag 657: binds=118, cbinds=11, kbinds=3, ebinds=104 
ctag 658: binds=119, cbinds=11, kbinds=4, ebinds=104 
ctag 659: binds=117, cbinds=9, kbinds=2, ebinds=106 
ctag 660: binds=116, cbinds=9, kbinds=2, ebinds=105 
ctag 661: binds=119, cbinds=12, kbinds=2, ebinds=105 
ctag 662: binds=120, cbinds=12, kbinds=2, ebinds=106 
ctag 663: binds=119, cbinds=12, kbinds=2, ebinds=105 
ctag 664: binds=120, cbinds=12, kbinds=2, ebinds=106 
ctag 665: binds=117, cbinds=14, kbinds=0, ebinds=103 
ctag 666: binds=127, cbinds=22, kbinds=1, ebinds=104 
ctag 667: binds=117, cbinds=14, kbinds=0, ebinds=103 
ctag 668: binds=127, cbinds=22, kbinds=1, ebinds=104 
ctag 669: binds=110, cbinds=7, kbinds=0, ebinds=103 
ctag 670: binds=111, cbinds=7, kbinds=0, ebinds=104 
ctag 671: binds=111, cbinds=7, kbinds=0, ebinds=104 
ctag 672: binds=113, cbinds=9, kbinds=0, ebinds=104 
ctag 673: binds=113, cbinds=9, kbinds=0, ebinds=104 
ctag 674: binds=114, cbinds=10, kbinds=0, ebinds=104 
ctag 675: binds=114, cbinds=10, kbinds=0, ebinds=104 
ctag 676: binds=116, cbinds=12, kbinds=0, ebinds=104 
ctag 677: binds=117, cbinds=12, kbinds=1, ebinds=104 
ctag 678: binds=118, cbinds=12, kbinds=2, ebinds=104 
Total binds=118205, cbinds=34699, kbinds=6034, ebinds=77472 
Constraint Clusters = 479 

BEGIN: Fixpoint: Trueing Unconstrained Variables 

DONE: Fixpoint: Trueing Unconstrained Variables 

BEGIN: Fixpoint: Initialize Worklist 

DONE: Fixpoint: Initialize Worklist 

BEGIN: Fixpoint Refinement Loop 

 num refines=0
 # Vars: (Total=486, False=486) Quals: (Total=419779, Avg=863.742798, Max=18890, Min=1)
#Iteration Profile = (si=0 tp=0 unsatLHS=0 emptyRHS=0) 
#Queries: umatch=0, match=0, ask=0, valid=0
SMT stats: pushes=432, pops=432, unsats=160 
TP stats: sets=108, queries=324, count=2

.-.\.|iter=1 id=583 ch=true tag [17] // 
iter=2 id=370 ch=true tag [18] // 
iter=3 id=629 ch=true tag [8] // 
./iter=4 id=592 ch=false tag [16] // 
.-iter=5 id=354 ch=false tag [19] // 
.\iter=6 id=590 ch=true tag [16] // 
.|iter=7 id=587 ch=false tag [17] // 
./iter=8 id=17 ch=true tag [14] // 
.-iter=9 id=374 ch=false tag [18] // 
.\iter=10 id=351 ch=false tag [21] // 
.|iter=11 id=669 ch=true tag [1] // 
./iter=12 id=585 ch=true tag [17] // 
.-iter=13 id=672 ch=true tag [1] // 
.\iter=14 id=675 ch=true tag [1] // 
.|iter=15 id=678 ch=false tag [1] // 
./iter=16 id=378 ch=false tag [18] // 
.-iter=17 id=589 ch=false tag [17] // 
.\iter=18 id=353 ch=false tag [19] // 
.|iter=19 id=627 ch=true tag [9] // 
./iter=20 id=628 ch=true tag [9] // 
.-iter=21 id=648 ch=true tag [5] // 
.\iter=22 id=373 ch=true tag [18] // 
.|iter=23 id=376 ch=false tag [18] // 
./iter=24 id=593 ch=true tag [13] // 
.-iter=25 id=596 ch=true tag [12] // 
.\iter=26 id=609 ch=true tag [12] // 
.|iter=27 id=606 ch=true tag [12] // 
./iter=28 id=604 ch=true tag [12] // 
.-iter=29 id=584 ch=true tag [17] // 
.\iter=30 id=371 ch=true tag [18] // 
.|iter=31 id=363 ch=true tag [18] // 
./iter=32 id=651 ch=true tag [4] // 
.-iter=33 id=664 ch=true tag [4] // 
.\iter=34 id=661 ch=true tag [4] // 
.|iter=35 id=327 ch=true tag [21] // 
./iter=36 id=328 ch=true tag [21] // 
.-iter=37 id=339 ch=true tag [21] // 
.\iter=38 id=347 ch=true tag [21] // 
.|iter=39 id=349 ch=true tag [21] // 
./iter=40 id=340 ch=true tag [21] // 
.-iter=41 id=345 ch=true tag [21] // 
.\iter=42 id=369 ch=true tag [18] // 
.|iter=43 id=608 ch=true tag [12] // 
./iter=44 id=660 ch=true tag [4] // 
.-iter=45 id=652 ch=true tag [4] // 
.
iter=46 id=663 ch=true tag [4] // 
.|iter=47 id=655 ch=true tag [4] // 
./iter=48 id=650 ch=true tag [5] // 
.-iter=49 id=649 ch=true tag [5] // 
.\iter=50 id=658 ch=true tag [4] // 
.|iter=51 id=657 ch=true tag [4] // 
./iter=52 id=667 ch=true tag [2] // 
.-iter=53 id=668 ch=true tag [2] // 
.\iter=54 id=671 ch=true tag [1] // 
.|iter=55 id=674 ch=true tag [1] // 
./iter=56 id=677 ch=false tag [1] // 
.-iter=57 id=344 ch=true tag [21] // 
.\iter=58 id=591 ch=true tag [16] // 
.|iter=59 id=588 ch=false tag [17] // 
./iter=60 id=18 ch=true tag [14] // 
.-iter=61 id=16 ch=false tag [14] // 
.\iter=62 id=15 ch=true tag [14] // 
.|iter=63 id=14 ch=true tag [14] // 
./iter=64 id=10 ch=true tag [14] // 
.-iter=65 id=6 ch=true tag [14] // 
.\iter=66 id=2 ch=true tag [14] // 
.|iter=67 id=375 ch=true tag [18] // 
./iter=68 id=380 ch=false tag [18] // 
.-iter=69 id=586 ch=false tag [17] // 
.\iter=70 id=631 ch=true tag [7] // 
.|iter=71 id=634 ch=true tag [6] // 
./iter=72 id=647 ch=true tag [6] // 
.-iter=73 id=645 ch=true tag [6] // 
.\iter=74 id=644 ch=true tag [6] // 
.|iter=75 id=642 ch=true tag [6] // 
./iter=76 id=362 ch=true tag [18] // 
.-iter=77 id=630 ch=true tag [8] // 
.\iter=78 id=348 ch=true tag [21] // 
.|iter=79 id=350 ch=true tag [21] // 
./iter=80 id=13 ch=true tag [14] // 
.-iter=81 id=355 ch=false tag [15] // 
.\iter=82 id=379 ch=true tag [18] // 
.|iter=83 id=582 ch=true tag [18] // 
./iter=84 id=398 ch=true tag [18] // 
.-iter=85 id=387 ch=true tag [18] // 
.\iter=86 id=381 ch=true tag [18] // 
.|iter=87 id=385 ch=false tag [18] // 
./iter=88 id=384 ch=true tag [18] // 
.-iter=89 id=643 ch=true tag [6] // 
.\iter=90 id=637 ch=true tag [6] // 
.|iter=91 id=636 ch=true tag [6] // 
./iter=92 id=635 ch=true tag [6] // 
.-iter=93 id=610 ch=true tag [11] // 
.\iter=94 id=613 ch=true tag [10] // 
.|iter=95 id=626 ch=true tag [10] // 
./iter=96 id=625 ch=true tag [10] // 
.-iter=97 id=624 ch=true tag [10] // 
.\iter=98 id=623 ch=true tag [10] // 
.|iter=99 id=622 ch=true tag [10] // 
./iter=100 id=618 ch=true tag [10] // 

 num refines=100
 # Vars: (Total=486, False=396) Quals: (Total=418824, Avg=861.777778, Max=18890, Min=0)
#Iteration Profile = (si=0 tp=55 unsatLHS=8 emptyRHS=9) 
#Queries: umatch=71, match=37, ask=1025, valid=173
SMT stats: pushes=1512, pops=1512, unsats=333 
TP stats: sets=163, queries=1349, count=109

.-.\.|iter=101 id=616 ch=true tag [10] // 
iter=102 id=615 ch=true tag [10] // 
iter=103 id=614 ch=true tag [10] // 
./iter=104 id=621 ch=true tag [10] // 
.-iter=105 id=646 ch=true tag [6] // 
.\iter=106 id=639 ch=true tag [6] // 
.|iter=107 id=638 ch=true tag [6] // 
./iter=108 id=633 ch=true tag [7] // 
.-iter=109 id=632 ch=true tag [7] // 
.\iter=110 id=641 ch=true tag [6] // 
.|iter=111 id=640 ch=true tag [6] // 
./iter=112 id=607 ch=true tag [12] // 
.-iter=113 id=653 ch=true tag [4] // 
.\iter=114 id=656 ch=true tag [4] // 
.|iter=115 id=659 ch=true tag [4] // 
./iter=116 id=605 ch=true tag [12] // 
.-iter=117 id=601 ch=true tag [12] // 
.\iter=118 id=600 ch=true tag [12] // 
.|iter=119 id=599 ch=true tag [12] // 
./iter=120 id=598 ch=true tag [12] // 
.-iter=121 id=597 ch=true tag [12] // 
.
iter=122 id=595 ch=true tag [13] // 
.|iter=123 id=594 ch=true tag [13] // 
./iter=124 id=603 ch=true tag [12] // 
.-iter=125 id=602 ch=true tag [12] // 
.\iter=126 id=343 ch=true tag [21] // 
.|iter=127 id=331 ch=true tag [21] // 
./iter=128 id=330 ch=true tag [21] // 
.-iter=129 id=329 ch=true tag [21] // 
.\iter=130 id=334 ch=true tag [21] // 
.|iter=131 id=333 ch=true tag [21] // 
./iter=132 id=337 ch=true tag [21] // 
.-iter=133 id=336 ch=true tag [21] // 
.\iter=134 id=662 ch=true tag [4] // 
.|iter=135 id=654 ch=true tag [4] // 
./iter=136 id=670 ch=true tag [1] // 
.-iter=137 id=617 ch=true tag [10] // 
.\iter=138 id=612 ch=true tag [11] // 
.|iter=139 id=611 ch=true tag [11] // 
./iter=140 id=620 ch=true tag [10] // 
.-iter=141 id=619 ch=true tag [10] // 
.\iter=142 id=673 ch=true tag [1] // 
.|iter=143 id=676 ch=true tag [1] // 
./iter=144 id=352 ch=false tag [21] // 
.-iter=145 id=394 ch=true tag [18] // 
.\iter=146 id=389 ch=true tag [18] // 
.|iter=147 id=581 ch=false tag [18] // 
./iter=148 id=410 ch=true tag [18] // 
.-iter=149 id=408 ch=true tag [18] // 
.\iter=150 id=407 ch=true tag [18] // 
.|iter=151 id=402 ch=true tag [18] // 
./iter=152 id=578 ch=false tag [18] // 
.-iter=153 id=577 ch=false tag [18] // 
.\iter=154 id=437 ch=false tag [18] // 
.|iter=155 id=436 ch=false tag [18] // 
./iter=156 id=422 ch=true tag [18] // 
.-iter=157 id=435 ch=true tag [18] // 
.\iter=158 id=390 ch=false tag [18] // 
.|iter=159 id=420 ch=false tag [18] // 
./iter=160 id=395 ch=true tag [18] // 
.-iter=161 id=438 ch=false tag [18] // 
.\iter=162 id=580 ch=false tag [18] // 
.|iter=163 id=421 ch=false tag [18] // 
./iter=164 id=579 ch=false tag [18] // 
.-iter=165 id=396 ch=false tag [18] // 
.\iter=166 id=439 ch=false tag [18] // 
.|iter=167 id=391 ch=false tag [18] // 
./iter=168 id=390 ch=true tag [18] // 
.-iter=169 id=579 ch=true tag [18] // 
.\iter=170 id=438 ch=true tag [18] // 
.|iter=171 id=420 ch=true tag [18] // 
./iter=172 id=419 ch=false tag [18] // 
.-iter=173 id=418 ch=false tag [18] // 
.\iter=174 id=417 ch=true tag [18] // 
.|iter=175 id=414 ch=true tag [18] // 
./iter=176 id=442 ch=false tag [18] // 
.-iter=177 id=446 ch=true tag [18] // 
.\iter=178 id=466 ch=false tag [18] // 
.|iter=179 id=464 ch=false tag [18] // 
./iter=180 id=471 ch=false tag [18] // 
.-iter=181 id=469 ch=false tag [18] // 
.\iter=182 id=539 ch=false tag [18] // 
.|iter=183 id=552 ch=false tag [18] // 
./iter=184 id=538 ch=false tag [18] // 
.-iter=185 id=526 ch=false tag [18] // 
.\iter=186 id=529 ch=false tag [18] // 
.|iter=187 id=516 ch=false tag [18] // 
./iter=188 id=514 ch=false tag [18] // 
.-iter=189 id=519 ch=false tag [18] // 
.\iter=190 id=518 ch=false tag [18] // 
.|iter=191 id=520 ch=false tag [18] // 
./iter=192 id=476 ch=false tag [18] // 
.-iter=193 id=474 ch=false tag [18] // 
.\iter=194 id=494 ch=false tag [18] // 
.|iter=195 id=507 ch=false tag [18] // 
./iter=196 id=493 ch=false tag [18] // 
.-iter=197 id=481 ch=false tag [18] // 
.
iter=198 id=484 ch=false tag [18] // 
.|iter=199 id=442 ch=true tag [18] // 
./iter=200 id=466 ch=true tag [18] // 

 num refines=200
 # Vars: (Total=486, False=329) Quals: (Total=415385, Avg=854.701646, Max=18890, Min=0)
#Iteration Profile = (si=0 tp=96 unsatLHS=38 emptyRHS=18) 
#Queries: umatch=22308, match=315, ask=4599, valid=388
SMT stats: pushes=5127, pops=5127, unsats=548 
TP stats: sets=204, queries=4923, count=161

.-.\.|iter=201 id=464 ch=true tag [18] // 
iter=202 id=471 ch=true tag [18] // 
iter=203 id=469 ch=true tag [18] // 
./iter=204 id=539 ch=true tag [18] // 
.-iter=205 id=552 ch=true tag [18] // 
.\iter=206 id=538 ch=true tag [18] // 
.|iter=207 id=526 ch=true tag [18] // 
./iter=208 id=529 ch=true tag [18] // 
.-iter=209 id=516 ch=true tag [18] // 
.\iter=210 id=514 ch=true tag [18] // 
.|iter=211 id=519 ch=true tag [18] // 
./iter=212 id=518 ch=true tag [18] // 
.-iter=213 id=520 ch=true tag [18] // 
.\iter=214 id=476 ch=true tag [18] // 
.|iter=215 id=474 ch=true tag [18] // 
./iter=216 id=494 ch=true tag [18] // 
.-iter=217 id=507 ch=true tag [18] // 
.\iter=218 id=493 ch=false tag [18] // 
.|iter=219 id=481 ch=true tag [18] // 
./iter=220 id=484 ch=false tag [18] // 
.-iter=221 id=446 ch=true tag [18] // 
.\iter=222 id=442 ch=true tag [18] // 
.|iter=223 id=471 ch=true tag [18] // 
./iter=224 id=469 ch=true tag [18] // 
.-iter=225 id=539 ch=true tag [18] // 
.\iter=226 id=552 ch=true tag [18] // 
.|iter=227 id=538 ch=false tag [18] // 
./iter=228 id=526 ch=true tag [18] // 
.-iter=229 id=529 ch=false tag [18] // 
.\iter=230 id=516 ch=true tag [18] // 
.|iter=231 id=514 ch=false tag [18] // 
./iter=232 id=518 ch=true tag [18] // 
.-iter=233 id=520 ch=true tag [18] // 
.\iter=234 id=476 ch=true tag [18] // 
.|iter=235 id=474 ch=true tag [18] // 
./iter=236 id=494 ch=true tag [18] // 
.-iter=237 id=507 ch=true tag [18] // 
.\iter=238 id=493 ch=false tag [18] // 
.|iter=239 id=481 ch=true tag [18] // 
./iter=240 id=484 ch=false tag [18] // 
.-iter=241 id=576 ch=false tag [18] // 
.\iter=242 id=575 ch=true tag [18] // 
.|iter=243 id=574 ch=false tag [18] // 
./iter=244 id=573 ch=true tag [18] // 
.-iter=245 id=572 ch=false tag [18] // 
.\iter=246 id=571 ch=true tag [18] // 
.|iter=247 id=570 ch=false tag [18] // 
./iter=248 id=567 ch=false tag [18] // 
.-iter=249 id=564 ch=false tag [18] // 
.\iter=250 id=563 ch=true tag [18] // 
.|iter=251 id=562 ch=false tag [18] // 
./iter=252 id=561 ch=false tag [18] // 
.-iter=253 id=560 ch=false tag [18] // 
.\iter=254 id=559 ch=true tag [18] // 
.|iter=255 id=558 ch=false tag [18] // 
./iter=256 id=557 ch=false tag [18] // 
.-iter=257 id=554 ch=false tag [18] // 
.\iter=258 id=553 ch=false tag [18] // 
.|iter=259 id=540 ch=false tag [18] // 
./iter=260 id=546 ch=false tag [18] // 
.-iter=261 id=543 ch=false tag [18] // 
.\iter=262 id=549 ch=false tag [18] // 
.|iter=263 id=541 ch=false tag [18] // 
./iter=264 id=550 ch=false tag [18] // 
.-iter=265 id=542 ch=false tag [18] // 
.\iter=266 id=544 ch=false tag [18] // 
.|iter=267 id=548 ch=false tag [18] // 
./iter=268 id=551 ch=false tag [18] // 
.-iter=269 id=547 ch=false tag [18] // 
.\iter=270 id=545 ch=false tag [18] // 
.|iter=271 id=535 ch=false tag [18] // 
./iter=272 id=534 ch=false tag [18] // 
.-iter=273 id=523 ch=false tag [18] // 
.
iter=274 id=521 ch=false tag [18] // 
.|iter=275 id=515 ch=false tag [18] // 
./iter=276 id=517 ch=false tag [18] // 
.-iter=277 id=513 ch=false tag [18] // 
.\iter=278 id=512 ch=false tag [18] // 
.|iter=279 id=509 ch=false tag [18] // 
./iter=280 id=508 ch=false tag [18] // 
.-iter=281 id=495 ch=false tag [18] // 
.\iter=282 id=501 ch=false tag [18] // 
.|iter=283 id=504 ch=false tag [18] // 
./iter=284 id=498 ch=false tag [18] // 
.-iter=285 id=496 ch=false tag [18] // 
.\iter=286 id=503 ch=false tag [18] // 
.|iter=287 id=499 ch=false tag [18] // 
./iter=288 id=505 ch=false tag [18] // 
.-iter=289 id=497 ch=false tag [18] // 
.\iter=290 id=500 ch=false tag [18] // 
.|iter=291 id=506 ch=false tag [18] // 
./iter=292 id=502 ch=false tag [18] // 
.-iter=293 id=490 ch=false tag [18] // 
.\iter=294 id=489 ch=false tag [18] // 
.|iter=295 id=415 ch=false tag [18] // 
./iter=296 id=416 ch=true tag [18] // 
.-iter=297 id=531 ch=true tag [18] // 
.\iter=298 id=527 ch=false tag [18] // 
.|iter=299 id=528 ch=true tag [18] // 
./iter=300 id=530 ch=false tag [18] // 

 num refines=300
 # Vars: (Total=486, False=305) Quals: (Total=393391, Avg=809.446502, Max=18890, Min=0)
#Iteration Profile = (si=0 tp=138 unsatLHS=67 emptyRHS=41) 
#Queries: umatch=22337, match=2278, ask=29478, valid=3315
SMT stats: pushes=30048, pops=30048, unsats=3475 
TP stats: sets=246, queries=29802, count=235

.-.\.|iter=301 id=486 ch=true tag [18] // 
iter=302 id=482 ch=false tag [18] // 
iter=303 id=483 ch=true tag [18] // 
./iter=304 id=485 ch=false tag [18] // 
.-iter=305 id=447 ch=true tag [18] // 
.\iter=306 id=443 ch=false tag [18] // 
.|iter=307 id=569 ch=false tag [18] // 
./iter=308 id=556 ch=false tag [18] // 
.-iter=309 id=536 ch=true tag [18] // 
.\iter=310 id=566 ch=false tag [18] // 
.|iter=311 id=511 ch=false tag [18] // 
./iter=312 id=491 ch=true tag [18] // 
.-iter=313 id=444 ch=false tag [18] // 
.\iter=314 id=565 ch=true tag [18] // 
.|iter=315 id=510 ch=true tag [18] // 
./iter=316 id=537 ch=false tag [18] // 
.-iter=317 id=555 ch=true tag [18] // 
.\iter=318 id=568 ch=false tag [18] // 
.|iter=319 id=492 ch=false tag [18] // 
./iter=320 id=472 ch=true tag [18] // 
.-iter=321 id=467 ch=true tag [18] // 
.\iter=322 id=462 ch=true tag [18] // 
.|iter=323 id=461 ch=false tag [18] // 
./iter=324 id=403 ch=false tag [18] // 
.-iter=325 id=404 ch=false tag [18] // 
.\iter=326 id=460 ch=false tag [18] // 
.|iter=327 id=452 ch=true tag [18] // 
./iter=328 id=450 ch=true tag [18] // 
.-iter=329 id=459 ch=false tag [18] // 
.\iter=330 id=458 ch=true tag [18] // 
.|iter=331 id=357 ch=false tag [18] // 
./iter=332 id=356 ch=true tag [18] // 
.-iter=333 id=457 ch=true tag [18] // 
.\iter=334 id=358 ch=true tag [18] // 
.|iter=335 id=368 ch=true tag [18] // 
./iter=336 id=367 ch=true tag [18] // 
.-iter=337 id=366 ch=true tag [18] // 
.\iter=338 id=361 ch=true tag [18] // 
.|iter=339 id=360 ch=true tag [18] // 
./iter=340 id=359 ch=true tag [18] // 
.-iter=341 id=365 ch=false tag [18] // 
.\iter=342 id=456 ch=true tag [18] // 
.|iter=343 id=455 ch=true tag [18] // 
./iter=344 id=454 ch=true tag [18] // 
.-iter=345 id=453 ch=true tag [18] // 
.\iter=346 id=451 ch=true tag [18] // 
.|iter=347 id=449 ch=true tag [18] // 
./iter=348 id=448 ch=false tag [18] // 
.-iter=349 id=440 ch=true tag [18] // 
.
iter=350 id=532 ch=true tag [18] // 
.|iter=351 id=524 ch=false tag [18] // 
./iter=352 id=487 ch=true tag [18] // 
.-iter=353 id=480 ch=true tag [18] // 
.\iter=354 id=477 ch=true tag [18] // 
.|iter=355 id=441 ch=false tag [18] // 
./iter=356 id=533 ch=false tag [18] // 
.-iter=357 id=525 ch=false tag [18] // 
.\iter=358 id=488 ch=false tag [18] // 
.|iter=359 id=479 ch=false tag [18] // 
./iter=360 id=478 ch=false tag [18] // 
.-iter=361 id=475 ch=false tag [18] // 
.\iter=362 id=473 ch=false tag [18] // 
.|iter=363 id=470 ch=false tag [18] // 
./iter=364 id=468 ch=false tag [18] // 
.-iter=365 id=465 ch=false tag [18] // 
.\iter=366 id=463 ch=false tag [18] // 
.|iter=367 id=445 ch=true tag [18] // 
./iter=368 id=441 ch=true tag [18] // 
.-iter=369 id=533 ch=true tag [18] // 
.\iter=370 id=488 ch=true tag [18] // 
.|iter=371 id=525 ch=true tag [18] // 
./iter=372 id=479 ch=true tag [18] // 
.-iter=373 id=470 ch=true tag [18] // 
.\iter=374 id=478 ch=true tag [18] // 
.|iter=375 id=468 ch=true tag [18] // 
./iter=376 id=475 ch=true tag [18] // 
.-iter=377 id=465 ch=true tag [18] // 
.\iter=378 id=413 ch=true tag [18] // 
.|iter=379 id=412 ch=true tag [18] // 
./iter=380 id=406 ch=true tag [18] // 
.-iter=381 id=405 ch=true tag [18] // 
.\iter=382 id=409 ch=true tag [18] // 
.|iter=383 id=411 ch=true tag [18] // 
./iter=384 id=401 ch=true tag [18] // 
.-iter=385 id=400 ch=true tag [18] // 
.\iter=386 id=393 ch=true tag [18] // 
.|iter=387 id=392 ch=true tag [18] // 
./iter=388 id=397 ch=true tag [18] // 
.-iter=389 id=399 ch=true tag [18] // 
.\iter=390 id=388 ch=true tag [18] // 
.|iter=391 id=382 ch=true tag [18] // 
./iter=392 id=383 ch=true tag [18] // 
.-iter=393 id=386 ch=true tag [18] // 
.\iter=394 id=377 ch=true tag [18] // 
.|iter=395 id=372 ch=true tag [18] // 
./iter=396 id=364 ch=true tag [18] // 
.-iter=397 id=341 ch=true tag [21] // 
.\iter=398 id=342 ch=true tag [21] // 
.|iter=399 id=346 ch=true tag [21] // 
./iter=400 id=332 ch=true tag [21] // 

 num refines=400
 # Vars: (Total=486, False=232) Quals: (Total=383718, Avg=789.543210, Max=18890, Min=0)
#Iteration Profile = (si=0 tp=188 unsatLHS=80 emptyRHS=60) 
#Queries: umatch=22372, match=2359, ask=39145, valid=3394
SMT stats: pushes=39765, pops=39765, unsats=3554 
TP stats: sets=296, queries=39469, count=270

.-.\.|iter=401 id=335 ch=true tag [21] // 
iter=402 id=338 ch=true tag [21] // 
iter=403 id=522 ch=false tag [18] // 
./iter=404 id=21 ch=false tag [14] // 
.-iter=405 id=33 ch=true tag [14] // 
.\iter=406 id=32 ch=true tag [14] // 
.|iter=407 id=26 ch=true tag [14] // 
./iter=408 id=258 ch=false tag [14] // 
.-iter=409 id=217 ch=false tag [14] // 
.\iter=410 id=166 ch=false tag [14] // 
.|iter=411 id=132 ch=false tag [14] // 
./iter=412 id=289 ch=false tag [14] // 
.-iter=413 id=285 ch=false tag [14] // 
.\iter=414 id=311 ch=false tag [14] // 
.|iter=415 id=301 ch=false tag [14] // 
./iter=416 id=300 ch=false tag [14] // 
.-iter=417 id=299 ch=false tag [14] // 
.\iter=418 id=296 ch=false tag [14] // 
.|iter=419 id=280 ch=false tag [14] // 
./iter=420 id=225 ch=false tag [14] // 
.-iter=421 id=220 ch=false tag [14] // 
.\iter=422 id=257 ch=false tag [14] // 
.|iter=423 id=253 ch=false tag [14] // 
./iter=424 id=254 ch=false tag [14] // 
.-iter=425 id=174 ch=false tag [14] // 
.
iter=426 id=169 ch=false tag [14] // 
.|iter=427 id=214 ch=false tag [14] // 
./iter=428 id=215 ch=false tag [14] // 
.-iter=429 id=213 ch=false tag [14] // 
.\iter=430 id=209 ch=false tag [14] // 
.|iter=431 id=210 ch=false tag [14] // 
./iter=432 id=140 ch=false tag [14] // 
.-iter=433 id=135 ch=false tag [14] // 
.\iter=434 id=165 ch=false tag [14] // 
.|iter=435 id=161 ch=false tag [14] // 
./iter=436 id=162 ch=false tag [14] // 
.-iter=437 id=205 ch=false tag [14] // 
.\iter=438 id=243 ch=false tag [14] // 
.|iter=439 id=157 ch=false tag [14] // 
./iter=440 id=195 ch=false tag [14] // 
.-iter=441 id=248 ch=false tag [14] // 
.\iter=442 id=200 ch=false tag [14] // 
.|iter=443 id=208 ch=false tag [14] // 
./iter=444 id=255 ch=false tag [14] // 
.-iter=445 id=160 ch=false tag [14] // 
.\iter=446 id=198 ch=false tag [14] // 
.|iter=447 id=250 ch=false tag [14] // 
./iter=448 id=203 ch=false tag [14] // 
.-iter=449 id=206 ch=false tag [14] // 
.\iter=450 id=244 ch=false tag [14] // 
.|iter=451 id=211 ch=false tag [14] // 
./iter=452 id=249 ch=false tag [14] // 
.-iter=453 id=163 ch=false tag [14] // 
.\iter=454 id=201 ch=false tag [14] // 
.|iter=455 id=247 ch=false tag [14] // 
./iter=456 id=270 ch=false tag [14] // 
.-iter=457 id=199 ch=false tag [14] // 
.\iter=458 id=252 ch=false tag [14] // 
.|iter=459 id=156 ch=false tag [14] // 
./iter=460 id=194 ch=false tag [14] // 
.-iter=461 id=204 ch=false tag [14] // 
.\iter=462 id=245 ch=false tag [14] // 
.|iter=463 id=242 ch=false tag [14] // 
./iter=464 id=241 ch=false tag [14] // 
.-iter=465 id=240 ch=false tag [14] // 
.\iter=466 id=196 ch=false tag [14] // 
.|iter=467 id=193 ch=false tag [14] // 
./iter=468 id=192 ch=false tag [14] // 
.-iter=469 id=191 ch=false tag [14] // 
.\iter=470 id=158 ch=false tag [14] // 
.|iter=471 id=155 ch=false tag [14] // 
./iter=472 id=154 ch=false tag [14] // 
.-iter=473 id=153 ch=false tag [14] // 
.\iter=474 id=54 ch=false tag [14] // 
.|iter=475 id=49 ch=false tag [14] // 
./iter=476 id=104 ch=false tag [14] // 
.-iter=477 id=103 ch=false tag [14] // 
.\iter=478 id=100 ch=false tag [14] // 
.|iter=479 id=89 ch=false tag [14] // 
./iter=480 id=88 ch=false tag [14] // 
.-iter=481 id=87 ch=false tag [14] // 
.\iter=482 id=78 ch=false tag [14] // 
.|iter=483 id=77 ch=false tag [14] // 
./iter=484 id=76 ch=false tag [14] // 
.-iter=485 id=69 ch=false tag [14] // 
.\iter=486 id=68 ch=false tag [14] // 
.|iter=487 id=65 ch=false tag [14] // 
./iter=488 id=40 ch=false tag [14] // 
.-iter=489 id=39 ch=false tag [14] // 
.\iter=490 id=38 ch=false tag [14] // 
.|iter=491 id=21 ch=true tag [14] // 
./iter=492 id=258 ch=false tag [14] // 
.-iter=493 id=217 ch=false tag [14] // 
.\iter=494 id=166 ch=false tag [14] // 
.|iter=495 id=132 ch=false tag [14] // 
./iter=496 id=289 ch=false tag [14] // 
.-iter=497 id=285 ch=false tag [14] // 
.\iter=498 id=311 ch=false tag [14] // 
.|iter=499 id=301 ch=false tag [14] // 
./iter=500 id=300 ch=false tag [14] // 

 num refines=500
 # Vars: (Total=486, False=225) Quals: (Total=382498, Avg=787.032922, Max=18890, Min=0)
#Iteration Profile = (si=0 tp=194 unsatLHS=173 emptyRHS=61) 
#Queries: umatch=305624, match=2639, ask=40443, valid=3481
SMT stats: pushes=41069, pops=41069, unsats=3641 
TP stats: sets=302, queries=40767, count=278

.-.
.|iter=501 id=299 ch=false tag [14] // 
iter=502 id=296 ch=false tag [14] // 
iter=503 id=280 ch=false tag [14] // 
./iter=504 id=225 ch=false tag [14] // 
.-iter=505 id=220 ch=false tag [14] // 
.\iter=506 id=257 ch=false tag [14] // 
.|iter=507 id=253 ch=false tag [14] // 
./iter=508 id=254 ch=false tag [14] // 
.-iter=509 id=174 ch=false tag [14] // 
.\iter=510 id=169 ch=false tag [14] // 
.|iter=511 id=214 ch=false tag [14] // 
./iter=512 id=215 ch=false tag [14] // 
.-iter=513 id=213 ch=false tag [14] // 
.\iter=514 id=209 ch=false tag [14] // 
.|iter=515 id=210 ch=false tag [14] // 
./iter=516 id=140 ch=false tag [14] // 
.-iter=517 id=135 ch=false tag [14] // 
.\iter=518 id=165 ch=false tag [14] // 
.|iter=519 id=161 ch=false tag [14] // 
./iter=520 id=162 ch=false tag [14] // 
.-iter=521 id=198 ch=false tag [14] // 
.\iter=522 id=157 ch=false tag [14] // 
.|iter=523 id=208 ch=false tag [14] // 
./iter=524 id=247 ch=false tag [14] // 
.-iter=525 id=203 ch=false tag [14] // 
.\iter=526 id=252 ch=false tag [14] // 
.|iter=527 id=200 ch=false tag [14] // 
./iter=528 id=160 ch=false tag [14] // 
.-iter=529 id=270 ch=false tag [14] // 
.\iter=530 id=249 ch=false tag [14] // 
.|iter=531 id=205 ch=false tag [14] // 
./iter=532 id=244 ch=false tag [14] // 
.-iter=533 id=195 ch=false tag [14] // 
.\iter=534 id=199 ch=false tag [14] // 
.|iter=535 id=248 ch=false tag [14] // 
./iter=536 id=243 ch=false tag [14] // 
.-iter=537 id=204 ch=false tag [14] // 
.\iter=538 id=163 ch=false tag [14] // 
.|iter=539 id=194 ch=false tag [14] // 
./iter=540 id=201 ch=false tag [14] // 
.-iter=541 id=211 ch=false tag [14] // 
.\iter=542 id=250 ch=false tag [14] // 
.|iter=543 id=206 ch=false tag [14] // 
./iter=544 id=255 ch=false tag [14] // 
.-iter=545 id=156 ch=false tag [14] // 
.\iter=546 id=245 ch=false tag [14] // 
.|iter=547 id=242 ch=false tag [14] // 
./iter=548 id=241 ch=false tag [14] // 
.-iter=549 id=240 ch=false tag [14] // 
.\iter=550 id=196 ch=false tag [14] // 
.|iter=551 id=193 ch=false tag [14] // 
./iter=552 id=192 ch=false tag [14] // 
.-iter=553 id=191 ch=false tag [14] // 
.\iter=554 id=158 ch=false tag [14] // 
.|iter=555 id=155 ch=false tag [14] // 
./iter=556 id=154 ch=false tag [14] // 
.-iter=557 id=153 ch=false tag [14] // 
.\iter=558 id=54 ch=false tag [14] // 
.|iter=559 id=49 ch=false tag [14] // 
./iter=560 id=104 ch=false tag [14] // 
.-iter=561 id=103 ch=false tag [14] // 
.\iter=562 id=100 ch=false tag [14] // 
.|iter=563 id=89 ch=false tag [14] // 
./iter=564 id=88 ch=false tag [14] // 
.-iter=565 id=87 ch=false tag [14] // 
.\iter=566 id=78 ch=false tag [14] // 
.|iter=567 id=77 ch=false tag [14] // 
./iter=568 id=76 ch=false tag [14] // 
.-iter=569 id=69 ch=false tag [14] // 
.\iter=570 id=68 ch=false tag [14] // 
.|iter=571 id=65 ch=false tag [14] // 
./iter=572 id=40 ch=true tag [14] // 
.-iter=573 id=39 ch=true tag [14] // 
.\iter=574 id=38 ch=true tag [14] // 
.|iter=575 id=258 ch=true tag [14] // 
./iter=576 id=217 ch=true tag [14] // 
.-iter=577 id=166 ch=false tag [14] // 
.
iter=578 id=132 ch=false tag [14] // 
.|iter=579 id=289 ch=true tag [14] // 
./iter=580 id=285 ch=true tag [14] // 
.-iter=581 id=311 ch=true tag [14] // 
.\iter=582 id=301 ch=false tag [14] // 
.|iter=583 id=300 ch=false tag [14] // 
./iter=584 id=299 ch=false tag [14] // 
.-iter=585 id=296 ch=false tag [14] // 
.\iter=586 id=280 ch=true tag [14] // 
.|iter=587 id=225 ch=true tag [14] // 
./iter=588 id=220 ch=true tag [14] // 
.-iter=589 id=257 ch=true tag [14] // 
.\iter=590 id=253 ch=true tag [14] // 
.|iter=591 id=254 ch=true tag [14] // 
./iter=592 id=174 ch=true tag [14] // 
.-iter=593 id=169 ch=true tag [14] // 
.\iter=594 id=214 ch=true tag [14] // 
.|iter=595 id=215 ch=true tag [14] // 
./iter=596 id=213 ch=false tag [14] // 
.-iter=597 id=209 ch=true tag [14] // 
.\iter=598 id=210 ch=false tag [14] // 
.|iter=599 id=140 ch=true tag [14] // 
./iter=600 id=135 ch=true tag [14] // 

 num refines=600
 # Vars: (Total=486, False=205) Quals: (Total=280694, Avg=577.559671, Max=18890, Min=0)
#Iteration Profile = (si=0 tp=219 unsatLHS=244 emptyRHS=62) 
#Queries: umatch=573737, match=12799, ask=147509, valid=8771
SMT stats: pushes=148160, pops=148160, unsats=8931 
TP stats: sets=327, queries=147833, count=363

.-.\.|iter=601 id=165 ch=false tag [14] // 
iter=602 id=161 ch=true tag [14] // 
iter=603 id=162 ch=false tag [14] // 
./iter=604 id=200 ch=false tag [14] // 
.-iter=605 id=160 ch=false tag [14] // 
.\iter=606 id=270 ch=true tag [14] // 
.|iter=607 id=249 ch=false tag [14] // 
./iter=608 id=205 ch=false tag [14] // 
.-iter=609 id=244 ch=false tag [14] // 
.\iter=610 id=195 ch=false tag [14] // 
.|iter=611 id=203 ch=false tag [14] // 
./iter=612 id=252 ch=false tag [14] // 
.-iter=613 id=208 ch=false tag [14] // 
.\iter=614 id=247 ch=false tag [14] // 
.|iter=615 id=157 ch=false tag [14] // 
./iter=616 id=198 ch=false tag [14] // 
.-iter=617 id=201 ch=false tag [14] // 
.\iter=618 id=211 ch=true tag [14] // 
.|iter=619 id=250 ch=false tag [14] // 
./iter=620 id=206 ch=false tag [14] // 
.-iter=621 id=255 ch=true tag [14] // 
.\iter=622 id=156 ch=false tag [14] // 
.|iter=623 id=243 ch=false tag [14] // 
./iter=624 id=204 ch=true tag [14] // 
.-iter=625 id=163 ch=true tag [14] // 
.\iter=626 id=194 ch=false tag [14] // 
.|iter=627 id=248 ch=true tag [14] // 
./iter=628 id=199 ch=false tag [14] // 
.-iter=629 id=245 ch=false tag [14] // 
.\iter=630 id=242 ch=false tag [14] // 
.|iter=631 id=241 ch=false tag [14] // 
./iter=632 id=240 ch=false tag [14] // 
.-iter=633 id=196 ch=false tag [14] // 
.\iter=634 id=193 ch=false tag [14] // 
.|iter=635 id=192 ch=false tag [14] // 
./iter=636 id=191 ch=false tag [14] // 
.-iter=637 id=158 ch=false tag [14] // 
.\iter=638 id=155 ch=false tag [14] // 
.|iter=639 id=154 ch=false tag [14] // 
./iter=640 id=153 ch=false tag [14] // 
.-iter=641 id=54 ch=true tag [14] // 
.\iter=642 id=49 ch=true tag [14] // 
.|iter=643 id=104 ch=false tag [14] // 
./iter=644 id=103 ch=false tag [14] // 
.-iter=645 id=100 ch=false tag [14] // 
.\iter=646 id=89 ch=false tag [14] // 
.|iter=647 id=88 ch=false tag [14] // 
./iter=648 id=87 ch=false tag [14] // 
.-iter=649 id=78 ch=false tag [14] // 
.\iter=650 id=77 ch=false tag [14] // 
.|iter=651 id=76 ch=false tag [14] // 
./iter=652 id=69 ch=true tag [14] // 
.-iter=653 id=68 ch=true tag [14] // 
.
iter=654 id=65 ch=true tag [14] // 
.|iter=655 id=201 ch=false tag [14] // 
./iter=656 id=208 ch=true tag [14] // 
.-iter=657 id=203 ch=false tag [14] // 
.\iter=658 id=198 ch=false tag [14] // 
.|iter=659 id=250 ch=true tag [14] // 
./iter=660 id=252 ch=true tag [14] // 
.-iter=661 id=247 ch=true tag [14] // 
.\iter=662 id=206 ch=true tag [14] // 
.|iter=663 id=156 ch=true tag [14] // 
./iter=664 id=160 ch=false tag [14] // 
.-iter=665 id=104 ch=true tag [14] // 
.\iter=666 id=103 ch=true tag [14] // 
.|iter=667 id=100 ch=true tag [14] // 
./iter=668 id=89 ch=true tag [14] // 
.-iter=669 id=88 ch=true tag [14] // 
.\iter=670 id=87 ch=true tag [14] // 
.|iter=671 id=78 ch=false tag [14] // 
./iter=672 id=77 ch=false tag [14] // 
.-iter=673 id=76 ch=false tag [14] // 
.\iter=674 id=243 ch=true tag [14] // 
.|iter=675 id=245 ch=true tag [14] // 
./iter=676 id=242 ch=false tag [14] // 
.-iter=677 id=241 ch=false tag [14] // 
.\iter=678 id=240 ch=true tag [14] // 
.|iter=679 id=199 ch=true tag [14] // 
./iter=680 id=203 ch=false tag [14] // 
.-iter=681 id=201 ch=true tag [14] // 
.\iter=682 id=194 ch=true tag [14] // 
.|iter=683 id=198 ch=false tag [14] // 
./iter=684 id=196 ch=true tag [14] // 
.-iter=685 id=193 ch=false tag [14] // 
.\iter=686 id=192 ch=false tag [14] // 
.|iter=687 id=191 ch=true tag [14] // 
./iter=688 id=158 ch=true tag [14] // 
.-iter=689 id=104 ch=false tag [14] // 
.\iter=690 id=103 ch=true tag [14] // 
.|iter=691 id=100 ch=true tag [14] // 
./iter=692 id=258 ch=true tag [14] // 
.-iter=693 id=217 ch=false tag [14] // 
.\iter=694 id=166 ch=false tag [14] // 
.|iter=695 id=132 ch=false tag [14] // 
./iter=696 id=289 ch=true tag [14] // 
.-iter=697 id=285 ch=true tag [14] // 
.\iter=698 id=301 ch=false tag [14] // 
.|iter=699 id=300 ch=true tag [14] // 
./iter=700 id=299 ch=true tag [14] // 

 num refines=700
 # Vars: (Total=486, False=183) Quals: (Total=170707, Avg=351.248971, Max=7657, Min=0)
#Iteration Profile = (si=0 tp=269 unsatLHS=281 emptyRHS=69) 
#Queries: umatch=655416, match=19406, ask=265024, valid=16330
SMT stats: pushes=265725, pops=265725, unsats=16490 
TP stats: sets=377, queries=265348, count=512

.-.\.|iter=701 id=296 ch=false tag [14] // 
iter=702 id=280 ch=true tag [14] // 
iter=703 id=225 ch=true tag [14] // 
./iter=704 id=220 ch=true tag [14] // 
.-iter=705 id=257 ch=true tag [14] // 
.\iter=706 id=253 ch=true tag [14] // 
.|iter=707 id=174 ch=true tag [14] // 
./iter=708 id=169 ch=true tag [14] // 
.-iter=709 id=214 ch=false tag [14] // 
.\iter=710 id=213 ch=false tag [14] // 
.|iter=711 id=209 ch=true tag [14] // 
./iter=712 id=140 ch=true tag [14] // 
.-iter=713 id=135 ch=true tag [14] // 
.\iter=714 id=165 ch=false tag [14] // 
.|iter=715 id=161 ch=true tag [14] // 
./iter=716 id=208 ch=false tag [14] // 
.-iter=717 id=248 ch=true tag [14] // 
.\iter=718 id=156 ch=true tag [14] // 
.|iter=719 id=252 ch=false tag [14] // 
./iter=720 id=160 ch=false tag [14] // 
.-iter=721 id=247 ch=false tag [14] // 
.\iter=722 id=204 ch=true tag [14] // 
.|iter=723 id=155 ch=false tag [14] // 
./iter=724 id=154 ch=false tag [14] // 
.-iter=725 id=153 ch=false tag [14] // 
.\iter=726 id=54 ch=true tag [14] // 
.|iter=727 id=49 ch=true tag [14] // 
./iter=728 id=89 ch=false tag [14] // 
.-iter=729 id=69 ch=true tag [14] // 
.
iter=730 id=68 ch=true tag [14] // 
.|iter=731 id=65 ch=true tag [14] // 
./iter=732 id=88 ch=false tag [14] // 
.-iter=733 id=87 ch=false tag [14] // 
.\iter=734 id=243 ch=true tag [14] // 
.|iter=735 id=242 ch=false tag [14] // 
./iter=736 id=241 ch=false tag [14] // 
.-iter=737 id=240 ch=false tag [14] // 
.\iter=738 id=78 ch=false tag [14] // 
.|iter=739 id=77 ch=true tag [14] // 
./iter=740 id=76 ch=false tag [14] // 
.-iter=741 id=199 ch=true tag [14] // 
.\iter=742 id=194 ch=true tag [14] // 
.|iter=743 id=203 ch=false tag [14] // 
./iter=744 id=198 ch=false tag [14] // 
.-iter=745 id=193 ch=false tag [14] // 
.\iter=746 id=192 ch=false tag [14] // 
.|iter=747 id=191 ch=false tag [14] // 
./iter=748 id=104 ch=true tag [14] // 
.-iter=749 id=103 ch=true tag [14] // 
.\iter=750 id=100 ch=false tag [14] // 
.|iter=751 id=33 ch=true tag [14] // 
./iter=752 id=32 ch=true tag [14] // 
.-iter=753 id=26 ch=true tag [14] // 
.\iter=754 id=21 ch=true tag [14] // 
.|iter=755 id=258 ch=true tag [14] // 
./iter=756 id=217 ch=false tag [14] // 
.-iter=757 id=166 ch=false tag [14] // 
.\iter=758 id=132 ch=false tag [14] // 
.|iter=759 id=289 ch=false tag [14] // 
./iter=760 id=285 ch=false tag [14] // 
.-iter=761 id=301 ch=false tag [14] // 
.\iter=762 id=300 ch=false tag [14] // 
.|iter=763 id=40 ch=true tag [14] // 
./iter=764 id=39 ch=true tag [14] // 
.-iter=765 id=38 ch=true tag [14] // 
.\iter=766 id=299 ch=false tag [14] // 
.|iter=767 id=89 ch=false tag [14] // 
./iter=768 id=296 ch=false tag [14] // 
.-iter=769 id=280 ch=true tag [14] // 
.\iter=770 id=225 ch=true tag [14] // 
.|iter=771 id=220 ch=true tag [14] // 
./iter=772 id=257 ch=true tag [14] // 
.-iter=773 id=253 ch=true tag [14] // 
.\iter=774 id=174 ch=true tag [14] // 
.|iter=775 id=169 ch=true tag [14] // 
./iter=776 id=214 ch=false tag [14] // 
.-iter=777 id=213 ch=false tag [14] // 
.\iter=778 id=209 ch=true tag [14] // 
.|iter=779 id=140 ch=true tag [14] // 
./iter=780 id=135 ch=true tag [14] // 
.-iter=781 id=165 ch=false tag [14] // 
.\iter=782 id=161 ch=true tag [14] // 
.|iter=783 id=247 ch=false tag [14] // 
./iter=784 id=160 ch=false tag [14] // 
.-iter=785 id=252 ch=false tag [14] // 
.\iter=786 id=208 ch=false tag [14] // 
.|iter=787 id=248 ch=true tag [14] // 
./iter=788 id=204 ch=true tag [14] // 
.-iter=789 id=243 ch=true tag [14] // 
.\iter=790 id=156 ch=true tag [14] // 
.|iter=791 id=242 ch=false tag [14] // 
./iter=792 id=241 ch=false tag [14] // 
.-iter=793 id=240 ch=false tag [14] // 
.\iter=794 id=155 ch=false tag [14] // 
.|iter=795 id=154 ch=false tag [14] // 
./iter=796 id=153 ch=false tag [14] // 
.-iter=797 id=54 ch=true tag [14] // 
.\iter=798 id=49 ch=true tag [14] // 
.|iter=799 id=88 ch=false tag [14] // 
./iter=800 id=87 ch=false tag [14] // 

 num refines=800
 # Vars: (Total=486, False=183) Quals: (Total=155601, Avg=320.166667, Max=7657, Min=0)
#Iteration Profile = (si=0 tp=362 unsatLHS=281 emptyRHS=69) 
#Queries: umatch=655416, match=26888, ask=289679, valid=25879
SMT stats: pushes=290473, pops=290473, unsats=26039 
TP stats: sets=470, queries=290003, count=612

.-.\.|iter=801 id=78 ch=false tag [14] // 
iter=802 id=77 ch=false tag [14] // 
iter=803 id=69 ch=true tag [14] // 
./iter=804 id=68 ch=true tag [14] // 
.-iter=805 id=65 ch=true tag [14] // 
.
iter=806 id=104 ch=false tag [14] // 
.|iter=807 id=76 ch=false tag [14] // 
./iter=808 id=103 ch=false tag [14] // 
.-iter=809 id=199 ch=true tag [14] // 
.\iter=810 id=194 ch=true tag [14] // 
.|iter=811 id=203 ch=false tag [14] // 
./iter=812 id=198 ch=false tag [14] // 
.-iter=813 id=193 ch=false tag [14] // 
.\iter=814 id=192 ch=false tag [14] // 
.|iter=815 id=191 ch=false tag [14] // 
./iter=816 id=100 ch=false tag [14] // 
.-iter=817 id=258 ch=true tag [14] // 
.\iter=818 id=217 ch=false tag [14] // 
.|iter=819 id=166 ch=false tag [14] // 
./iter=820 id=132 ch=false tag [14] // 
.-iter=821 id=289 ch=false tag [14] // 
.\iter=822 id=285 ch=false tag [14] // 
.|iter=823 id=301 ch=false tag [14] // 
./iter=824 id=300 ch=false tag [14] // 
.-iter=825 id=89 ch=false tag [14] // 
.\iter=826 id=88 ch=false tag [14] // 
.|iter=827 id=87 ch=false tag [14] // 
./iter=828 id=78 ch=false tag [14] // 
.-iter=829 id=77 ch=false tag [14] // 
.\iter=830 id=299 ch=false tag [14] // 
.|iter=831 id=296 ch=false tag [14] // 
./iter=832 id=280 ch=false tag [14] // 
.-iter=833 id=326 ch=true tag [14] // 
.\iter=834 id=325 ch=true tag [14] // 
.|iter=835 id=324 ch=true tag [14] // 
./iter=836 id=323 ch=true tag [14] // 
.-iter=837 id=322 ch=false tag [14] // 
.\iter=838 id=307 ch=true tag [14] // 
.|iter=839 id=302 ch=true tag [14] // 
./iter=840 id=319 ch=true tag [14] // 
.-iter=841 id=318 ch=false tag [14] // 
.\iter=842 id=317 ch=true tag [14] // 
.|iter=843 id=316 ch=false tag [14] // 
./iter=844 id=315 ch=false tag [14] // 
.-iter=845 id=314 ch=true tag [14] // 
.\iter=846 id=313 ch=true tag [14] // 
.|iter=847 id=306 ch=true tag [14] // 
./iter=848 id=305 ch=true tag [14] // 
.-iter=849 id=310 ch=true tag [14] // 
.\iter=850 id=312 ch=true tag [14] // 
.|iter=851 id=269 ch=false tag [14] // 
./iter=852 id=268 ch=false tag [14] // 
.-iter=853 id=267 ch=false tag [14] // 
.\iter=854 id=266 ch=true tag [14] // 
.|iter=855 id=265 ch=true tag [14] // 
./iter=856 id=264 ch=true tag [14] // 
.-iter=857 id=263 ch=true tag [14] // 
.\iter=858 id=262 ch=true tag [14] // 
.|iter=859 id=261 ch=true tag [14] // 
./iter=860 id=260 ch=true tag [14] // 
.-iter=861 id=259 ch=true tag [14] // 
.\iter=862 id=216 ch=false tag [14] // 
.|iter=863 id=30 ch=true tag [14] // 
./iter=864 id=19 ch=true tag [14] // 
.-iter=865 id=295 ch=true tag [14] // 
.\iter=866 id=292 ch=true tag [14] // 
.|iter=867 id=283 ch=true tag [14] // 
./iter=868 id=275 ch=false tag [14] // 
.-iter=869 id=274 ch=false tag [14] // 
.\iter=870 id=273 ch=true tag [14] // 
.|iter=871 id=272 ch=false tag [14] // 
./iter=872 id=271 ch=true tag [14] // 
.-iter=873 id=256 ch=true tag [14] // 
.\iter=874 id=251 ch=true tag [14] // 
.|iter=875 id=246 ch=true tag [14] // 
./iter=876 id=212 ch=true tag [14] // 
.-iter=877 id=207 ch=true tag [14] // 
.\iter=878 id=202 ch=true tag [14] // 
.|iter=879 id=197 ch=true tag [14] // 
./iter=880 id=164 ch=true tag [14] // 
.-iter=881 id=159 ch=true tag [14] // 
.
iter=882 id=129 ch=false tag [14] // 
.|iter=883 id=128 ch=false tag [14] // 
./iter=884 id=127 ch=true tag [14] // 
.-iter=885 id=126 ch=false tag [14] // 
.\iter=886 id=123 ch=false tag [14] // 
.|iter=887 id=122 ch=false tag [14] // 
./iter=888 id=121 ch=true tag [14] // 
.-iter=889 id=120 ch=true tag [14] // 
.\iter=890 id=117 ch=false tag [14] // 
.|iter=891 id=114 ch=false tag [14] // 
./iter=892 id=113 ch=false tag [14] // 
.-iter=893 id=112 ch=true tag [14] // 
.\iter=894 id=111 ch=true tag [14] // 
.|iter=895 id=110 ch=true tag [14] // 
./iter=896 id=109 ch=false tag [14] // 
.-iter=897 id=106 ch=false tag [14] // 
.\iter=898 id=105 ch=false tag [14] // 
.|iter=899 id=93 ch=false tag [14] // 
./iter=900 id=90 ch=false tag [14] // 

 num refines=900
 # Vars: (Total=486, False=147) Quals: (Total=106210, Avg=218.539095, Max=7384, Min=0)
#Iteration Profile = (si=0 tp=409 unsatLHS=281 emptyRHS=93) 
#Queries: umatch=655416, match=27836, ask=343771, valid=30629
SMT stats: pushes=344612, pops=344612, unsats=30789 
TP stats: sets=517, queries=344095, count=665

.-.\.|iter=901 id=82 ch=false tag [14] // 
iter=902 id=79 ch=false tag [14] // 
iter=903 id=71 ch=false tag [14] // 
./iter=904 id=70 ch=false tag [14] // 
.-iter=905 id=66 ch=false tag [14] // 
.\iter=906 id=118 ch=true tag [14] // 
.|iter=907 id=115 ch=false tag [14] // 
./iter=908 id=116 ch=true tag [14] // 
.-iter=909 id=119 ch=false tag [14] // 
.\iter=910 id=107 ch=true tag [14] // 
.|iter=911 id=108 ch=false tag [14] // 
./iter=912 id=102 ch=true tag [14] // 
.-iter=913 id=101 ch=false tag [14] // 
.\iter=914 id=94 ch=true tag [14] // 
.|iter=915 id=95 ch=false tag [14] // 
./iter=916 id=83 ch=true tag [14] // 
.-iter=917 id=84 ch=false tag [14] // 
.\iter=918 id=67 ch=true tag [14] // 
.|iter=919 id=46 ch=true tag [14] // 
./iter=920 id=7 ch=false tag [14] // 
.-iter=921 id=8 ch=true tag [14] // 
.\iter=922 id=11 ch=false tag [14] // 
.|iter=923 id=12 ch=true tag [14] // 
./iter=924 id=298 ch=true tag [14] // 
.-iter=925 id=290 ch=false tag [14] // 
.\iter=926 id=291 ch=false tag [14] // 
.|iter=927 id=309 ch=false tag [14] // 
./iter=928 id=286 ch=false tag [14] // 
.-iter=929 id=303 ch=false tag [14] // 
.\iter=930 id=308 ch=false tag [14] // 
.|iter=931 id=320 ch=true tag [14] // 
./iter=932 id=304 ch=true tag [14] // 
.-iter=933 id=287 ch=true tag [14] // 
.\iter=934 id=321 ch=false tag [14] // 
.|iter=935 id=297 ch=false tag [14] // 
./iter=936 id=34 ch=true tag [14] // 
.-iter=937 id=137 ch=false tag [14] // 
.\iter=938 id=22 ch=false tag [14] // 
.|iter=939 id=27 ch=true tag [14] // 
./iter=940 id=131 ch=false tag [14] // 
.-iter=941 id=51 ch=false tag [14] // 
.\iter=942 id=130 ch=false tag [14] // 
.|iter=943 id=23 ch=false tag [14] // 
./iter=944 id=222 ch=false tag [14] // 
.-iter=945 id=125 ch=false tag [14] // 
.\iter=946 id=81 ch=false tag [14] // 
.|iter=947 id=276 ch=true tag [14] // 
./iter=948 id=171 ch=false tag [14] // 
.-iter=949 id=80 ch=false tag [14] // 
.\iter=950 id=28 ch=false tag [14] // 
.|iter=951 id=170 ch=false tag [14] // 
./iter=952 id=124 ch=false tag [14] // 
.-iter=953 id=91 ch=false tag [14] // 
.\iter=954 id=92 ch=false tag [14] // 
.|iter=955 id=136 ch=false tag [14] // 
./iter=956 id=282 ch=false tag [14] // 
.-iter=957 id=277 ch=false tag [14] // 
.
iter=958 id=221 ch=false tag [14] // 
.|iter=959 id=55 ch=false tag [14] // 
./iter=960 id=226 ch=false tag [14] // 
.-iter=961 id=175 ch=false tag [14] // 
.\iter=962 id=227 ch=false tag [14] // 
.|iter=963 id=281 ch=true tag [14] // 
./iter=964 id=56 ch=false tag [14] // 
.-iter=965 id=72 ch=false tag [14] // 
.\iter=966 id=176 ch=false tag [14] // 
.|iter=967 id=73 ch=false tag [14] // 
./iter=968 id=50 ch=false tag [14] // 
.-iter=969 id=142 ch=false tag [14] // 
.\iter=970 id=141 ch=true tag [14] // 
.|iter=971 id=35 ch=false tag [14] // 
./iter=972 id=308 ch=false tag [14] // 
.-iter=973 id=291 ch=true tag [14] // 
.\iter=974 id=175 ch=true tag [14] // 
.|iter=975 id=55 ch=true tag [14] // 
./iter=976 id=226 ch=true tag [14] // 
.-iter=977 id=136 ch=true tag [14] // 
.\iter=978 id=170 ch=true tag [14] // 
.|iter=979 id=50 ch=true tag [14] // 
./iter=980 id=221 ch=true tag [14] // 
.-iter=981 id=130 ch=true tag [14] // 
.\iter=982 id=72 ch=true tag [14] // 
.|iter=983 id=91 ch=true tag [14] // 
./iter=984 id=124 ch=true tag [14] // 
.-iter=985 id=80 ch=true tag [14] // 
.\iter=986 id=45 ch=false tag [14] // 
.|iter=987 id=44 ch=false tag [14] // 
./iter=988 id=43 ch=true tag [14] // 
.-iter=989 id=42 ch=true tag [14] // 
.\iter=990 id=41 ch=true tag [14] // 
.|iter=991 id=47 ch=false tag [14] // 
./iter=992 id=96 ch=false tag [14] // 
.-iter=993 id=61 ch=false tag [14] // 
.\iter=994 id=52 ch=false tag [14] // 
.|iter=995 id=57 ch=false tag [14] // 
./iter=996 id=232 ch=true tag [14] // 
.-iter=997 id=223 ch=true tag [14] // 
.\iter=998 id=228 ch=true tag [14] // 
.|iter=999 id=181 ch=true tag [14] // 
./iter=1000 id=172 ch=true tag [14] // 

 num refines=1000
 # Vars: (Total=486, False=107) Quals: (Total=8434, Avg=17.353909, Max=475, Min=0)
#Iteration Profile = (si=0 tp=442 unsatLHS=311 emptyRHS=123) 
#Queries: umatch=735123, match=27839, ask=441481, valid=30635
SMT stats: pushes=442355, pops=442355, unsats=30795 
TP stats: sets=550, queries=441805, count=700

.-.\.|iter=1001 id=177 ch=false tag [14] // 
iter=1002 id=147 ch=true tag [14] // 
iter=1003 id=138 ch=true tag [14] // 
./iter=1004 id=143 ch=false tag [14] // 
.-iter=1005 id=278 ch=false tag [14] // 
.\iter=1006 id=230 ch=true tag [14] // 
.|iter=1007 id=218 ch=false tag [14] // 
./iter=1008 id=179 ch=true tag [14] // 
.-iter=1009 id=167 ch=false tag [14] // 
.\iter=1010 id=145 ch=true tag [14] // 
.|iter=1011 id=133 ch=false tag [14] // 
./iter=1012 id=59 ch=true tag [14] // 
.-iter=1013 id=85 ch=true tag [14] // 
.\iter=1014 id=74 ch=false tag [14] // 
.|iter=1015 id=61 ch=true tag [14] // 
./iter=1016 id=52 ch=true tag [14] // 
.-iter=1017 id=239 ch=true tag [14] // 
.\iter=1018 id=237 ch=true tag [14] // 
.|iter=1019 id=235 ch=true tag [14] // 
./iter=1020 id=190 ch=true tag [14] // 
.-iter=1021 id=188 ch=true tag [14] // 
.\iter=1022 id=186 ch=true tag [14] // 
.|iter=1023 id=184 ch=true tag [14] // 
./iter=1024 id=152 ch=true tag [14] // 
.-iter=1025 id=150 ch=true tag [14] // 
.\iter=1026 id=99 ch=true tag [14] // 
.|iter=1027 id=64 ch=true tag [14] // 
./iter=1028 id=36 ch=true tag [14] // 
.-iter=1029 id=24 ch=true tag [14] // 
.\iter=1030 id=20 ch=false tag [14] // 
.|iter=1031 id=294 ch=false tag [14] // 
./iter=1032 id=293 ch=false tag [14] // 
.-iter=1033 id=288 ch=false tag [14] // 
.
iter=1034 id=284 ch=false tag [14] // 
.|iter=1035 id=238 ch=true tag [14] // 
./iter=1036 id=236 ch=true tag [14] // 
.-iter=1037 id=234 ch=true tag [14] // 
.\iter=1038 id=233 ch=true tag [14] // 
.|iter=1039 id=224 ch=true tag [14] // 
./iter=1040 id=229 ch=true tag [14] // 
.-iter=1041 id=189 ch=true tag [14] // 
.\iter=1042 id=187 ch=true tag [14] // 
.|iter=1043 id=185 ch=true tag [14] // 
./iter=1044 id=183 ch=true tag [14] // 
.-iter=1045 id=182 ch=true tag [14] // 
.\iter=1046 id=173 ch=true tag [14] // 
.|iter=1047 id=178 ch=false tag [14] // 
./iter=1048 id=151 ch=true tag [14] // 
.-iter=1049 id=149 ch=true tag [14] // 
.\iter=1050 id=148 ch=true tag [14] // 
.|iter=1051 id=139 ch=true tag [14] // 
./iter=1052 id=144 ch=false tag [14] // 
.-iter=1053 id=86 ch=true tag [14] // 
.\iter=1054 id=75 ch=false tag [14] // 
.|iter=1055 id=98 ch=true tag [14] // 
./iter=1056 id=97 ch=false tag [14] // 
.-iter=1057 id=63 ch=true tag [14] // 
.\iter=1058 id=62 ch=true tag [14] // 
.|iter=1059 id=53 ch=true tag [14] // 
./iter=1060 id=58 ch=false tag [14] // 
.-iter=1061 id=279 ch=true tag [14] // 
.\iter=1062 id=231 ch=true tag [14] // 
.|iter=1063 id=219 ch=false tag [14] // 
./iter=1064 id=180 ch=true tag [14] // 
.-iter=1065 id=168 ch=false tag [14] // 
.\iter=1066 id=146 ch=true tag [14] // 
.|iter=1067 id=134 ch=false tag [14] // 
./iter=1068 id=60 ch=true tag [14] // 
.-iter=1069 id=48 ch=false tag [14] // 
.\iter=1070 id=37 ch=true tag [14] // 
.|iter=1071 id=25 ch=true tag [14] // 
./iter=1072 id=29 ch=true tag [14] // 
.-iter=1073 id=31 ch=true tag [14] // 
.\iter=1074 id=20 ch=true tag [14] // 
.|iter=1075 id=294 ch=true tag [14] // 
./iter=1076 id=293 ch=true tag [14] // 
.-iter=1077 id=288 ch=true tag [14] // 
.\iter=1078 id=284 ch=false tag [14] // 
.|iter=1079 id=9 ch=true tag [14] // 
./iter=1080 id=3 ch=true tag [14] // 
.-iter=1081 id=4 ch=true tag [14] // 
.\iter=1082 id=5 ch=true tag [14] // 
.|iter=1083 id=1 ch=false tag [14] // 
./iter=1084 id=665 ch=true tag [3] // 
.-iter=1085 id=666 ch=true tag [3] // 
.\iter=1086 id=423 ch=false tag [18] // 
.|iter=1087 id=429 ch=false tag [18] // 
./iter=1088 id=426 ch=false tag [18] // 
.-iter=1089 id=432 ch=false tag [18] // 
.\iter=1090 id=424 ch=false tag [18] // 
.|iter=1091 id=428 ch=false tag [18] // 
./iter=1092 id=433 ch=false tag [18] // 
.-iter=1093 id=431 ch=false tag [18] // 
.\iter=1094 id=430 ch=false tag [18] // 
.|iter=1095 id=425 ch=false tag [18] // 
./iter=1096 id=427 ch=false tag [18] // 
.-iter=1097 id=434 ch=false tag [18] // 
.\
DONE: Fixpoint Refinement Loop 

DONE: Simplify Solution 
#Constraints: 678 (simple = 0) 
#Iterations = 1097
Iteration Frequency: 
ITERFREQ: 1 times (ch = false) 255 constraints 1,7,11,16,20,21,22,23,28,35,38,39,40,44,45,47,48,50,51,52,55,56,57,58,61,66,677,70,678,71,72,73,74,75,79,80,81,82,84,90,91,92,93,95,96,97,101,105,106,108,109,113,114,115,117,119,122,123,124,125,126,128,129,130,131,133,134,136,137,142,143,144,167,168,170,171,175,176,177,178,216,218,219,221,222,226,227,267,268,269,272,274,275,277,278,282,286,288,290,291,293,294,297,303,309,315,316,318,321,322,351,352,353,354,355,357,365,374,376,378,380,385,390,391,396,403,404,415,418,419,420,421,423,424,425,426,427,428,429,430,431,432,433,434,436,437,438,439,441,442,443,444,448,459,460,461,463,464,465,466,468,469,470,471,473,474,475,476,478,479,481,482,485,488,489,490,492,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,511,512,513,515,516,517,518,519,520,521,522,523,524,525,526,527,530,533,534,535,537,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,556,557,558,560,561,562,564,566,567,568,569,570,572,574,576,577,578,579,580,581,586,587,588,589,592 
ITERFREQ: 1 times (ch = true) 397 constraints 565,571,573,575,579,582,583,584,585,590,591,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,2,3,610,4,611,5,612,613,6,614,8,615,9,616,617,10,618,12,619,620,13,621,14,622,15,623,624,17,625,18,626,19,20,627,628,629,630,24,631,25,632,633,27,634,635,29,636,637,30,31,638,639,640,34,641,642,36,643,37,644,645,646,647,41,648,42,649,43,650,651,652,46,653,654,655,656,50,657,658,52,659,53,660,661,55,662,663,664,665,666,59,60,667,61,668,62,669,63,670,64,671,672,673,67,674,675,676,72,77,80,83,85,86,87,88,89,91,94,98,99,102,107,110,111,112,116,118,120,121,124,127,130,136,138,139,141,145,146,147,148,149,150,151,152,158,159,163,164,170,172,173,175,179,180,181,182,183,184,185,186,187,188,189,190,191,196,197,201,202,206,207,208,211,212,214,215,217,221,223,224,226,228,229,230,231,232,233,234,235,236,237,238,239,240,245,246,247,250,251,252,254,255,256,259,260,261,262,263,264,265,266,270,271,273,276,279,281,283,287,288,291,292,293,294,295,298,299,300,302,304,305,306,307,310,311,312,313,314,317,319,320,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,356,358,359,360,361,362,363,364,366,367,368,369,370,371,372,373,375,377,379,381,382,383,384,386,387,388,389,390,392,393,394,395,397,398,399,400,401,402,405,406,407,408,409,410,411,412,413,414,416,417,420,422,435,438,440,441,445,447,449,450,451,452,453,454,455,456,457,458,462,464,465,466,467,468,470,472,475,477,478,479,480,483,486,487,488,491,510,514,519,525,528,529,531,532,533,536,538,555,559,563 
ITERFREQ: 2 times (ch = false) 30 constraints 49,54,65,68,69,135,140,161,163,169,174,204,209,211,215,220,225,248,253,254,255,257,258,270,284,308,311,514,529,538 
ITERFREQ: 2 times (ch = true) 26 constraints 21,26,32,33,38,39,40,100,104,285,289,442,446,469,471,474,476,481,494,507,516,518,520,526,539,552 
ITERFREQ: 3 times (ch = false) 20 constraints 156,157,158,162,194,195,196,199,200,205,206,210,243,244,245,249,250,280,484,493 
ITERFREQ: 3 times (ch = true) 23 constraints 49,54,65,68,69,103,135,140,156,161,169,174,194,199,204,209,220,225,243,248,253,257,280 
ITERFREQ: 4 times (ch = false) 5 constraints 103,201,214,285,289 
ITERFREQ: 4 times (ch = true) 1 constraints 258 
ITERFREQ: 5 times (ch = false) 15 constraints 100,104,153,154,155,165,191,208,213,217,240,247,252,299,300 
ITERFREQ: 6 times (ch = false) 14 constraints 76,77,87,88,89,132,160,166,192,193,241,242,296,301 
ITERFREQ: 7 times (ch = false) 3 constraints 78,198,203 
Iteration Periods: 
Timer fixpoint iters :: <     0,  0.000, *>
                        <     1,  0.076, 
 num refines=0>
                        <     2,  0.424, 
 num refines=100>
                        <     3,  1.528, 
 num refines=200>
                        <     4, 12.989, 
 num refines=300>
                        <     5,  5.840, 
 num refines=400>
                        <     6, 16.841, 
 num refines=500>
                        <     7, 163.710, 
 num refines=600>
                        <     8, 187.816, 
 num refines=700>
                        <     9, 26.834, 
 num refines=800>
                        <    10, 81.589, 
 num refines=900>
                        <    11, 196.588, 
 num refines=1000>
                        <    12,  0.320, Finished>
                         
 
 
# Vars: (Total=486, False=45) Quals: (Total=7688, Avg=15.818930, Max=470, Min=0)
#Iteration Profile = (si=0 tp=444 unsatLHS=328 emptyRHS=131) 
#Queries: umatch=735150, match=27936, ask=441495, valid=30640
SMT stats: pushes=442371, pops=442371, unsats=30800 
TP stats: sets=552, queries=441819, count=703
 
SolnCluster: preds 163 = size 1 
SolnCluster: preds 3 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 248 = size 1 
SolnCluster: preds 59 = size 1 
SolnCluster: preds 109 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 166 = size 1 
SolnCluster: preds 3 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 111 = size 1 
SolnCluster: preds 3 = size 1 
SolnCluster: preds 7 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 7 = size 1 
SolnCluster: preds 78 = size 1 
SolnCluster: preds 346 = size 1 
SolnCluster: preds 140 = size 1 
SolnCluster: preds 64 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 153 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 42 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 330 = size 1 
SolnCluster: preds 139 = size 1 
SolnCluster: preds 191 = size 1 
SolnCluster: preds 78 = size 1 
SolnCluster: preds 37 = size 1 
SolnCluster: preds 1 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 21 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 167 = size 1 
SolnCluster: preds 117 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 3 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 10 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 3 = size 1 
SolnCluster: preds 133 = size 1 
SolnCluster: preds 1 = size 1 
SolnCluster: preds 6 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 3 = size 1 
SolnCluster: preds 5 = size 1 
SolnCluster: preds 1 = size 1 
SolnCluster: preds 162 = size 1 
SolnCluster: preds 59 = size 1 
SolnCluster: preds 3 = size 1 
SolnCluster: preds 81 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 169 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 1 = size 1 
SolnCluster: preds 110 = size 1 
SolnCluster: preds 8 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 107 = size 1 
SolnCluster: preds 109 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 218 = size 1 
SolnCluster: preds 4 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 81 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 470 = size 1 
SolnCluster: preds 1 = size 45 
SolnCluster: preds 35 = size 1 
SolnCluster: preds 58 = size 1 
SolnCluster: preds 37 = size 1 
SolnCluster: preds 110 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 114 = size 1 
SolnCluster: preds 6 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 58 = size 1 
SolnCluster: preds 99 = size 1 
SolnCluster: preds 1 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 264 = size 1 
SolnCluster: preds 68 = size 1 
SolnCluster: preds 264 = size 1 
SolnCluster: preds 81 = size 1 
SolnCluster: preds 1 = size 1 
SolnCluster: preds 8 = size 1 
SolnCluster: preds 1 = size 1 
SolnCluster: preds 1 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 76 = size 1 
SolnCluster: preds 26 = size 1 
SolnCluster: preds 244 = size 1 
SolnCluster: preds 72 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 43 = size 1 
SolnCluster: preds 81 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 1 = size 1 
SolnCluster: preds 78 = size 1 
SolnCluster: preds 59 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 248 = size 1 
SolnCluster: preds 1 = size 1 
SolnCluster: preds 81 = size 1 
SolnCluster: preds 68 = size 1 
SolnCluster: preds 264 = size 1 
SolnCluster: preds 99 = size 1 
SolnCluster: preds 21 = size 1 
SolnCluster: preds 74 = size 1 
SolnCluster: preds 10 = size 1 
SolnCluster: preds 1 = size 1 
SolnCluster: preds 70 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 24 = size 1 
SolnCluster: preds 85 = size 1 
SolnCluster: preds 20 = size 1 
SolnCluster: preds 2 = size 1 
SolnCluster: preds 0 = size 308 
SolnCluster: preds 10 = size 1 
SolnCluster: preds 68 = size 1 
SolnCluster: preds 1 = size 1 
Fixpoint: Testing Solution 
Fixpoint: Saving Result 
Fixpoint Solver Time 
TOTAL                         824.692 s
  save                           1.856 s
  solve                         704.104 s
    Solve.unsatcs                  7.716 s
      Z3.pop                         0.088 s
      unsat                          1.076 s
        Z3.check                       1.076 s
      Z3.ass_cst                     0.472 s
      Z3.push                        1.152 s
      z3Pred                         2.788 s
        z3Var memo                     0.908 s
      fixdiv                         0.096 s
    Solve.dump                     0.032 s
    Solve.acsolve                 694.479 s
      refine                        693.183 s
        refine                        693.183 s
          cx_update                      0.000 s
          check tp                      649.533 s
            Z3.pop                        37.682 s
            unsat                         588.281 s
              Z3.check                      587.481 s
            Z3.ass_cst                     9.137 s
            Z3.push                        4.680 s
            z3Pred                         5.544 s
              z3Var memo                     1.500 s
            fixdiv                         0.300 s
          lhs_contra                     0.040 s
          preds_of_lhs                  37.998 s
          rhs_cands                      5.408 s
    Cindex.winit                   0.004 s
    Prepass.profile                0.072 s
  Validate                      71.108 s
    valid rhs                      3.316 s
      validate_vars                  0.608 s
      preds_of_reft                  2.356 s
    validate_vars                  5.856 s
  Dom.create                    46.783 s
    cx_update                      0.032 s
    Z3.check                       0.000 s
    Z3 assert axiom                0.000 s
    z3Var memo                     0.000 s
    Annots: make qleqs             0.040 s
      Z3.pop                         0.004 s
      unsat                          0.024 s
        Z3.check                       0.024 s
      Z3.ass_cst                     0.004 s
      Z3.push                        0.000 s
      z3Pred                         0.000 s
        z3Var memo                     0.000 s
      fixdiv                         0.000 s
      Z3.check                       0.000 s
      Z3 assert axiom                0.000 s
      z3Var memo                     0.000 s
    Qual Inst                      4.876 s
  Constant EnvWF                 0.024 s
  Simplify                       0.000 s
    add ids  1                     0.000 s
  Constant Env                   0.040 s
  Ref Index                      0.000 s
  create                         0.000 s
  making_graph                   0.272 s
  parse                          0.504 s
  Annots: make qleqs             0.000 s
  Qual Inst                      0.000 s
Fixpoint: Saving Result DONE 

SAT
-> GHC.Types.IO Data.ByteString.Internal.ByteString
       [LclId]
       lq_anf__dhma = start size0 off lq_anf__dhm9 } in
     let {
       lq_anf__dhmb :: GHC.Types.IO Data.ByteString.Internal.ByteString
       [LclId]
       lq_anf__dhmb =
         GHC.Base.>>=
           @ GHC.Types.IO
           GHC.Base.$fMonadIO
           @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
           @ Data.ByteString.Internal.ByteString
           lq_anf__dhm8
           lq_anf__dhma } in
     GHC.Base.$
       @ (GHC.Types.IO Data.ByteString.Internal.ByteString)
       @ Data.ByteString.Internal.ByteString
       lq_anf__dhm6
       lq_anf__dhmb
     }]
*************** Slicing Out Unchanged CoreBinds *****************
[1;94m
**** DONE:  generateConstraints ************************************************
[0m[1;90m 
[0mEXEC: LD_LIBRARY_PATH=/home/gridaphobe/src/liquid/.hsenv/cabal/bin/ /home/gridaphobe/src/liquid/.hsenv/cabal/bin/fixpoint.native -v 1 -notruekvars -refinesort -noslice -nosimple -strictsortcheck -sortedquals -no-gen-qual-sorts -smtsolver z3mem -out Data/Text/Encoding.hs.fqout Data/Text/Encoding.hs.fq
[1;94m
**** START: fixpoint ***********************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  fixpoint ***********************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  solve **************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  annotate ***********************************************************
[0m[1;90m 
[0m[1;92m
**** SAFE **********************************************************************
[0m