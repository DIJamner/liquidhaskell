SAT 
 
 
 
solution: k_34 := [(papp1(p, VV#33), Papp(VV#33, p))] 

solution: k_44 := [((VV#43 > 0), CmpZ4(VV#43));((VV#43 >= lq_anf__dkx), Cmp2(VV#43, lq_anf__dkx));((VV#43 <= lq_anf__dky), Cmp0(VV#43, lq_anf__dky));((VV#43 >= 0), Auto1(VV#43));((VV#43 < 256), Auto(VV#43))] 

solution: k_48 := [((VV#47 > 0), CmpZ4(VV#47));((VV#47 >= lq_anf__dkA), Cmp2(VV#47, lq_anf__dkA));((VV#47 <= lq_anf__dkz), Cmp0(VV#47, lq_anf__dkz));((VV#47 >= 0), Auto1(VV#47));((VV#47 < 256), Auto(VV#47))] 

//QUALIFIERS 

qualif True1(v:@(0)):Prop(v)

qualif True(v:bool):(Bexp v)

qualif SameLen(v:List @(0), ~A:List @(1)):(len([v]) = len([~A]))

qualif Papp2(v:@(0), ~X:@(1), ~P:Pred @(0) @(1)):papp2(~P, v, ~X)

qualif Papp(v:@(0), ~P:Pred @(0)):papp1(~P, v)
qualif One(v:int):(v = 1)

qualif ListZ1(v:List @(0)):(len([v]) > 0)

qualif ListZ0(v:List @(0)):(len([v]) >= 0)

qualif ListZ(v:List @(0)):(len([v]) = 0)

qualif LenEq(v:List @(0), ~A:int):(~A = len([v]))

qualif LenDiff0(v:List @(0), ~A:int):(len([v]) = (~A - 1))

qualif LenDiff(v:List @(0), ~A:int):(len([v]) = (~A + 1))

qualif LenAcc(v:int, ~A:List @(0), ~B:int):(v = (len([~A]) + ~B))

qualif IsEmp0(v:@(0), ~A:List @(1)):(Prop(v) <=> (len([~A]) = 0))

qualif IsEmp(v:@(0), ~A:List @(1)):(Prop(v) <=> (len([~A]) > 0))

qualif False1(v:@(0)):(~ (Prop(v)))
qualif False(v:bool):(~ ((Bexp v)))

qualif EqLen(v:int, ~A:List @(0)):(v = len([~A]))

qualif CmpZ4(v:@(0)):(v > 0)
qualif CmpZ3(v:@(0)):(v = 0)

qualif CmpZ2(v:@(0)):(v <= 0)
qualif CmpZ1(v:@(0)):(v >= 0)

qualif CmpZ0(v:@(0)):(v < 0)
qualif CmpZ(v:@(0)):(v != 0)

qualif Cmp4(v:@(0), ~A:@(0)):(v < ~A)
qualif Cmp3(v:@(0), ~A:@(0)):(v != ~A)

qualif Cmp2(v:@(0), ~A:@(0)):(v >= ~A)
qualif Cmp1(v:@(0), ~A:@(0)):(v = ~A)

qualif Cmp0(v:@(0), ~A:@(0)):(v <= ~A)
qualif Cmp(v:@(0), ~A:@(0)):(v > ~A)

qualif Bot2(v:obj):(0 = 1)
qualif Bot1(v:@(0)):(0 = 1)

qualif Bot0(v:bool):(0 = 1)
qualif Bot(v:int):(0 = 1)

qualif Auto1(VV:int):(VV >= 0)
qualif Auto0(VV:int):(0 <= VV)

qualif Auto(VV:int):(VV < 256) 

