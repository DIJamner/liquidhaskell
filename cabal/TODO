FEATURE STACK
  , pos/deptup.hs             (type signature: for constructor wrapper)

TODO
----

GHC.List    <---------------------- HEREHEREHEREHERE

Int# issue. Fix anormalize so that it doesn't transform 

    case n# +# 1# (bound to tmp) of ...

is transformed to

    let tmp' = n# +# 1# in
    case tmp' (bound to tmp) of  ...

which makes GHC throw a hissy fit. Rig ANF so it doesn't do the above:

    case e of ...

1. if e is primitive then leave it be (don't normalize)

2. consgen SHOULD work assuming that there is no fanciness in the PRIMITIVE EXPR


KNOWN BUGS
----------

- tests/todo/fft.hs

- hmatrix
    > http://hackage.haskell.org/packages/archive/hmatrix/0.12.0.1/doc/html/src/Data-Packed-Internal-Matrix.html#Matrix
    > http://hackage.haskell.org/packages/archive/hmatrix/0.12.0.1/doc/html/src/Data-Packed-Internal-Vector.html#fromList
    
- xmonad properties

- NDM/catch benchmarks (with refinements)

- cabal integration
    > so you can build against liquid?
    > how does this affect ghc integration? (shouldn't matter, because you
    > can specify --with-ghc

- binsearch crashes because you have chains like:
        
        x1 = 2
        x2 = x1
        x3 = x2
        z  = x3 / 2

  so I guess you need some constprop inside the constraint simplification.

- tests/pos/data-mono0.hs
  partial pattern match desugars into exception syntax with unhandled
  casts. Throws an error in fixpoint. At least throw error in Constraint Gen?
          (\ _ ->
             (Control.Exception.Base.irrefutPatError
                @ () "pos/data-mono0.hs:8:9-23|(Test.Cons x _)")
             `cast` (UnsafeCo () GHC.Types.Int :: () ~ GHC.Types.Int))
            GHC.Prim.realWorld#;
